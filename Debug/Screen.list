
Screen.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000031c0  080001bc  080001bc  000011bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  0800337c  0800337c  0000437c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080033bc  080033bc  0000501c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000000  080033bc  080033bc  0000501c  2**0
                  CONTENTS, READONLY
  5 .preinit_array 00000000  080033bc  080033bc  0000501c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080033bc  080033bc  000043bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080033c0  080033c0  000043c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000001c  20040000  080033c4  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000088  2004001c  080033e0  0000501c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200400a4  080033e0  000050a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000501c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008482  00000000  00000000  0000504c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001721  00000000  00000000  0000d4ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000008c8  00000000  00000000  0000ebf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000069d  00000000  00000000  0000f4b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000291be  00000000  00000000  0000fb55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00009a25  00000000  00000000  00038d13  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f9a6c  00000000  00000000  00042738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0013c1a4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000022f4  00000000  00000000  0013c1e8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000042  00000000  00000000  0013e4dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001bc <__do_global_dtors_aux>:
 80001bc:	b510      	push	{r4, lr}
 80001be:	4c05      	ldr	r4, [pc, #20]	@ (80001d4 <__do_global_dtors_aux+0x18>)
 80001c0:	7823      	ldrb	r3, [r4, #0]
 80001c2:	b933      	cbnz	r3, 80001d2 <__do_global_dtors_aux+0x16>
 80001c4:	4b04      	ldr	r3, [pc, #16]	@ (80001d8 <__do_global_dtors_aux+0x1c>)
 80001c6:	b113      	cbz	r3, 80001ce <__do_global_dtors_aux+0x12>
 80001c8:	4804      	ldr	r0, [pc, #16]	@ (80001dc <__do_global_dtors_aux+0x20>)
 80001ca:	f3af 8000 	nop.w
 80001ce:	2301      	movs	r3, #1
 80001d0:	7023      	strb	r3, [r4, #0]
 80001d2:	bd10      	pop	{r4, pc}
 80001d4:	2004001c 	.word	0x2004001c
 80001d8:	00000000 	.word	0x00000000
 80001dc:	08003364 	.word	0x08003364

080001e0 <frame_dummy>:
 80001e0:	b508      	push	{r3, lr}
 80001e2:	4b03      	ldr	r3, [pc, #12]	@ (80001f0 <frame_dummy+0x10>)
 80001e4:	b11b      	cbz	r3, 80001ee <frame_dummy+0xe>
 80001e6:	4903      	ldr	r1, [pc, #12]	@ (80001f4 <frame_dummy+0x14>)
 80001e8:	4803      	ldr	r0, [pc, #12]	@ (80001f8 <frame_dummy+0x18>)
 80001ea:	f3af 8000 	nop.w
 80001ee:	bd08      	pop	{r3, pc}
 80001f0:	00000000 	.word	0x00000000
 80001f4:	20040020 	.word	0x20040020
 80001f8:	08003364 	.word	0x08003364

080001fc <ILI9488_SendCommand>:
  //while((SPI1->SR & SPI_SR_TXE) == RESET);
  SPI1->DR = data;
}
//1. Write Command to LCD
void ILI9488_SendCommand(uint8_t com)
{
 80001fc:	b580      	push	{r7, lr}
 80001fe:	b084      	sub	sp, #16
 8000200:	af00      	add	r7, sp, #0
 8000202:	4603      	mov	r3, r0
 8000204:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8000206:	79fb      	ldrb	r3, [r7, #7]
 8000208:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_RESET);
	DC_COMMAND();
 800020a:	2200      	movs	r2, #0
 800020c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000210:	480c      	ldr	r0, [pc, #48]	@ (8000244 <ILI9488_SendCommand+0x48>)
 8000212:	f001 fd71 	bl	8001cf8 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 8000216:	2200      	movs	r2, #0
 8000218:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800021c:	480a      	ldr	r0, [pc, #40]	@ (8000248 <ILI9488_SendCommand+0x4c>)
 800021e:	f001 fd6b 	bl	8001cf8 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi1, &tmpCmd, 1, 1);
 8000222:	f107 010f 	add.w	r1, r7, #15
 8000226:	2301      	movs	r3, #1
 8000228:	2201      	movs	r2, #1
 800022a:	4808      	ldr	r0, [pc, #32]	@ (800024c <ILI9488_SendCommand+0x50>)
 800022c:	f002 fd93 	bl	8002d56 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000230:	2201      	movs	r2, #1
 8000232:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000236:	4804      	ldr	r0, [pc, #16]	@ (8000248 <ILI9488_SendCommand+0x4c>)
 8000238:	f001 fd5e 	bl	8001cf8 <HAL_GPIO_WritePin>
	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 800023c:	bf00      	nop
 800023e:	3710      	adds	r7, #16
 8000240:	46bd      	mov	sp, r7
 8000242:	bd80      	pop	{r7, pc}
 8000244:	48000c00 	.word	0x48000c00
 8000248:	48001400 	.word	0x48001400
 800024c:	2004003c 	.word	0x2004003c

08000250 <ILI9488_SendData>:

//2. Write data to LCD
void ILI9488_SendData(uint8_t data)
{
 8000250:	b580      	push	{r7, lr}
 8000252:	b084      	sub	sp, #16
 8000254:	af00      	add	r7, sp, #0
 8000256:	4603      	mov	r3, r0
 8000258:	71fb      	strb	r3, [r7, #7]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 800025a:	79fb      	ldrb	r3, [r7, #7]
 800025c:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	//HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
	DC_DATA();
 800025e:	2201      	movs	r2, #1
 8000260:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000264:	480c      	ldr	r0, [pc, #48]	@ (8000298 <ILI9488_SendData+0x48>)
 8000266:	f001 fd47 	bl	8001cf8 <HAL_GPIO_WritePin>
	//Put CS LOW
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
	CS_A();
 800026a:	2200      	movs	r2, #0
 800026c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000270:	480a      	ldr	r0, [pc, #40]	@ (800029c <ILI9488_SendData+0x4c>)
 8000272:	f001 fd41 	bl	8001cf8 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(&hspi1, &tmpCmd, 1, 1);
 8000276:	f107 010f 	add.w	r1, r7, #15
 800027a:	2301      	movs	r3, #1
 800027c:	2201      	movs	r2, #1
 800027e:	4808      	ldr	r0, [pc, #32]	@ (80002a0 <ILI9488_SendData+0x50>)
 8000280:	f002 fd69 	bl	8002d56 <HAL_SPI_Transmit>
	//SendByte(tmpCmd);
	//WaitLastData();
	CS_D();
 8000284:	2201      	movs	r2, #1
 8000286:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800028a:	4804      	ldr	r0, [pc, #16]	@ (800029c <ILI9488_SendData+0x4c>)
 800028c:	f001 fd34 	bl	8001cf8 <HAL_GPIO_WritePin>

	//Bring CS HIGH
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}
 8000290:	bf00      	nop
 8000292:	3710      	adds	r7, #16
 8000294:	46bd      	mov	sp, r7
 8000296:	bd80      	pop	{r7, pc}
 8000298:	48000c00 	.word	0x48000c00
 800029c:	48001400 	.word	0x48001400
 80002a0:	2004003c 	.word	0x2004003c

080002a4 <ILI9488_SendData_Multi>:
//2.2 Write multiple/DMA
void ILI9488_SendData_Multi(uint8_t *buff, size_t buff_size){
 80002a4:	b580      	push	{r7, lr}
 80002a6:	b084      	sub	sp, #16
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	6078      	str	r0, [r7, #4]
 80002ac:	6039      	str	r1, [r7, #0]
	DC_DATA();
 80002ae:	2201      	movs	r2, #1
 80002b0:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80002b4:	4816      	ldr	r0, [pc, #88]	@ (8000310 <ILI9488_SendData_Multi+0x6c>)
 80002b6:	f001 fd1f 	bl	8001cf8 <HAL_GPIO_WritePin>
	    buff++;
	  }

	  WaitLastData();
	  CS_D();*/
	CS_A();
 80002ba:	2200      	movs	r2, #0
 80002bc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80002c0:	4814      	ldr	r0, [pc, #80]	@ (8000314 <ILI9488_SendData_Multi+0x70>)
 80002c2:	f001 fd19 	bl	8001cf8 <HAL_GPIO_WritePin>
	while (buff_size > 0){
 80002c6:	e015      	b.n	80002f4 <ILI9488_SendData_Multi+0x50>
		uint16_t chunk_size = buff_size > 32768 ? 32768 : buff_size;
 80002c8:	683b      	ldr	r3, [r7, #0]
 80002ca:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80002ce:	bf28      	it	cs
 80002d0:	f44f 4300 	movcs.w	r3, #32768	@ 0x8000
 80002d4:	81fb      	strh	r3, [r7, #14]
		HAL_SPI_Transmit(&hspi1, buff, chunk_size, HAL_MAX_DELAY);
 80002d6:	89fa      	ldrh	r2, [r7, #14]
 80002d8:	f04f 33ff 	mov.w	r3, #4294967295
 80002dc:	6879      	ldr	r1, [r7, #4]
 80002de:	480e      	ldr	r0, [pc, #56]	@ (8000318 <ILI9488_SendData_Multi+0x74>)
 80002e0:	f002 fd39 	bl	8002d56 <HAL_SPI_Transmit>
		buff += chunk_size;
 80002e4:	89fb      	ldrh	r3, [r7, #14]
 80002e6:	687a      	ldr	r2, [r7, #4]
 80002e8:	4413      	add	r3, r2
 80002ea:	607b      	str	r3, [r7, #4]
		buff_size -= chunk_size;
 80002ec:	89fb      	ldrh	r3, [r7, #14]
 80002ee:	683a      	ldr	r2, [r7, #0]
 80002f0:	1ad3      	subs	r3, r2, r3
 80002f2:	603b      	str	r3, [r7, #0]
	while (buff_size > 0){
 80002f4:	683b      	ldr	r3, [r7, #0]
 80002f6:	2b00      	cmp	r3, #0
 80002f8:	d1e6      	bne.n	80002c8 <ILI9488_SendData_Multi+0x24>
	}
	CS_D();
 80002fa:	2201      	movs	r2, #1
 80002fc:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000300:	4804      	ldr	r0, [pc, #16]	@ (8000314 <ILI9488_SendData_Multi+0x70>)
 8000302:	f001 fcf9 	bl	8001cf8 <HAL_GPIO_WritePin>
}
 8000306:	bf00      	nop
 8000308:	3710      	adds	r7, #16
 800030a:	46bd      	mov	sp, r7
 800030c:	bd80      	pop	{r7, pc}
 800030e:	bf00      	nop
 8000310:	48000c00 	.word	0x48000c00
 8000314:	48001400 	.word	0x48001400
 8000318:	2004003c 	.word	0x2004003c

0800031c <ILI9488_Init>:
	//HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}*/

//void ILI9488_Init(SPI_HandleTypeDef *spiLcdHandle, GPIO_TypeDef *csPORT, uint16_t csPIN, GPIO_TypeDef *dcPORT, uint16_t dcPIN, GPIO_TypeDef *resetPORT, uint16_t resetPIN)
void ILI9488_Init()
{
 800031c:	b580      	push	{r7, lr}
 800031e:	af00      	add	r7, sp, #0
	 RST_A();
	 HAL_Delay(10);
	 RST_D();
	 //HAL_GPIO_WritePin(tftRESET_GPIO, tftRESET_PIN, GPIO_PIN_SET);  //Turn LCD ON*/
	//SPI1->CR1 |= SPI_CR1_SPE;
	CS_D();
 8000320:	2201      	movs	r2, #1
 8000322:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000326:	486e      	ldr	r0, [pc, #440]	@ (80004e0 <ILI9488_Init+0x1c4>)
 8000328:	f001 fce6 	bl	8001cf8 <HAL_GPIO_WritePin>
	RST_A();
 800032c:	2200      	movs	r2, #0
 800032e:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000332:	486c      	ldr	r0, [pc, #432]	@ (80004e4 <ILI9488_Init+0x1c8>)
 8000334:	f001 fce0 	bl	8001cf8 <HAL_GPIO_WritePin>
		 HAL_Delay(10);
 8000338:	200a      	movs	r0, #10
 800033a:	f001 fa41 	bl	80017c0 <HAL_Delay>
		 RST_D();
 800033e:	2201      	movs	r2, #1
 8000340:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000344:	4867      	ldr	r0, [pc, #412]	@ (80004e4 <ILI9488_Init+0x1c8>)
 8000346:	f001 fcd7 	bl	8001cf8 <HAL_GPIO_WritePin>
	 width=ILI9488_TFTWIDTH;
 800034a:	4b67      	ldr	r3, [pc, #412]	@ (80004e8 <ILI9488_Init+0x1cc>)
 800034c:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000350:	801a      	strh	r2, [r3, #0]
	 height=ILI9488_TFTHEIGHT;
 8000352:	4b66      	ldr	r3, [pc, #408]	@ (80004ec <ILI9488_Init+0x1d0>)
 8000354:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8000358:	801a      	strh	r2, [r3, #0]
	 //CS_A();
	 ILI9488_SendCommand(0xE0);
 800035a:	20e0      	movs	r0, #224	@ 0xe0
 800035c:	f7ff ff4e 	bl	80001fc <ILI9488_SendCommand>
	 ILI9488_SendData(0x00);
 8000360:	2000      	movs	r0, #0
 8000362:	f7ff ff75 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x03);
 8000366:	2003      	movs	r0, #3
 8000368:	f7ff ff72 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 800036c:	2009      	movs	r0, #9
 800036e:	f7ff ff6f 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 8000372:	2008      	movs	r0, #8
 8000374:	f7ff ff6c 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 8000378:	2016      	movs	r0, #22
 800037a:	f7ff ff69 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800037e:	200a      	movs	r0, #10
 8000380:	f7ff ff66 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x3F);
 8000384:	203f      	movs	r0, #63	@ 0x3f
 8000386:	f7ff ff63 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x78);
 800038a:	2078      	movs	r0, #120	@ 0x78
 800038c:	f7ff ff60 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x4C);
 8000390:	204c      	movs	r0, #76	@ 0x4c
 8000392:	f7ff ff5d 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x09);
 8000396:	2009      	movs	r0, #9
 8000398:	f7ff ff5a 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x0A);
 800039c:	200a      	movs	r0, #10
 800039e:	f7ff ff57 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x08);
 80003a2:	2008      	movs	r0, #8
 80003a4:	f7ff ff54 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x16);
 80003a8:	2016      	movs	r0, #22
 80003aa:	f7ff ff51 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x1A);
 80003ae:	201a      	movs	r0, #26
 80003b0:	f7ff ff4e 	bl	8000250 <ILI9488_SendData>
	 ILI9488_SendData(0x0F);
 80003b4:	200f      	movs	r0, #15
 80003b6:	f7ff ff4b 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE1);
 80003ba:	20e1      	movs	r0, #225	@ 0xe1
 80003bc:	f7ff ff1e 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 80003c0:	2000      	movs	r0, #0
 80003c2:	f7ff ff45 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x16);
 80003c6:	2016      	movs	r0, #22
 80003c8:	f7ff ff42 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x19);
 80003cc:	2019      	movs	r0, #25
 80003ce:	f7ff ff3f 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x03);
 80003d2:	2003      	movs	r0, #3
 80003d4:	f7ff ff3c 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 80003d8:	200f      	movs	r0, #15
 80003da:	f7ff ff39 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x05);
 80003de:	2005      	movs	r0, #5
 80003e0:	f7ff ff36 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x32);
 80003e4:	2032      	movs	r0, #50	@ 0x32
 80003e6:	f7ff ff33 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x45);
 80003ea:	2045      	movs	r0, #69	@ 0x45
 80003ec:	f7ff ff30 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x46);
 80003f0:	2046      	movs	r0, #70	@ 0x46
 80003f2:	f7ff ff2d 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x04);
 80003f6:	2004      	movs	r0, #4
 80003f8:	f7ff ff2a 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x0E);
 80003fc:	200e      	movs	r0, #14
 80003fe:	f7ff ff27 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x0D);
 8000402:	200d      	movs	r0, #13
 8000404:	f7ff ff24 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x35);
 8000408:	2035      	movs	r0, #53	@ 0x35
 800040a:	f7ff ff21 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x37);
 800040e:	2037      	movs	r0, #55	@ 0x37
 8000410:	f7ff ff1e 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x0F);
 8000414:	200f      	movs	r0, #15
 8000416:	f7ff ff1b 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XC0);      //Power Control 1
 800041a:	20c0      	movs	r0, #192	@ 0xc0
 800041c:	f7ff feee 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x17);    //Vreg1out
 8000420:	2017      	movs	r0, #23
 8000422:	f7ff ff15 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x15);    //Verg2out
 8000426:	2015      	movs	r0, #21
 8000428:	f7ff ff12 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC1);      //Power Control 2
 800042c:	20c1      	movs	r0, #193	@ 0xc1
 800042e:	f7ff fee5 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x41);    //VGH,VGL
 8000432:	2041      	movs	r0, #65	@ 0x41
 8000434:	f7ff ff0c 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xC5);      //Power Control 3
 8000438:	20c5      	movs	r0, #197	@ 0xc5
 800043a:	f7ff fedf 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);
 800043e:	2000      	movs	r0, #0
 8000440:	f7ff ff06 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x12);    //Vcom
 8000444:	2012      	movs	r0, #18
 8000446:	f7ff ff03 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x80);
 800044a:	2080      	movs	r0, #128	@ 0x80
 800044c:	f7ff ff00 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x36);      //Memory Access
 8000450:	2036      	movs	r0, #54	@ 0x36
 8000452:	f7ff fed3 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x48);
 8000456:	2048      	movs	r0, #72	@ 0x48
 8000458:	f7ff fefa 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0x3A);      // Interface Pixel Format
 800045c:	203a      	movs	r0, #58	@ 0x3a
 800045e:	f7ff fecd 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x66); 	  //18 bit
 8000462:	2066      	movs	r0, #102	@ 0x66
 8000464:	f7ff fef4 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB0);      // Interface Mode Control
 8000468:	20b0      	movs	r0, #176	@ 0xb0
 800046a:	f7ff fec7 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x80);     			 //SDO NOT USE
 800046e:	2080      	movs	r0, #128	@ 0x80
 8000470:	f7ff feee 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB1);      //Frame rate
 8000474:	20b1      	movs	r0, #177	@ 0xb1
 8000476:	f7ff fec1 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA0);    //60Hz
 800047a:	20a0      	movs	r0, #160	@ 0xa0
 800047c:	f7ff fee8 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xB4);      //Display Inversion Control
 8000480:	20b4      	movs	r0, #180	@ 0xb4
 8000482:	f7ff febb 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x02);    //2-dot
 8000486:	2002      	movs	r0, #2
 8000488:	f7ff fee2 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XB6); //Display Function Control  RGB/MCU Interface Control
 800048c:	20b6      	movs	r0, #182	@ 0xb6
 800048e:	f7ff feb5 	bl	80001fc <ILI9488_SendCommand>

	 	ILI9488_SendData(0x02);    //MCU
 8000492:	2002      	movs	r0, #2
 8000494:	f7ff fedc 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x02);    //Source,Gate scan dieection
 8000498:	2002      	movs	r0, #2
 800049a:	f7ff fed9 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0XE9);      // Set Image Functio
 800049e:	20e9      	movs	r0, #233	@ 0xe9
 80004a0:	f7ff feac 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0x00);    // Disable 24 bit data
 80004a4:	2000      	movs	r0, #0
 80004a6:	f7ff fed3 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(0xF7);      // Adjust Control
 80004aa:	20f7      	movs	r0, #247	@ 0xf7
 80004ac:	f7ff fea6 	bl	80001fc <ILI9488_SendCommand>
	 	ILI9488_SendData(0xA9);
 80004b0:	20a9      	movs	r0, #169	@ 0xa9
 80004b2:	f7ff fecd 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x51);
 80004b6:	2051      	movs	r0, #81	@ 0x51
 80004b8:	f7ff feca 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x2C);
 80004bc:	202c      	movs	r0, #44	@ 0x2c
 80004be:	f7ff fec7 	bl	8000250 <ILI9488_SendData>
	 	ILI9488_SendData(0x82);    // D7 stream, loose
 80004c2:	2082      	movs	r0, #130	@ 0x82
 80004c4:	f7ff fec4 	bl	8000250 <ILI9488_SendData>

	 	ILI9488_SendCommand(ILI9488_SLPOUT);    //Exit Sleep
 80004c8:	2011      	movs	r0, #17
 80004ca:	f7ff fe97 	bl	80001fc <ILI9488_SendCommand>

	 	HAL_Delay(120);
 80004ce:	2078      	movs	r0, #120	@ 0x78
 80004d0:	f001 f976 	bl	80017c0 <HAL_Delay>

	 	ILI9488_SendCommand(ILI9488_DISPON);    //Display on
 80004d4:	2029      	movs	r0, #41	@ 0x29
 80004d6:	f7ff fe91 	bl	80001fc <ILI9488_SendCommand>

}
 80004da:	bf00      	nop
 80004dc:	bd80      	pop	{r7, pc}
 80004de:	bf00      	nop
 80004e0:	48001400 	.word	0x48001400
 80004e4:	48000c00 	.word	0x48000c00
 80004e8:	20040038 	.word	0x20040038
 80004ec:	2004003a 	.word	0x2004003a

080004f0 <setAddrWindow>:

void setAddrWindow(uint16_t x0, uint16_t y0, uint16_t x1, uint16_t y1)
{
 80004f0:	b590      	push	{r4, r7, lr}
 80004f2:	b085      	sub	sp, #20
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	4604      	mov	r4, r0
 80004f8:	4608      	mov	r0, r1
 80004fa:	4611      	mov	r1, r2
 80004fc:	461a      	mov	r2, r3
 80004fe:	4623      	mov	r3, r4
 8000500:	80fb      	strh	r3, [r7, #6]
 8000502:	4603      	mov	r3, r0
 8000504:	80bb      	strh	r3, [r7, #4]
 8000506:	460b      	mov	r3, r1
 8000508:	807b      	strh	r3, [r7, #2]
 800050a:	4613      	mov	r3, r2
 800050c:	803b      	strh	r3, [r7, #0]
	ILI9488_SendData(y0 >> 8);
	ILI9488_SendData(y0 & 0xff);     // YSTART
	ILI9488_SendData(y1 >> 8);
	ILI9488_SendData(y1 & 0xff);     // YEND
	ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
	ILI9488_SendCommand(ILI9488_CASET); // Column addr set
 800050e:	202a      	movs	r0, #42	@ 0x2a
 8000510:	f7ff fe74 	bl	80001fc <ILI9488_SendCommand>
		{
		uint8_t data[] = {(x0 >> 8) & 0xFF, x0 & 0xFF, (x1 >> 8) & 0xFF, x1 & 0xFF};
 8000514:	88fb      	ldrh	r3, [r7, #6]
 8000516:	0a1b      	lsrs	r3, r3, #8
 8000518:	b29b      	uxth	r3, r3
 800051a:	b2db      	uxtb	r3, r3
 800051c:	733b      	strb	r3, [r7, #12]
 800051e:	88fb      	ldrh	r3, [r7, #6]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	737b      	strb	r3, [r7, #13]
 8000524:	887b      	ldrh	r3, [r7, #2]
 8000526:	0a1b      	lsrs	r3, r3, #8
 8000528:	b29b      	uxth	r3, r3
 800052a:	b2db      	uxtb	r3, r3
 800052c:	73bb      	strb	r3, [r7, #14]
 800052e:	887b      	ldrh	r3, [r7, #2]
 8000530:	b2db      	uxtb	r3, r3
 8000532:	73fb      	strb	r3, [r7, #15]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000534:	f107 030c 	add.w	r3, r7, #12
 8000538:	2104      	movs	r1, #4
 800053a:	4618      	mov	r0, r3
 800053c:	f7ff feb2 	bl	80002a4 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_PASET);
 8000540:	202b      	movs	r0, #43	@ 0x2b
 8000542:	f7ff fe5b 	bl	80001fc <ILI9488_SendCommand>
		{
		uint8_t data[] = {(y0 >> 8) & 0xFF, y0 & 0xFF, (y1 >> 8) & 0xFF, y1 & 0xFF};
 8000546:	88bb      	ldrh	r3, [r7, #4]
 8000548:	0a1b      	lsrs	r3, r3, #8
 800054a:	b29b      	uxth	r3, r3
 800054c:	b2db      	uxtb	r3, r3
 800054e:	723b      	strb	r3, [r7, #8]
 8000550:	88bb      	ldrh	r3, [r7, #4]
 8000552:	b2db      	uxtb	r3, r3
 8000554:	727b      	strb	r3, [r7, #9]
 8000556:	883b      	ldrh	r3, [r7, #0]
 8000558:	0a1b      	lsrs	r3, r3, #8
 800055a:	b29b      	uxth	r3, r3
 800055c:	b2db      	uxtb	r3, r3
 800055e:	72bb      	strb	r3, [r7, #10]
 8000560:	883b      	ldrh	r3, [r7, #0]
 8000562:	b2db      	uxtb	r3, r3
 8000564:	72fb      	strb	r3, [r7, #11]
		ILI9488_SendData_Multi(data, sizeof(data));
 8000566:	f107 0308 	add.w	r3, r7, #8
 800056a:	2104      	movs	r1, #4
 800056c:	4618      	mov	r0, r3
 800056e:	f7ff fe99 	bl	80002a4 <ILI9488_SendData_Multi>
		}
		ILI9488_SendCommand(ILI9488_RAMWR); // write to RAM*/
 8000572:	202c      	movs	r0, #44	@ 0x2c
 8000574:	f7ff fe42 	bl	80001fc <ILI9488_SendCommand>
}
 8000578:	bf00      	nop
 800057a:	3714      	adds	r7, #20
 800057c:	46bd      	mov	sp, r7
 800057e:	bd90      	pop	{r4, r7, pc}

08000580 <drawPixel>:
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
}


void drawPixel(int16_t x, int16_t y, uint16_t color)
{
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	4603      	mov	r3, r0
 8000588:	80fb      	strh	r3, [r7, #6]
 800058a:	460b      	mov	r3, r1
 800058c:	80bb      	strh	r3, [r7, #4]
 800058e:	4613      	mov	r3, r2
 8000590:	807b      	strh	r3, [r7, #2]
	if ((x < 0) || (x >= width) || (y < 0) || (y >= height))
 8000592:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000596:	2b00      	cmp	r3, #0
 8000598:	db36      	blt.n	8000608 <drawPixel+0x88>
 800059a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800059e:	4a1c      	ldr	r2, [pc, #112]	@ (8000610 <drawPixel+0x90>)
 80005a0:	8812      	ldrh	r2, [r2, #0]
 80005a2:	4293      	cmp	r3, r2
 80005a4:	da30      	bge.n	8000608 <drawPixel+0x88>
 80005a6:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	db2c      	blt.n	8000608 <drawPixel+0x88>
 80005ae:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80005b2:	4a18      	ldr	r2, [pc, #96]	@ (8000614 <drawPixel+0x94>)
 80005b4:	8812      	ldrh	r2, [r2, #0]
 80005b6:	4293      	cmp	r3, r2
 80005b8:	da26      	bge.n	8000608 <drawPixel+0x88>
		return;

	setAddrWindow(x, y, x + 1, y + 1);
 80005ba:	88f8      	ldrh	r0, [r7, #6]
 80005bc:	88b9      	ldrh	r1, [r7, #4]
 80005be:	88fb      	ldrh	r3, [r7, #6]
 80005c0:	3301      	adds	r3, #1
 80005c2:	b29a      	uxth	r2, r3
 80005c4:	88bb      	ldrh	r3, [r7, #4]
 80005c6:	3301      	adds	r3, #1
 80005c8:	b29b      	uxth	r3, r3
 80005ca:	f7ff ff91 	bl	80004f0 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 80005ce:	4b12      	ldr	r3, [pc, #72]	@ (8000618 <drawPixel+0x98>)
 80005d0:	681b      	ldr	r3, [r3, #0]
 80005d2:	4a12      	ldr	r2, [pc, #72]	@ (800061c <drawPixel+0x9c>)
 80005d4:	8811      	ldrh	r1, [r2, #0]
 80005d6:	2201      	movs	r2, #1
 80005d8:	4618      	mov	r0, r3
 80005da:	f001 fb8d 	bl	8001cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80005de:	4b10      	ldr	r3, [pc, #64]	@ (8000620 <drawPixel+0xa0>)
 80005e0:	681b      	ldr	r3, [r3, #0]
 80005e2:	4a10      	ldr	r2, [pc, #64]	@ (8000624 <drawPixel+0xa4>)
 80005e4:	8811      	ldrh	r1, [r2, #0]
 80005e6:	2200      	movs	r2, #0
 80005e8:	4618      	mov	r0, r3
 80005ea:	f001 fb85 	bl	8001cf8 <HAL_GPIO_WritePin>

	write16BitColor(color);
 80005ee:	887b      	ldrh	r3, [r7, #2]
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fb3f 	bl	8000c74 <write16BitColor>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80005f6:	4b0a      	ldr	r3, [pc, #40]	@ (8000620 <drawPixel+0xa0>)
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4a0a      	ldr	r2, [pc, #40]	@ (8000624 <drawPixel+0xa4>)
 80005fc:	8811      	ldrh	r1, [r2, #0]
 80005fe:	2201      	movs	r2, #1
 8000600:	4618      	mov	r0, r3
 8000602:	f001 fb79 	bl	8001cf8 <HAL_GPIO_WritePin>
 8000606:	e000      	b.n	800060a <drawPixel+0x8a>
		return;
 8000608:	bf00      	nop

}
 800060a:	3708      	adds	r7, #8
 800060c:	46bd      	mov	sp, r7
 800060e:	bd80      	pop	{r7, pc}
 8000610:	20040038 	.word	0x20040038
 8000614:	2004003a 	.word	0x2004003a
 8000618:	20040008 	.word	0x20040008
 800061c:	2004000c 	.word	0x2004000c
 8000620:	20040000 	.word	0x20040000
 8000624:	20040004 	.word	0x20040004

08000628 <drawFastVLine>:

void drawFastVLine(int16_t x, int16_t y, int16_t h, uint16_t color)
{
 8000628:	b590      	push	{r4, r7, lr}
 800062a:	b083      	sub	sp, #12
 800062c:	af00      	add	r7, sp, #0
 800062e:	4604      	mov	r4, r0
 8000630:	4608      	mov	r0, r1
 8000632:	4611      	mov	r1, r2
 8000634:	461a      	mov	r2, r3
 8000636:	4623      	mov	r3, r4
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	4603      	mov	r3, r0
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	460b      	mov	r3, r1
 8000640:	807b      	strh	r3, [r7, #2]
 8000642:	4613      	mov	r3, r2
 8000644:	803b      	strh	r3, [r7, #0]

	if ((x >= width) || (y >= height))
 8000646:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800064a:	4a27      	ldr	r2, [pc, #156]	@ (80006e8 <drawFastVLine+0xc0>)
 800064c:	8812      	ldrh	r2, [r2, #0]
 800064e:	4293      	cmp	r3, r2
 8000650:	da46      	bge.n	80006e0 <drawFastVLine+0xb8>
 8000652:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000656:	4a25      	ldr	r2, [pc, #148]	@ (80006ec <drawFastVLine+0xc4>)
 8000658:	8812      	ldrh	r2, [r2, #0]
 800065a:	4293      	cmp	r3, r2
 800065c:	da40      	bge.n	80006e0 <drawFastVLine+0xb8>
		return;

	if ((y + h - 1) >= height)
 800065e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000662:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000666:	4413      	add	r3, r2
 8000668:	4a20      	ldr	r2, [pc, #128]	@ (80006ec <drawFastVLine+0xc4>)
 800066a:	8812      	ldrh	r2, [r2, #0]
 800066c:	4293      	cmp	r3, r2
 800066e:	dd05      	ble.n	800067c <drawFastVLine+0x54>
		h = height - y;
 8000670:	4b1e      	ldr	r3, [pc, #120]	@ (80006ec <drawFastVLine+0xc4>)
 8000672:	881a      	ldrh	r2, [r3, #0]
 8000674:	88bb      	ldrh	r3, [r7, #4]
 8000676:	1ad3      	subs	r3, r2, r3
 8000678:	b29b      	uxth	r3, r3
 800067a:	807b      	strh	r3, [r7, #2]

	setAddrWindow(x, y, x, y + h - 1);
 800067c:	88f8      	ldrh	r0, [r7, #6]
 800067e:	88b9      	ldrh	r1, [r7, #4]
 8000680:	88fc      	ldrh	r4, [r7, #6]
 8000682:	88ba      	ldrh	r2, [r7, #4]
 8000684:	887b      	ldrh	r3, [r7, #2]
 8000686:	4413      	add	r3, r2
 8000688:	b29b      	uxth	r3, r3
 800068a:	3b01      	subs	r3, #1
 800068c:	b29b      	uxth	r3, r3
 800068e:	4622      	mov	r2, r4
 8000690:	f7ff ff2e 	bl	80004f0 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 8000694:	4b16      	ldr	r3, [pc, #88]	@ (80006f0 <drawFastVLine+0xc8>)
 8000696:	681b      	ldr	r3, [r3, #0]
 8000698:	4a16      	ldr	r2, [pc, #88]	@ (80006f4 <drawFastVLine+0xcc>)
 800069a:	8811      	ldrh	r1, [r2, #0]
 800069c:	2201      	movs	r2, #1
 800069e:	4618      	mov	r0, r3
 80006a0:	f001 fb2a 	bl	8001cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 80006a4:	4b14      	ldr	r3, [pc, #80]	@ (80006f8 <drawFastVLine+0xd0>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a14      	ldr	r2, [pc, #80]	@ (80006fc <drawFastVLine+0xd4>)
 80006aa:	8811      	ldrh	r1, [r2, #0]
 80006ac:	2200      	movs	r2, #0
 80006ae:	4618      	mov	r0, r3
 80006b0:	f001 fb22 	bl	8001cf8 <HAL_GPIO_WritePin>

	while (h--) {
 80006b4:	e003      	b.n	80006be <drawFastVLine+0x96>
		write16BitColor(color);
 80006b6:	883b      	ldrh	r3, [r7, #0]
 80006b8:	4618      	mov	r0, r3
 80006ba:	f000 fadb 	bl	8000c74 <write16BitColor>
	while (h--) {
 80006be:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80006c2:	b29a      	uxth	r2, r3
 80006c4:	3a01      	subs	r2, #1
 80006c6:	b292      	uxth	r2, r2
 80006c8:	807a      	strh	r2, [r7, #2]
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d1f3      	bne.n	80006b6 <drawFastVLine+0x8e>
	}
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80006ce:	4b0a      	ldr	r3, [pc, #40]	@ (80006f8 <drawFastVLine+0xd0>)
 80006d0:	681b      	ldr	r3, [r3, #0]
 80006d2:	4a0a      	ldr	r2, [pc, #40]	@ (80006fc <drawFastVLine+0xd4>)
 80006d4:	8811      	ldrh	r1, [r2, #0]
 80006d6:	2201      	movs	r2, #1
 80006d8:	4618      	mov	r0, r3
 80006da:	f001 fb0d 	bl	8001cf8 <HAL_GPIO_WritePin>
 80006de:	e000      	b.n	80006e2 <drawFastVLine+0xba>
		return;
 80006e0:	bf00      	nop

}
 80006e2:	370c      	adds	r7, #12
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd90      	pop	{r4, r7, pc}
 80006e8:	20040038 	.word	0x20040038
 80006ec:	2004003a 	.word	0x2004003a
 80006f0:	20040008 	.word	0x20040008
 80006f4:	2004000c 	.word	0x2004000c
 80006f8:	20040000 	.word	0x20040000
 80006fc:	20040004 	.word	0x20040004

08000700 <drawFastHLine>:

void drawFastHLine(int16_t x, int16_t y, int16_t w, uint16_t color)
{
 8000700:	b590      	push	{r4, r7, lr}
 8000702:	b083      	sub	sp, #12
 8000704:	af00      	add	r7, sp, #0
 8000706:	4604      	mov	r4, r0
 8000708:	4608      	mov	r0, r1
 800070a:	4611      	mov	r1, r2
 800070c:	461a      	mov	r2, r3
 800070e:	4623      	mov	r3, r4
 8000710:	80fb      	strh	r3, [r7, #6]
 8000712:	4603      	mov	r3, r0
 8000714:	80bb      	strh	r3, [r7, #4]
 8000716:	460b      	mov	r3, r1
 8000718:	807b      	strh	r3, [r7, #2]
 800071a:	4613      	mov	r3, r2
 800071c:	803b      	strh	r3, [r7, #0]

	if ((x >= width) || (y >= height))
 800071e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000722:	4a27      	ldr	r2, [pc, #156]	@ (80007c0 <drawFastHLine+0xc0>)
 8000724:	8812      	ldrh	r2, [r2, #0]
 8000726:	4293      	cmp	r3, r2
 8000728:	da45      	bge.n	80007b6 <drawFastHLine+0xb6>
 800072a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800072e:	4a25      	ldr	r2, [pc, #148]	@ (80007c4 <drawFastHLine+0xc4>)
 8000730:	8812      	ldrh	r2, [r2, #0]
 8000732:	4293      	cmp	r3, r2
 8000734:	da3f      	bge.n	80007b6 <drawFastHLine+0xb6>
		return;
	if ((x + w - 1) >= width)
 8000736:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800073a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800073e:	4413      	add	r3, r2
 8000740:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <drawFastHLine+0xc0>)
 8000742:	8812      	ldrh	r2, [r2, #0]
 8000744:	4293      	cmp	r3, r2
 8000746:	dd05      	ble.n	8000754 <drawFastHLine+0x54>
		w = width - x;
 8000748:	4b1d      	ldr	r3, [pc, #116]	@ (80007c0 <drawFastHLine+0xc0>)
 800074a:	881a      	ldrh	r2, [r3, #0]
 800074c:	88fb      	ldrh	r3, [r7, #6]
 800074e:	1ad3      	subs	r3, r2, r3
 8000750:	b29b      	uxth	r3, r3
 8000752:	807b      	strh	r3, [r7, #2]
	setAddrWindow(x, y, x + w - 1, y);
 8000754:	88f8      	ldrh	r0, [r7, #6]
 8000756:	88b9      	ldrh	r1, [r7, #4]
 8000758:	88fa      	ldrh	r2, [r7, #6]
 800075a:	887b      	ldrh	r3, [r7, #2]
 800075c:	4413      	add	r3, r2
 800075e:	b29b      	uxth	r3, r3
 8000760:	3b01      	subs	r3, #1
 8000762:	b29a      	uxth	r2, r3
 8000764:	88bb      	ldrh	r3, [r7, #4]
 8000766:	f7ff fec3 	bl	80004f0 <setAddrWindow>
	HAL_GPIO_WritePin(tftDC_GPIO, tftDC_PIN, GPIO_PIN_SET);
 800076a:	4b17      	ldr	r3, [pc, #92]	@ (80007c8 <drawFastHLine+0xc8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	4a17      	ldr	r2, [pc, #92]	@ (80007cc <drawFastHLine+0xcc>)
 8000770:	8811      	ldrh	r1, [r2, #0]
 8000772:	2201      	movs	r2, #1
 8000774:	4618      	mov	r0, r3
 8000776:	f001 fabf 	bl	8001cf8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_RESET);
 800077a:	4b15      	ldr	r3, [pc, #84]	@ (80007d0 <drawFastHLine+0xd0>)
 800077c:	681b      	ldr	r3, [r3, #0]
 800077e:	4a15      	ldr	r2, [pc, #84]	@ (80007d4 <drawFastHLine+0xd4>)
 8000780:	8811      	ldrh	r1, [r2, #0]
 8000782:	2200      	movs	r2, #0
 8000784:	4618      	mov	r0, r3
 8000786:	f001 fab7 	bl	8001cf8 <HAL_GPIO_WritePin>
	while (w--)
 800078a:	e003      	b.n	8000794 <drawFastHLine+0x94>
	{
		write16BitColor(color);
 800078c:	883b      	ldrh	r3, [r7, #0]
 800078e:	4618      	mov	r0, r3
 8000790:	f000 fa70 	bl	8000c74 <write16BitColor>
	while (w--)
 8000794:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000798:	b29a      	uxth	r2, r3
 800079a:	3a01      	subs	r2, #1
 800079c:	b292      	uxth	r2, r2
 800079e:	807a      	strh	r2, [r7, #2]
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d1f3      	bne.n	800078c <drawFastHLine+0x8c>
	}
	HAL_GPIO_WritePin(tftCS_GPIO, tftCS_PIN, GPIO_PIN_SET);
 80007a4:	4b0a      	ldr	r3, [pc, #40]	@ (80007d0 <drawFastHLine+0xd0>)
 80007a6:	681b      	ldr	r3, [r3, #0]
 80007a8:	4a0a      	ldr	r2, [pc, #40]	@ (80007d4 <drawFastHLine+0xd4>)
 80007aa:	8811      	ldrh	r1, [r2, #0]
 80007ac:	2201      	movs	r2, #1
 80007ae:	4618      	mov	r0, r3
 80007b0:	f001 faa2 	bl	8001cf8 <HAL_GPIO_WritePin>
 80007b4:	e000      	b.n	80007b8 <drawFastHLine+0xb8>
		return;
 80007b6:	bf00      	nop
}
 80007b8:	370c      	adds	r7, #12
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd90      	pop	{r4, r7, pc}
 80007be:	bf00      	nop
 80007c0:	20040038 	.word	0x20040038
 80007c4:	2004003a 	.word	0x2004003a
 80007c8:	20040008 	.word	0x20040008
 80007cc:	2004000c 	.word	0x2004000c
 80007d0:	20040000 	.word	0x20040000
 80007d4:	20040004 	.word	0x20040004

080007d8 <drawLine>:

void drawLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color)
{
 80007d8:	b590      	push	{r4, r7, lr}
 80007da:	b087      	sub	sp, #28
 80007dc:	af02      	add	r7, sp, #8
 80007de:	4604      	mov	r4, r0
 80007e0:	4608      	mov	r0, r1
 80007e2:	4611      	mov	r1, r2
 80007e4:	461a      	mov	r2, r3
 80007e6:	4623      	mov	r3, r4
 80007e8:	80fb      	strh	r3, [r7, #6]
 80007ea:	4603      	mov	r3, r0
 80007ec:	80bb      	strh	r3, [r7, #4]
 80007ee:	460b      	mov	r3, r1
 80007f0:	807b      	strh	r3, [r7, #2]
 80007f2:	4613      	mov	r3, r2
 80007f4:	803b      	strh	r3, [r7, #0]
	 if (x0 == x1) {
 80007f6:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80007fa:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80007fe:	429a      	cmp	r2, r3
 8000800:	d11a      	bne.n	8000838 <drawLine+0x60>
	    if (y0 > y1)
 8000802:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000806:	f9b7 3000 	ldrsh.w	r3, [r7]
 800080a:	429a      	cmp	r2, r3
 800080c:	dd05      	ble.n	800081a <drawLine+0x42>
	      swap(y0, y1);
 800080e:	88bb      	ldrh	r3, [r7, #4]
 8000810:	81bb      	strh	r3, [r7, #12]
 8000812:	883b      	ldrh	r3, [r7, #0]
 8000814:	80bb      	strh	r3, [r7, #4]
 8000816:	89bb      	ldrh	r3, [r7, #12]
 8000818:	803b      	strh	r3, [r7, #0]
	    drawFastVLine(x0, y0, y1 - y0 + 1, color);
 800081a:	883a      	ldrh	r2, [r7, #0]
 800081c:	88bb      	ldrh	r3, [r7, #4]
 800081e:	1ad3      	subs	r3, r2, r3
 8000820:	b29b      	uxth	r3, r3
 8000822:	3301      	adds	r3, #1
 8000824:	b29b      	uxth	r3, r3
 8000826:	b21a      	sxth	r2, r3
 8000828:	8c3b      	ldrh	r3, [r7, #32]
 800082a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800082e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000832:	f7ff fef9 	bl	8000628 <drawFastVLine>

	    writeLine(x0, y0, x1, y1, color);

	  }

}
 8000836:	e02d      	b.n	8000894 <drawLine+0xbc>
	  } else if (y0 == y1) {
 8000838:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800083c:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000840:	429a      	cmp	r2, r3
 8000842:	d11a      	bne.n	800087a <drawLine+0xa2>
	    if (x0 > x1)
 8000844:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000848:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800084c:	429a      	cmp	r2, r3
 800084e:	dd05      	ble.n	800085c <drawLine+0x84>
	      swap(x0, x1);
 8000850:	88fb      	ldrh	r3, [r7, #6]
 8000852:	81fb      	strh	r3, [r7, #14]
 8000854:	887b      	ldrh	r3, [r7, #2]
 8000856:	80fb      	strh	r3, [r7, #6]
 8000858:	89fb      	ldrh	r3, [r7, #14]
 800085a:	807b      	strh	r3, [r7, #2]
	    drawFastHLine(x0, y0, x1 - x0 + 1, color);
 800085c:	887a      	ldrh	r2, [r7, #2]
 800085e:	88fb      	ldrh	r3, [r7, #6]
 8000860:	1ad3      	subs	r3, r2, r3
 8000862:	b29b      	uxth	r3, r3
 8000864:	3301      	adds	r3, #1
 8000866:	b29b      	uxth	r3, r3
 8000868:	b21a      	sxth	r2, r3
 800086a:	8c3b      	ldrh	r3, [r7, #32]
 800086c:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000870:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000874:	f7ff ff44 	bl	8000700 <drawFastHLine>
}
 8000878:	e00c      	b.n	8000894 <drawLine+0xbc>
	    writeLine(x0, y0, x1, y1, color);
 800087a:	f9b7 4000 	ldrsh.w	r4, [r7]
 800087e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8000882:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000886:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 800088a:	8c3b      	ldrh	r3, [r7, #32]
 800088c:	9300      	str	r3, [sp, #0]
 800088e:	4623      	mov	r3, r4
 8000890:	f000 f804 	bl	800089c <writeLine>
}
 8000894:	bf00      	nop
 8000896:	3714      	adds	r7, #20
 8000898:	46bd      	mov	sp, r7
 800089a:	bd90      	pop	{r4, r7, pc}

0800089c <writeLine>:

void writeLine(int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 800089c:	b590      	push	{r4, r7, lr}
 800089e:	b089      	sub	sp, #36	@ 0x24
 80008a0:	af00      	add	r7, sp, #0
 80008a2:	4604      	mov	r4, r0
 80008a4:	4608      	mov	r0, r1
 80008a6:	4611      	mov	r1, r2
 80008a8:	461a      	mov	r2, r3
 80008aa:	4623      	mov	r3, r4
 80008ac:	80fb      	strh	r3, [r7, #6]
 80008ae:	4603      	mov	r3, r0
 80008b0:	80bb      	strh	r3, [r7, #4]
 80008b2:	460b      	mov	r3, r1
 80008b4:	807b      	strh	r3, [r7, #2]
 80008b6:	4613      	mov	r3, r2
 80008b8:	803b      	strh	r3, [r7, #0]

  int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 80008ba:	f9b7 2000 	ldrsh.w	r2, [r7]
 80008be:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 80008c2:	1ad3      	subs	r3, r2, r3
 80008c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80008c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80008cc:	f9b7 1002 	ldrsh.w	r1, [r7, #2]
 80008d0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80008d4:	1acb      	subs	r3, r1, r3
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	bfb8      	it	lt
 80008da:	425b      	neglt	r3, r3
 80008dc:	429a      	cmp	r2, r3
 80008de:	bfcc      	ite	gt
 80008e0:	2301      	movgt	r3, #1
 80008e2:	2300      	movle	r3, #0
 80008e4:	b2db      	uxtb	r3, r3
 80008e6:	837b      	strh	r3, [r7, #26]
  if (steep) {
 80008e8:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d00b      	beq.n	8000908 <writeLine+0x6c>
    swap(x0, y0);
 80008f0:	88fb      	ldrh	r3, [r7, #6]
 80008f2:	833b      	strh	r3, [r7, #24]
 80008f4:	88bb      	ldrh	r3, [r7, #4]
 80008f6:	80fb      	strh	r3, [r7, #6]
 80008f8:	8b3b      	ldrh	r3, [r7, #24]
 80008fa:	80bb      	strh	r3, [r7, #4]
    swap(x1, y1);
 80008fc:	887b      	ldrh	r3, [r7, #2]
 80008fe:	82fb      	strh	r3, [r7, #22]
 8000900:	883b      	ldrh	r3, [r7, #0]
 8000902:	807b      	strh	r3, [r7, #2]
 8000904:	8afb      	ldrh	r3, [r7, #22]
 8000906:	803b      	strh	r3, [r7, #0]
  }

  if (x0 > x1) {
 8000908:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800090c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000910:	429a      	cmp	r2, r3
 8000912:	dd0b      	ble.n	800092c <writeLine+0x90>
	  swap(x0, x1);
 8000914:	88fb      	ldrh	r3, [r7, #6]
 8000916:	82bb      	strh	r3, [r7, #20]
 8000918:	887b      	ldrh	r3, [r7, #2]
 800091a:	80fb      	strh	r3, [r7, #6]
 800091c:	8abb      	ldrh	r3, [r7, #20]
 800091e:	807b      	strh	r3, [r7, #2]
	  swap(y0, y1);
 8000920:	88bb      	ldrh	r3, [r7, #4]
 8000922:	827b      	strh	r3, [r7, #18]
 8000924:	883b      	ldrh	r3, [r7, #0]
 8000926:	80bb      	strh	r3, [r7, #4]
 8000928:	8a7b      	ldrh	r3, [r7, #18]
 800092a:	803b      	strh	r3, [r7, #0]
  }

  int16_t dx, dy;
  dx = x1 - x0;
 800092c:	887a      	ldrh	r2, [r7, #2]
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	1ad3      	subs	r3, r2, r3
 8000932:	b29b      	uxth	r3, r3
 8000934:	823b      	strh	r3, [r7, #16]
  dy = abs(y1 - y0);
 8000936:	f9b7 2000 	ldrsh.w	r2, [r7]
 800093a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800093e:	1ad3      	subs	r3, r2, r3
 8000940:	2b00      	cmp	r3, #0
 8000942:	bfb8      	it	lt
 8000944:	425b      	neglt	r3, r3
 8000946:	81fb      	strh	r3, [r7, #14]

  int16_t err = dx / 2;
 8000948:	f9b7 3010 	ldrsh.w	r3, [r7, #16]
 800094c:	0fda      	lsrs	r2, r3, #31
 800094e:	4413      	add	r3, r2
 8000950:	105b      	asrs	r3, r3, #1
 8000952:	83fb      	strh	r3, [r7, #30]
  int16_t ystep;

  if (y0 < y1) {
 8000954:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000958:	f9b7 3000 	ldrsh.w	r3, [r7]
 800095c:	429a      	cmp	r2, r3
 800095e:	da02      	bge.n	8000966 <writeLine+0xca>
    ystep = 1;
 8000960:	2301      	movs	r3, #1
 8000962:	83bb      	strh	r3, [r7, #28]
 8000964:	e031      	b.n	80009ca <writeLine+0x12e>
  } else {
    ystep = -1;
 8000966:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800096a:	83bb      	strh	r3, [r7, #28]
  }

  for (; x0 <= x1; x0++) {
 800096c:	e02d      	b.n	80009ca <writeLine+0x12e>
    if (steep) {
 800096e:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000972:	2b00      	cmp	r3, #0
 8000974:	d008      	beq.n	8000988 <writeLine+0xec>
      drawPixel(y0, x0, color);
 8000976:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 8000978:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 800097c:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000980:	4618      	mov	r0, r3
 8000982:	f7ff fdfd 	bl	8000580 <drawPixel>
 8000986:	e007      	b.n	8000998 <writeLine+0xfc>
    } else {
      drawPixel(x0, y0, color);
 8000988:	8e3a      	ldrh	r2, [r7, #48]	@ 0x30
 800098a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 800098e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000992:	4618      	mov	r0, r3
 8000994:	f7ff fdf4 	bl	8000580 <drawPixel>
    }
    err -= dy;
 8000998:	8bfa      	ldrh	r2, [r7, #30]
 800099a:	89fb      	ldrh	r3, [r7, #14]
 800099c:	1ad3      	subs	r3, r2, r3
 800099e:	b29b      	uxth	r3, r3
 80009a0:	83fb      	strh	r3, [r7, #30]
    if (err < 0) {
 80009a2:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	da09      	bge.n	80009be <writeLine+0x122>
      y0 += ystep;
 80009aa:	88ba      	ldrh	r2, [r7, #4]
 80009ac:	8bbb      	ldrh	r3, [r7, #28]
 80009ae:	4413      	add	r3, r2
 80009b0:	b29b      	uxth	r3, r3
 80009b2:	80bb      	strh	r3, [r7, #4]
      err += dx;
 80009b4:	8bfa      	ldrh	r2, [r7, #30]
 80009b6:	8a3b      	ldrh	r3, [r7, #16]
 80009b8:	4413      	add	r3, r2
 80009ba:	b29b      	uxth	r3, r3
 80009bc:	83fb      	strh	r3, [r7, #30]
  for (; x0 <= x1; x0++) {
 80009be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80009c2:	b29b      	uxth	r3, r3
 80009c4:	3301      	adds	r3, #1
 80009c6:	b29b      	uxth	r3, r3
 80009c8:	80fb      	strh	r3, [r7, #6]
 80009ca:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80009ce:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80009d2:	429a      	cmp	r2, r3
 80009d4:	ddcb      	ble.n	800096e <writeLine+0xd2>
    }
  }
}
 80009d6:	bf00      	nop
 80009d8:	bf00      	nop
 80009da:	3724      	adds	r7, #36	@ 0x24
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd90      	pop	{r4, r7, pc}

080009e0 <fillRect>:
{
	fillRect(0, 0,  width, height, color);
}

void fillRect(int16_t x, int16_t y, int16_t w, int16_t h, uint16_t color)
{
 80009e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80009e4:	b08a      	sub	sp, #40	@ 0x28
 80009e6:	af00      	add	r7, sp, #0
 80009e8:	4606      	mov	r6, r0
 80009ea:	4608      	mov	r0, r1
 80009ec:	4611      	mov	r1, r2
 80009ee:	461a      	mov	r2, r3
 80009f0:	4633      	mov	r3, r6
 80009f2:	80fb      	strh	r3, [r7, #6]
 80009f4:	4603      	mov	r3, r0
 80009f6:	80bb      	strh	r3, [r7, #4]
 80009f8:	460b      	mov	r3, r1
 80009fa:	807b      	strh	r3, [r7, #2]
 80009fc:	4613      	mov	r3, r2
 80009fe:	803b      	strh	r3, [r7, #0]
 8000a00:	466b      	mov	r3, sp
 8000a02:	469a      	mov	sl, r3

	uint32_t i, n, cnt, buf_size;
	if ((x >= width) || (y >= height))
 8000a04:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000a08:	4a91      	ldr	r2, [pc, #580]	@ (8000c50 <fillRect+0x270>)
 8000a0a:	8812      	ldrh	r2, [r2, #0]
 8000a0c:	4293      	cmp	r3, r2
 8000a0e:	da05      	bge.n	8000a1c <fillRect+0x3c>
 8000a10:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000a14:	4a8f      	ldr	r2, [pc, #572]	@ (8000c54 <fillRect+0x274>)
 8000a16:	8812      	ldrh	r2, [r2, #0]
 8000a18:	4293      	cmp	r3, r2
 8000a1a:	db01      	blt.n	8000a20 <fillRect+0x40>
		return;
 8000a1c:	46d5      	mov	sp, sl
 8000a1e:	e112      	b.n	8000c46 <fillRect+0x266>
	if ((x + w - 1) >= width)
 8000a20:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000a24:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000a28:	4413      	add	r3, r2
 8000a2a:	4a89      	ldr	r2, [pc, #548]	@ (8000c50 <fillRect+0x270>)
 8000a2c:	8812      	ldrh	r2, [r2, #0]
 8000a2e:	4293      	cmp	r3, r2
 8000a30:	dd05      	ble.n	8000a3e <fillRect+0x5e>
		w = width - x;
 8000a32:	4b87      	ldr	r3, [pc, #540]	@ (8000c50 <fillRect+0x270>)
 8000a34:	881a      	ldrh	r2, [r3, #0]
 8000a36:	88fb      	ldrh	r3, [r7, #6]
 8000a38:	1ad3      	subs	r3, r2, r3
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	807b      	strh	r3, [r7, #2]
	if ((y + h - 1) >= height)
 8000a3e:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8000a42:	f9b7 3000 	ldrsh.w	r3, [r7]
 8000a46:	4413      	add	r3, r2
 8000a48:	4a82      	ldr	r2, [pc, #520]	@ (8000c54 <fillRect+0x274>)
 8000a4a:	8812      	ldrh	r2, [r2, #0]
 8000a4c:	4293      	cmp	r3, r2
 8000a4e:	dd05      	ble.n	8000a5c <fillRect+0x7c>
		h = height - y;
 8000a50:	4b80      	ldr	r3, [pc, #512]	@ (8000c54 <fillRect+0x274>)
 8000a52:	881a      	ldrh	r2, [r3, #0]
 8000a54:	88bb      	ldrh	r3, [r7, #4]
 8000a56:	1ad3      	subs	r3, r2, r3
 8000a58:	b29b      	uxth	r3, r3
 8000a5a:	803b      	strh	r3, [r7, #0]
	setAddrWindow(x, y, x + w - 1, y + h - 1);
 8000a5c:	88f8      	ldrh	r0, [r7, #6]
 8000a5e:	88b9      	ldrh	r1, [r7, #4]
 8000a60:	88fa      	ldrh	r2, [r7, #6]
 8000a62:	887b      	ldrh	r3, [r7, #2]
 8000a64:	4413      	add	r3, r2
 8000a66:	b29b      	uxth	r3, r3
 8000a68:	3b01      	subs	r3, #1
 8000a6a:	b29e      	uxth	r6, r3
 8000a6c:	88ba      	ldrh	r2, [r7, #4]
 8000a6e:	883b      	ldrh	r3, [r7, #0]
 8000a70:	4413      	add	r3, r2
 8000a72:	b29b      	uxth	r3, r3
 8000a74:	3b01      	subs	r3, #1
 8000a76:	b29b      	uxth	r3, r3
 8000a78:	4632      	mov	r2, r6
 8000a7a:	f7ff fd39 	bl	80004f0 <setAddrWindow>
	uint8_t r = (color & 0xF800) >> 11;
 8000a7e:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000a82:	0adb      	lsrs	r3, r3, #11
 8000a84:	b29b      	uxth	r3, r3
 8000a86:	76fb      	strb	r3, [r7, #27]
	uint8_t g = (color & 0x07E0) >> 5;
 8000a88:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000a8c:	115b      	asrs	r3, r3, #5
 8000a8e:	b2db      	uxtb	r3, r3
 8000a90:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000a94:	76bb      	strb	r3, [r7, #26]
	uint8_t b = color & 0x001F;
 8000a96:	f8b7 3048 	ldrh.w	r3, [r7, #72]	@ 0x48
 8000a9a:	b2db      	uxtb	r3, r3
 8000a9c:	f003 031f 	and.w	r3, r3, #31
 8000aa0:	767b      	strb	r3, [r7, #25]

	r = (r * 255) / 31;
 8000aa2:	7efa      	ldrb	r2, [r7, #27]
 8000aa4:	4613      	mov	r3, r2
 8000aa6:	021b      	lsls	r3, r3, #8
 8000aa8:	1a9b      	subs	r3, r3, r2
 8000aaa:	4a6b      	ldr	r2, [pc, #428]	@ (8000c58 <fillRect+0x278>)
 8000aac:	fb82 1203 	smull	r1, r2, r2, r3
 8000ab0:	441a      	add	r2, r3
 8000ab2:	1112      	asrs	r2, r2, #4
 8000ab4:	17db      	asrs	r3, r3, #31
 8000ab6:	1ad3      	subs	r3, r2, r3
 8000ab8:	76fb      	strb	r3, [r7, #27]
	g = (g * 255) / 63;
 8000aba:	7eba      	ldrb	r2, [r7, #26]
 8000abc:	4613      	mov	r3, r2
 8000abe:	021b      	lsls	r3, r3, #8
 8000ac0:	1a9b      	subs	r3, r3, r2
 8000ac2:	4a66      	ldr	r2, [pc, #408]	@ (8000c5c <fillRect+0x27c>)
 8000ac4:	fb82 1203 	smull	r1, r2, r2, r3
 8000ac8:	441a      	add	r2, r3
 8000aca:	1152      	asrs	r2, r2, #5
 8000acc:	17db      	asrs	r3, r3, #31
 8000ace:	1ad3      	subs	r3, r2, r3
 8000ad0:	76bb      	strb	r3, [r7, #26]
	b = (b * 255) / 31;
 8000ad2:	7e7a      	ldrb	r2, [r7, #25]
 8000ad4:	4613      	mov	r3, r2
 8000ad6:	021b      	lsls	r3, r3, #8
 8000ad8:	1a9b      	subs	r3, r3, r2
 8000ada:	4a5f      	ldr	r2, [pc, #380]	@ (8000c58 <fillRect+0x278>)
 8000adc:	fb82 1203 	smull	r1, r2, r2, r3
 8000ae0:	441a      	add	r2, r3
 8000ae2:	1112      	asrs	r2, r2, #4
 8000ae4:	17db      	asrs	r3, r3, #31
 8000ae6:	1ad3      	subs	r3, r2, r3
 8000ae8:	767b      	strb	r3, [r7, #25]

	n = w*h*3;
 8000aea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8000aee:	f9b7 2000 	ldrsh.w	r2, [r7]
 8000af2:	fb03 f202 	mul.w	r2, r3, r2
 8000af6:	4613      	mov	r3, r2
 8000af8:	005b      	lsls	r3, r3, #1
 8000afa:	4413      	add	r3, r2
 8000afc:	617b      	str	r3, [r7, #20]
	if (n <= 65535){
 8000afe:	697b      	ldr	r3, [r7, #20]
 8000b00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000b04:	d204      	bcs.n	8000b10 <fillRect+0x130>
		cnt = 1;
 8000b06:	2301      	movs	r3, #1
 8000b08:	623b      	str	r3, [r7, #32]
		buf_size = n;
 8000b0a:	697b      	ldr	r3, [r7, #20]
 8000b0c:	61fb      	str	r3, [r7, #28]
 8000b0e:	e02f      	b.n	8000b70 <fillRect+0x190>
	}
	else {
		cnt = n/3;
 8000b10:	697b      	ldr	r3, [r7, #20]
 8000b12:	4a53      	ldr	r2, [pc, #332]	@ (8000c60 <fillRect+0x280>)
 8000b14:	fba2 2303 	umull	r2, r3, r2, r3
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	623b      	str	r3, [r7, #32]
		buf_size = 3;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	61fb      	str	r3, [r7, #28]
		uint8_t min_cnt = n/65535+1;
 8000b20:	697b      	ldr	r3, [r7, #20]
 8000b22:	4a50      	ldr	r2, [pc, #320]	@ (8000c64 <fillRect+0x284>)
 8000b24:	fba2 2303 	umull	r2, r3, r2, r3
 8000b28:	0bdb      	lsrs	r3, r3, #15
 8000b2a:	b2db      	uxtb	r3, r3
 8000b2c:	3301      	adds	r3, #1
 8000b2e:	74fb      	strb	r3, [r7, #19]
		for (i=min_cnt; i < n/3; i++){
 8000b30:	7cfb      	ldrb	r3, [r7, #19]
 8000b32:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b34:	e014      	b.n	8000b60 <fillRect+0x180>
			if(n%i == 0){
 8000b36:	697b      	ldr	r3, [r7, #20]
 8000b38:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b3a:	fbb3 f2f2 	udiv	r2, r3, r2
 8000b3e:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8000b40:	fb01 f202 	mul.w	r2, r1, r2
 8000b44:	1a9b      	subs	r3, r3, r2
 8000b46:	2b00      	cmp	r3, #0
 8000b48:	d107      	bne.n	8000b5a <fillRect+0x17a>
				cnt = i;
 8000b4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b4c:	623b      	str	r3, [r7, #32]
				buf_size = n/i;
 8000b4e:	697a      	ldr	r2, [r7, #20]
 8000b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b52:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b56:	61fb      	str	r3, [r7, #28]
				break;
 8000b58:	e00a      	b.n	8000b70 <fillRect+0x190>
		for (i=min_cnt; i < n/3; i++){
 8000b5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000b5c:	3301      	adds	r3, #1
 8000b5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000b60:	697b      	ldr	r3, [r7, #20]
 8000b62:	4a3f      	ldr	r2, [pc, #252]	@ (8000c60 <fillRect+0x280>)
 8000b64:	fba2 2303 	umull	r2, r3, r2, r3
 8000b68:	085b      	lsrs	r3, r3, #1
 8000b6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000b6c:	429a      	cmp	r2, r3
 8000b6e:	d3e2      	bcc.n	8000b36 <fillRect+0x156>
			}
		}
	}
	uint8_t frm_buf[buf_size];
 8000b70:	69f9      	ldr	r1, [r7, #28]
 8000b72:	460b      	mov	r3, r1
 8000b74:	3b01      	subs	r3, #1
 8000b76:	60fb      	str	r3, [r7, #12]
 8000b78:	2300      	movs	r3, #0
 8000b7a:	4688      	mov	r8, r1
 8000b7c:	4699      	mov	r9, r3
 8000b7e:	f04f 0200 	mov.w	r2, #0
 8000b82:	f04f 0300 	mov.w	r3, #0
 8000b86:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8000b8a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8000b8e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8000b92:	2300      	movs	r3, #0
 8000b94:	460c      	mov	r4, r1
 8000b96:	461d      	mov	r5, r3
 8000b98:	f04f 0200 	mov.w	r2, #0
 8000b9c:	f04f 0300 	mov.w	r3, #0
 8000ba0:	00eb      	lsls	r3, r5, #3
 8000ba2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8000ba6:	00e2      	lsls	r2, r4, #3
 8000ba8:	1dcb      	adds	r3, r1, #7
 8000baa:	08db      	lsrs	r3, r3, #3
 8000bac:	00db      	lsls	r3, r3, #3
 8000bae:	ebad 0d03 	sub.w	sp, sp, r3
 8000bb2:	466b      	mov	r3, sp
 8000bb4:	3300      	adds	r3, #0
 8000bb6:	60bb      	str	r3, [r7, #8]
	for (i=0; i < buf_size/3; i++)
 8000bb8:	2300      	movs	r3, #0
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bbc:	e019      	b.n	8000bf2 <fillRect+0x212>
	{
		frm_buf[i*3] = r;
 8000bbe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bc0:	4613      	mov	r3, r2
 8000bc2:	005b      	lsls	r3, r3, #1
 8000bc4:	4413      	add	r3, r2
 8000bc6:	68ba      	ldr	r2, [r7, #8]
 8000bc8:	7ef9      	ldrb	r1, [r7, #27]
 8000bca:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+1] = g;
 8000bcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bce:	4613      	mov	r3, r2
 8000bd0:	005b      	lsls	r3, r3, #1
 8000bd2:	4413      	add	r3, r2
 8000bd4:	3301      	adds	r3, #1
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	7eb9      	ldrb	r1, [r7, #26]
 8000bda:	54d1      	strb	r1, [r2, r3]
		frm_buf[i*3+2] = b;
 8000bdc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bde:	4613      	mov	r3, r2
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	4413      	add	r3, r2
 8000be4:	3302      	adds	r3, #2
 8000be6:	68ba      	ldr	r2, [r7, #8]
 8000be8:	7e79      	ldrb	r1, [r7, #25]
 8000bea:	54d1      	strb	r1, [r2, r3]
	for (i=0; i < buf_size/3; i++)
 8000bec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000bee:	3301      	adds	r3, #1
 8000bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bf2:	69fb      	ldr	r3, [r7, #28]
 8000bf4:	4a1a      	ldr	r2, [pc, #104]	@ (8000c60 <fillRect+0x280>)
 8000bf6:	fba2 2303 	umull	r2, r3, r2, r3
 8000bfa:	085b      	lsrs	r3, r3, #1
 8000bfc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000bfe:	429a      	cmp	r2, r3
 8000c00:	d3dd      	bcc.n	8000bbe <fillRect+0x1de>
	}
	DC_DATA();
 8000c02:	2201      	movs	r2, #1
 8000c04:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000c08:	4817      	ldr	r0, [pc, #92]	@ (8000c68 <fillRect+0x288>)
 8000c0a:	f001 f875 	bl	8001cf8 <HAL_GPIO_WritePin>
	CS_A();
 8000c0e:	2200      	movs	r2, #0
 8000c10:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c14:	4815      	ldr	r0, [pc, #84]	@ (8000c6c <fillRect+0x28c>)
 8000c16:	f001 f86f 	bl	8001cf8 <HAL_GPIO_WritePin>
		while(cnt>0)
 8000c1a:	e00a      	b.n	8000c32 <fillRect+0x252>
		{
			HAL_SPI_Transmit(&hspi1, frm_buf, buf_size, HAL_MAX_DELAY);
 8000c1c:	69fb      	ldr	r3, [r7, #28]
 8000c1e:	b29a      	uxth	r2, r3
 8000c20:	f04f 33ff 	mov.w	r3, #4294967295
 8000c24:	68b9      	ldr	r1, [r7, #8]
 8000c26:	4812      	ldr	r0, [pc, #72]	@ (8000c70 <fillRect+0x290>)
 8000c28:	f002 f895 	bl	8002d56 <HAL_SPI_Transmit>

			cnt -= 1;
 8000c2c:	6a3b      	ldr	r3, [r7, #32]
 8000c2e:	3b01      	subs	r3, #1
 8000c30:	623b      	str	r3, [r7, #32]
		while(cnt>0)
 8000c32:	6a3b      	ldr	r3, [r7, #32]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d1f1      	bne.n	8000c1c <fillRect+0x23c>
		}
		CS_D();
 8000c38:	2201      	movs	r2, #1
 8000c3a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c3e:	480b      	ldr	r0, [pc, #44]	@ (8000c6c <fillRect+0x28c>)
 8000c40:	f001 f85a 	bl	8001cf8 <HAL_GPIO_WritePin>
 8000c44:	46d5      	mov	sp, sl

}
 8000c46:	3728      	adds	r7, #40	@ 0x28
 8000c48:	46bd      	mov	sp, r7
 8000c4a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c4e:	bf00      	nop
 8000c50:	20040038 	.word	0x20040038
 8000c54:	2004003a 	.word	0x2004003a
 8000c58:	84210843 	.word	0x84210843
 8000c5c:	82082083 	.word	0x82082083
 8000c60:	aaaaaaab 	.word	0xaaaaaaab
 8000c64:	80008001 	.word	0x80008001
 8000c68:	48000c00 	.word	0x48000c00
 8000c6c:	48001400 	.word	0x48001400
 8000c70:	2004003c 	.word	0x2004003c

08000c74 <write16BitColor>:
	for (y2 = 0; y2 < h; y2 += 6)
		drawLine(x1, y1, x2, y2, color);
}

void write16BitColor(uint16_t color)
{
 8000c74:	b580      	push	{r7, lr}
 8000c76:	b084      	sub	sp, #16
 8000c78:	af00      	add	r7, sp, #0
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	80fb      	strh	r3, [r7, #6]

	  uint8_t r = (color & 0xF800) >> 11;
 8000c7e:	88fb      	ldrh	r3, [r7, #6]
 8000c80:	0adb      	lsrs	r3, r3, #11
 8000c82:	b29b      	uxth	r3, r3
 8000c84:	73fb      	strb	r3, [r7, #15]
	  uint8_t g = (color & 0x07E0) >> 5;
 8000c86:	88fb      	ldrh	r3, [r7, #6]
 8000c88:	115b      	asrs	r3, r3, #5
 8000c8a:	b2db      	uxtb	r3, r3
 8000c8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000c90:	73bb      	strb	r3, [r7, #14]
	  uint8_t b = color & 0x001F;
 8000c92:	88fb      	ldrh	r3, [r7, #6]
 8000c94:	b2db      	uxtb	r3, r3
 8000c96:	f003 031f 	and.w	r3, r3, #31
 8000c9a:	737b      	strb	r3, [r7, #13]

	  r = (r * 255) / 31;
 8000c9c:	7bfa      	ldrb	r2, [r7, #15]
 8000c9e:	4613      	mov	r3, r2
 8000ca0:	021b      	lsls	r3, r3, #8
 8000ca2:	1a9b      	subs	r3, r3, r2
 8000ca4:	4a17      	ldr	r2, [pc, #92]	@ (8000d04 <write16BitColor+0x90>)
 8000ca6:	fb82 1203 	smull	r1, r2, r2, r3
 8000caa:	441a      	add	r2, r3
 8000cac:	1112      	asrs	r2, r2, #4
 8000cae:	17db      	asrs	r3, r3, #31
 8000cb0:	1ad3      	subs	r3, r2, r3
 8000cb2:	73fb      	strb	r3, [r7, #15]
	  g = (g * 255) / 63;
 8000cb4:	7bba      	ldrb	r2, [r7, #14]
 8000cb6:	4613      	mov	r3, r2
 8000cb8:	021b      	lsls	r3, r3, #8
 8000cba:	1a9b      	subs	r3, r3, r2
 8000cbc:	4a12      	ldr	r2, [pc, #72]	@ (8000d08 <write16BitColor+0x94>)
 8000cbe:	fb82 1203 	smull	r1, r2, r2, r3
 8000cc2:	441a      	add	r2, r3
 8000cc4:	1152      	asrs	r2, r2, #5
 8000cc6:	17db      	asrs	r3, r3, #31
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	73bb      	strb	r3, [r7, #14]
	  b = (b * 255) / 31;
 8000ccc:	7b7a      	ldrb	r2, [r7, #13]
 8000cce:	4613      	mov	r3, r2
 8000cd0:	021b      	lsls	r3, r3, #8
 8000cd2:	1a9b      	subs	r3, r3, r2
 8000cd4:	4a0b      	ldr	r2, [pc, #44]	@ (8000d04 <write16BitColor+0x90>)
 8000cd6:	fb82 1203 	smull	r1, r2, r2, r3
 8000cda:	441a      	add	r2, r3
 8000cdc:	1112      	asrs	r2, r2, #4
 8000cde:	17db      	asrs	r3, r3, #31
 8000ce0:	1ad3      	subs	r3, r2, r3
 8000ce2:	737b      	strb	r3, [r7, #13]
	  uint8_t data[3] = {r, g, b};
 8000ce4:	7bfb      	ldrb	r3, [r7, #15]
 8000ce6:	723b      	strb	r3, [r7, #8]
 8000ce8:	7bbb      	ldrb	r3, [r7, #14]
 8000cea:	727b      	strb	r3, [r7, #9]
 8000cec:	7b7b      	ldrb	r3, [r7, #13]
 8000cee:	72bb      	strb	r3, [r7, #10]
	  ILI9488_SendData_Multi(data, 3);
 8000cf0:	f107 0308 	add.w	r3, r7, #8
 8000cf4:	2103      	movs	r1, #3
 8000cf6:	4618      	mov	r0, r3
 8000cf8:	f7ff fad4 	bl	80002a4 <ILI9488_SendData_Multi>
	  //HAL_SPI_Transmit(&hspi1, (uint8_t *)&r, 1, 10);
	  //HAL_SPI_Transmit(&hspi1, (uint8_t *)&g, 1, 10);
	  //HAL_SPI_Transmit(&hspi1, (uint8_t *)&b, 1, 10);

}
 8000cfc:	bf00      	nop
 8000cfe:	3710      	adds	r7, #16
 8000d00:	46bd      	mov	sp, r7
 8000d02:	bd80      	pop	{r7, pc}
 8000d04:	84210843 	.word	0x84210843
 8000d08:	82082083 	.word	0x82082083

08000d0c <drawCubeSquare>:
// Screen positioning
#define START_X         20          // X position to start drawing
#define START_Y         40          // Y position to start drawing

// Draw a single square with specified color and optional label
void drawCubeSquare(int16_t x, int16_t y, uint16_t color) {
 8000d0c:	b590      	push	{r4, r7, lr}
 8000d0e:	b085      	sub	sp, #20
 8000d10:	af02      	add	r7, sp, #8
 8000d12:	4603      	mov	r3, r0
 8000d14:	80fb      	strh	r3, [r7, #6]
 8000d16:	460b      	mov	r3, r1
 8000d18:	80bb      	strh	r3, [r7, #4]
 8000d1a:	4613      	mov	r3, r2
 8000d1c:	807b      	strh	r3, [r7, #2]
    // Draw the colored square
    fillRect(x, y, CUBE_FACE_SIZE, CUBE_FACE_SIZE, color);
 8000d1e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d22:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d26:	887b      	ldrh	r3, [r7, #2]
 8000d28:	9300      	str	r3, [sp, #0]
 8000d2a:	231e      	movs	r3, #30
 8000d2c:	221e      	movs	r2, #30
 8000d2e:	f7ff fe57 	bl	80009e0 <fillRect>

    // Draw black outline
    drawLine(x, y, x + CUBE_FACE_SIZE, y, ILI9488_BLACK);
 8000d32:	88fb      	ldrh	r3, [r7, #6]
 8000d34:	331e      	adds	r3, #30
 8000d36:	b29b      	uxth	r3, r3
 8000d38:	b21a      	sxth	r2, r3
 8000d3a:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8000d3e:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d42:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d46:	2400      	movs	r4, #0
 8000d48:	9400      	str	r4, [sp, #0]
 8000d4a:	f7ff fd45 	bl	80007d8 <drawLine>
    drawLine(x, y, x, y + CUBE_FACE_SIZE, ILI9488_BLACK);
 8000d4e:	88bb      	ldrh	r3, [r7, #4]
 8000d50:	331e      	adds	r3, #30
 8000d52:	b29b      	uxth	r3, r3
 8000d54:	b21b      	sxth	r3, r3
 8000d56:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8000d5a:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d5e:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000d62:	2400      	movs	r4, #0
 8000d64:	9400      	str	r4, [sp, #0]
 8000d66:	f7ff fd37 	bl	80007d8 <drawLine>
    drawLine(x + CUBE_FACE_SIZE, y, x + CUBE_FACE_SIZE, y + CUBE_FACE_SIZE, ILI9488_BLACK);
 8000d6a:	88fb      	ldrh	r3, [r7, #6]
 8000d6c:	331e      	adds	r3, #30
 8000d6e:	b29b      	uxth	r3, r3
 8000d70:	b218      	sxth	r0, r3
 8000d72:	88fb      	ldrh	r3, [r7, #6]
 8000d74:	331e      	adds	r3, #30
 8000d76:	b29b      	uxth	r3, r3
 8000d78:	b21a      	sxth	r2, r3
 8000d7a:	88bb      	ldrh	r3, [r7, #4]
 8000d7c:	331e      	adds	r3, #30
 8000d7e:	b29b      	uxth	r3, r3
 8000d80:	b21b      	sxth	r3, r3
 8000d82:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000d86:	2400      	movs	r4, #0
 8000d88:	9400      	str	r4, [sp, #0]
 8000d8a:	f7ff fd25 	bl	80007d8 <drawLine>
    drawLine(x, y + CUBE_FACE_SIZE, x + CUBE_FACE_SIZE, y + CUBE_FACE_SIZE, ILI9488_BLACK);
 8000d8e:	88bb      	ldrh	r3, [r7, #4]
 8000d90:	331e      	adds	r3, #30
 8000d92:	b29b      	uxth	r3, r3
 8000d94:	b219      	sxth	r1, r3
 8000d96:	88fb      	ldrh	r3, [r7, #6]
 8000d98:	331e      	adds	r3, #30
 8000d9a:	b29b      	uxth	r3, r3
 8000d9c:	b21a      	sxth	r2, r3
 8000d9e:	88bb      	ldrh	r3, [r7, #4]
 8000da0:	331e      	adds	r3, #30
 8000da2:	b29b      	uxth	r3, r3
 8000da4:	b21b      	sxth	r3, r3
 8000da6:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8000daa:	2400      	movs	r4, #0
 8000dac:	9400      	str	r4, [sp, #0]
 8000dae:	f7ff fd13 	bl	80007d8 <drawLine>
}
 8000db2:	bf00      	nop
 8000db4:	370c      	adds	r7, #12
 8000db6:	46bd      	mov	sp, r7
 8000db8:	bd90      	pop	{r4, r7, pc}

08000dba <drawCubeFace>:

// Draw a complete 3x3 face with the specified color and label
void drawCubeFace(int16_t startX, int16_t startY, uint16_t color) {
 8000dba:	b580      	push	{r7, lr}
 8000dbc:	b086      	sub	sp, #24
 8000dbe:	af00      	add	r7, sp, #0
 8000dc0:	4603      	mov	r3, r0
 8000dc2:	80fb      	strh	r3, [r7, #6]
 8000dc4:	460b      	mov	r3, r1
 8000dc6:	80bb      	strh	r3, [r7, #4]
 8000dc8:	4613      	mov	r3, r2
 8000dca:	807b      	strh	r3, [r7, #2]
    for (int row = 0; row < FACE_DIM; row++) {
 8000dcc:	2300      	movs	r3, #0
 8000dce:	617b      	str	r3, [r7, #20]
 8000dd0:	e023      	b.n	8000e1a <drawCubeFace+0x60>
        for (int col = 0; col < FACE_DIM; col++) {
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	613b      	str	r3, [r7, #16]
 8000dd6:	e01a      	b.n	8000e0e <drawCubeFace+0x54>
            int16_t x = startX + col * (CUBE_FACE_SIZE + FACE_GAP);
 8000dd8:	693b      	ldr	r3, [r7, #16]
 8000dda:	b29b      	uxth	r3, r3
 8000ddc:	015b      	lsls	r3, r3, #5
 8000dde:	b29a      	uxth	r2, r3
 8000de0:	88fb      	ldrh	r3, [r7, #6]
 8000de2:	4413      	add	r3, r2
 8000de4:	b29b      	uxth	r3, r3
 8000de6:	81fb      	strh	r3, [r7, #14]
            int16_t y = startY + row * (CUBE_FACE_SIZE + FACE_GAP);
 8000de8:	697b      	ldr	r3, [r7, #20]
 8000dea:	b29b      	uxth	r3, r3
 8000dec:	015b      	lsls	r3, r3, #5
 8000dee:	b29a      	uxth	r2, r3
 8000df0:	88bb      	ldrh	r3, [r7, #4]
 8000df2:	4413      	add	r3, r2
 8000df4:	b29b      	uxth	r3, r3
 8000df6:	81bb      	strh	r3, [r7, #12]

            drawCubeSquare(x, y, color);
 8000df8:	887a      	ldrh	r2, [r7, #2]
 8000dfa:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000dfe:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000e02:	4618      	mov	r0, r3
 8000e04:	f7ff ff82 	bl	8000d0c <drawCubeSquare>
        for (int col = 0; col < FACE_DIM; col++) {
 8000e08:	693b      	ldr	r3, [r7, #16]
 8000e0a:	3301      	adds	r3, #1
 8000e0c:	613b      	str	r3, [r7, #16]
 8000e0e:	693b      	ldr	r3, [r7, #16]
 8000e10:	2b02      	cmp	r3, #2
 8000e12:	dde1      	ble.n	8000dd8 <drawCubeFace+0x1e>
    for (int row = 0; row < FACE_DIM; row++) {
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	3301      	adds	r3, #1
 8000e18:	617b      	str	r3, [r7, #20]
 8000e1a:	697b      	ldr	r3, [r7, #20]
 8000e1c:	2b02      	cmp	r3, #2
 8000e1e:	ddd8      	ble.n	8000dd2 <drawCubeFace+0x18>
        }
    }
}
 8000e20:	bf00      	nop
 8000e22:	bf00      	nop
 8000e24:	3718      	adds	r7, #24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	bd80      	pop	{r7, pc}

08000e2a <drawRubiksCube>:

// Draw the entire unfolded cube (6 faces in a cross pattern)
void drawRubiksCube() {
 8000e2a:	b580      	push	{r7, lr}
 8000e2c:	b088      	sub	sp, #32
 8000e2e:	af00      	add	r7, sp, #0
	int faceWidth = FACE_DIM * CUBE_FACE_SIZE + (FACE_DIM - 1) * FACE_GAP;
 8000e30:	235e      	movs	r3, #94	@ 0x5e
 8000e32:	61fb      	str	r3, [r7, #28]

	// orange
	int16_t leftX = START_X;
 8000e34:	2314      	movs	r3, #20
 8000e36:	837b      	strh	r3, [r7, #26]
	int16_t leftY = START_Y + faceWidth;
 8000e38:	69fb      	ldr	r3, [r7, #28]
 8000e3a:	b29b      	uxth	r3, r3
 8000e3c:	3328      	adds	r3, #40	@ 0x28
 8000e3e:	b29b      	uxth	r3, r3
 8000e40:	833b      	strh	r3, [r7, #24]

	// green
	int16_t frontX = leftX + faceWidth + FACE_GAP;
 8000e42:	69fb      	ldr	r3, [r7, #28]
 8000e44:	b29a      	uxth	r2, r3
 8000e46:	8b7b      	ldrh	r3, [r7, #26]
 8000e48:	4413      	add	r3, r2
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	3302      	adds	r3, #2
 8000e4e:	b29b      	uxth	r3, r3
 8000e50:	82fb      	strh	r3, [r7, #22]
    int16_t frontY = START_Y + faceWidth;
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	3328      	adds	r3, #40	@ 0x28
 8000e58:	b29b      	uxth	r3, r3
 8000e5a:	82bb      	strh	r3, [r7, #20]

    // red
    int16_t rightX = frontX + faceWidth + FACE_GAP;
 8000e5c:	69fb      	ldr	r3, [r7, #28]
 8000e5e:	b29a      	uxth	r2, r3
 8000e60:	8afb      	ldrh	r3, [r7, #22]
 8000e62:	4413      	add	r3, r2
 8000e64:	b29b      	uxth	r3, r3
 8000e66:	3302      	adds	r3, #2
 8000e68:	b29b      	uxth	r3, r3
 8000e6a:	827b      	strh	r3, [r7, #18]
    int16_t rightY = START_Y + faceWidth;
 8000e6c:	69fb      	ldr	r3, [r7, #28]
 8000e6e:	b29b      	uxth	r3, r3
 8000e70:	3328      	adds	r3, #40	@ 0x28
 8000e72:	b29b      	uxth	r3, r3
 8000e74:	823b      	strh	r3, [r7, #16]

    // blue
//    int16_t backX = rightX + faceWidth + FACE_GAP;
//    int16_t backY = START_Y + faceWidth;
    int16_t backX = leftX + faceWidth + FACE_GAP;
 8000e76:	69fb      	ldr	r3, [r7, #28]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	8b7b      	ldrh	r3, [r7, #26]
 8000e7c:	4413      	add	r3, r2
 8000e7e:	b29b      	uxth	r3, r3
 8000e80:	3302      	adds	r3, #2
 8000e82:	b29b      	uxth	r3, r3
 8000e84:	81fb      	strh	r3, [r7, #14]
       int16_t backY = frontY + faceWidth + faceWidth + FACE_GAP;
 8000e86:	69fb      	ldr	r3, [r7, #28]
 8000e88:	b29a      	uxth	r2, r3
 8000e8a:	8abb      	ldrh	r3, [r7, #20]
 8000e8c:	4413      	add	r3, r2
 8000e8e:	b29a      	uxth	r2, r3
 8000e90:	69fb      	ldr	r3, [r7, #28]
 8000e92:	b29b      	uxth	r3, r3
 8000e94:	4413      	add	r3, r2
 8000e96:	b29b      	uxth	r3, r3
 8000e98:	3302      	adds	r3, #2
 8000e9a:	b29b      	uxth	r3, r3
 8000e9c:	81bb      	strh	r3, [r7, #12]

    // white
    int16_t upX = frontX;
 8000e9e:	8afb      	ldrh	r3, [r7, #22]
 8000ea0:	817b      	strh	r3, [r7, #10]
    int16_t upY = START_Y;
 8000ea2:	2328      	movs	r3, #40	@ 0x28
 8000ea4:	813b      	strh	r3, [r7, #8]

    // yellow
    int16_t downX = frontX;
 8000ea6:	8afb      	ldrh	r3, [r7, #22]
 8000ea8:	80fb      	strh	r3, [r7, #6]
    int16_t downY = frontY + faceWidth + FACE_GAP;
 8000eaa:	69fb      	ldr	r3, [r7, #28]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	8abb      	ldrh	r3, [r7, #20]
 8000eb0:	4413      	add	r3, r2
 8000eb2:	b29b      	uxth	r3, r3
 8000eb4:	3302      	adds	r3, #2
 8000eb6:	b29b      	uxth	r3, r3
 8000eb8:	80bb      	strh	r3, [r7, #4]

    // Draw each face with its color and label in new positions
    drawCubeFace(upX, upY, CUBE_WHITE);
 8000eba:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8000ebe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ec2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	f7ff ff77 	bl	8000dba <drawCubeFace>
    drawCubeFace(leftX, leftY, CUBE_ORANGE);
 8000ecc:	f9b7 1018 	ldrsh.w	r1, [r7, #24]
 8000ed0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8000ed4:	f44f 427d 	mov.w	r2, #64768	@ 0xfd00
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f7ff ff6e 	bl	8000dba <drawCubeFace>
    drawCubeFace(frontX, frontY, CUBE_GREEN);
 8000ede:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8000ee2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000ee6:	f44f 62fc 	mov.w	r2, #2016	@ 0x7e0
 8000eea:	4618      	mov	r0, r3
 8000eec:	f7ff ff65 	bl	8000dba <drawCubeFace>
    drawCubeFace(rightX, rightY, CUBE_RED);
 8000ef0:	f9b7 1010 	ldrsh.w	r1, [r7, #16]
 8000ef4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8000ef8:	f44f 4278 	mov.w	r2, #63488	@ 0xf800
 8000efc:	4618      	mov	r0, r3
 8000efe:	f7ff ff5c 	bl	8000dba <drawCubeFace>
    drawCubeFace(backX, backY, CUBE_BLUE);
 8000f02:	f9b7 100c 	ldrsh.w	r1, [r7, #12]
 8000f06:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8000f0a:	221f      	movs	r2, #31
 8000f0c:	4618      	mov	r0, r3
 8000f0e:	f7ff ff54 	bl	8000dba <drawCubeFace>
    drawCubeFace(downX, downY, CUBE_YELLOW);
 8000f12:	f9b7 1004 	ldrsh.w	r1, [r7, #4]
 8000f16:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8000f1a:	f64f 72e0 	movw	r2, #65504	@ 0xffe0
 8000f1e:	4618      	mov	r0, r3
 8000f20:	f7ff ff4b 	bl	8000dba <drawCubeFace>
}
 8000f24:	bf00      	nop
 8000f26:	3720      	adds	r7, #32
 8000f28:	46bd      	mov	sp, r7
 8000f2a:	bd80      	pop	{r7, pc}

08000f2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f30:	f000 fbd1 	bl	80016d6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f34:	f000 f80a 	bl	8000f4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f38:	f000 f898 	bl	800106c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000f3c:	f000 f858 	bl	8000ff0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */
  ILI9488_Init();
 8000f40:	f7ff f9ec 	bl	800031c <ILI9488_Init>

  //  ILI9488_printText("Cheese", 50, 100, ILI9488_WHITE, ILI9488_RED, 2);
//  ILI9488_printText("Encoder Number: ", 0, 10, ILI9488_WHITE, ILI9488_RED, 2);
  // ILI9488_printText("Direction: ", 0, 48, ILI9488_WHITE, ILI9488_RED, 2);

  drawRubiksCube();
 8000f44:	f7ff ff71 	bl	8000e2a <drawRubiksCube>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f48:	bf00      	nop
 8000f4a:	e7fd      	b.n	8000f48 <main+0x1c>

08000f4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b096      	sub	sp, #88	@ 0x58
 8000f50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f52:	f107 0314 	add.w	r3, r7, #20
 8000f56:	2244      	movs	r2, #68	@ 0x44
 8000f58:	2100      	movs	r1, #0
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f002 f9d6 	bl	800330c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f60:	463b      	mov	r3, r7
 8000f62:	2200      	movs	r2, #0
 8000f64:	601a      	str	r2, [r3, #0]
 8000f66:	605a      	str	r2, [r3, #4]
 8000f68:	609a      	str	r2, [r3, #8]
 8000f6a:	60da      	str	r2, [r3, #12]
 8000f6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 8000f6e:	2000      	movs	r0, #0
 8000f70:	f000 fefa 	bl	8001d68 <HAL_PWREx_ControlVoltageScaling>
 8000f74:	4603      	mov	r3, r0
 8000f76:	2b00      	cmp	r3, #0
 8000f78:	d001      	beq.n	8000f7e <SystemClock_Config+0x32>
  {
    Error_Handler();
 8000f7a:	f000 fad5 	bl	8001528 <Error_Handler>
  }

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 8000f7e:	2310      	movs	r3, #16
 8000f80:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 8000f82:	2301      	movs	r3, #1
 8000f84:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000f8a:	2360      	movs	r3, #96	@ 0x60
 8000f8c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f8e:	2302      	movs	r3, #2
 8000f90:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000f92:	2301      	movs	r3, #1
 8000f94:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 8000f96:	2301      	movs	r3, #1
 8000f98:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000f9a:	233c      	movs	r3, #60	@ 0x3c
 8000f9c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f9e:	2302      	movs	r3, #2
 8000fa0:	64fb      	str	r3, [r7, #76]	@ 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000fa2:	2302      	movs	r3, #2
 8000fa4:	653b      	str	r3, [r7, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000fa6:	2302      	movs	r3, #2
 8000fa8:	657b      	str	r3, [r7, #84]	@ 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000faa:	f107 0314 	add.w	r3, r7, #20
 8000fae:	4618      	mov	r0, r3
 8000fb0:	f000 ff8e 	bl	8001ed0 <HAL_RCC_OscConfig>
 8000fb4:	4603      	mov	r3, r0
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d001      	beq.n	8000fbe <SystemClock_Config+0x72>
  {
    Error_Handler();
 8000fba:	f000 fab5 	bl	8001528 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fbe:	230f      	movs	r3, #15
 8000fc0:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fc2:	2303      	movs	r3, #3
 8000fc4:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fc6:	2300      	movs	r3, #0
 8000fc8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000fce:	2300      	movs	r3, #0
 8000fd0:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fd2:	463b      	mov	r3, r7
 8000fd4:	2105      	movs	r1, #5
 8000fd6:	4618      	mov	r0, r3
 8000fd8:	f001 fb94 	bl	8002704 <HAL_RCC_ClockConfig>
 8000fdc:	4603      	mov	r3, r0
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d001      	beq.n	8000fe6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000fe2:	f000 faa1 	bl	8001528 <Error_Handler>
  }
}
 8000fe6:	bf00      	nop
 8000fe8:	3758      	adds	r7, #88	@ 0x58
 8000fea:	46bd      	mov	sp, r7
 8000fec:	bd80      	pop	{r7, pc}
	...

08000ff0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000ff4:	4b1b      	ldr	r3, [pc, #108]	@ (8001064 <MX_SPI1_Init+0x74>)
 8000ff6:	4a1c      	ldr	r2, [pc, #112]	@ (8001068 <MX_SPI1_Init+0x78>)
 8000ff8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000ffa:	4b1a      	ldr	r3, [pc, #104]	@ (8001064 <MX_SPI1_Init+0x74>)
 8000ffc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001000:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001002:	4b18      	ldr	r3, [pc, #96]	@ (8001064 <MX_SPI1_Init+0x74>)
 8001004:	2200      	movs	r2, #0
 8001006:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001008:	4b16      	ldr	r3, [pc, #88]	@ (8001064 <MX_SPI1_Init+0x74>)
 800100a:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 800100e:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001010:	4b14      	ldr	r3, [pc, #80]	@ (8001064 <MX_SPI1_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001016:	4b13      	ldr	r3, [pc, #76]	@ (8001064 <MX_SPI1_Init+0x74>)
 8001018:	2200      	movs	r2, #0
 800101a:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800101c:	4b11      	ldr	r3, [pc, #68]	@ (8001064 <MX_SPI1_Init+0x74>)
 800101e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001022:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001024:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_SPI1_Init+0x74>)
 8001026:	2200      	movs	r2, #0
 8001028:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800102a:	4b0e      	ldr	r3, [pc, #56]	@ (8001064 <MX_SPI1_Init+0x74>)
 800102c:	2200      	movs	r2, #0
 800102e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001030:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_SPI1_Init+0x74>)
 8001032:	2200      	movs	r2, #0
 8001034:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001036:	4b0b      	ldr	r3, [pc, #44]	@ (8001064 <MX_SPI1_Init+0x74>)
 8001038:	2200      	movs	r2, #0
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800103c:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_SPI1_Init+0x74>)
 800103e:	2207      	movs	r2, #7
 8001040:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001042:	4b08      	ldr	r3, [pc, #32]	@ (8001064 <MX_SPI1_Init+0x74>)
 8001044:	2200      	movs	r2, #0
 8001046:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001048:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_SPI1_Init+0x74>)
 800104a:	2208      	movs	r2, #8
 800104c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800104e:	4805      	ldr	r0, [pc, #20]	@ (8001064 <MX_SPI1_Init+0x74>)
 8001050:	f001 fdde 	bl	8002c10 <HAL_SPI_Init>
 8001054:	4603      	mov	r3, r0
 8001056:	2b00      	cmp	r3, #0
 8001058:	d001      	beq.n	800105e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800105a:	f000 fa65 	bl	8001528 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800105e:	bf00      	nop
 8001060:	bd80      	pop	{r7, pc}
 8001062:	bf00      	nop
 8001064:	2004003c 	.word	0x2004003c
 8001068:	40013000 	.word	0x40013000

0800106c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	b08e      	sub	sp, #56	@ 0x38
 8001070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001072:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001076:	2200      	movs	r2, #0
 8001078:	601a      	str	r2, [r3, #0]
 800107a:	605a      	str	r2, [r3, #4]
 800107c:	609a      	str	r2, [r3, #8]
 800107e:	60da      	str	r2, [r3, #12]
 8001080:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001082:	4bb3      	ldr	r3, [pc, #716]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001084:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001086:	4ab2      	ldr	r2, [pc, #712]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001088:	f043 0310 	orr.w	r3, r3, #16
 800108c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800108e:	4bb0      	ldr	r3, [pc, #704]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001090:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001092:	f003 0310 	and.w	r3, r3, #16
 8001096:	623b      	str	r3, [r7, #32]
 8001098:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800109a:	4bad      	ldr	r3, [pc, #692]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 800109c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800109e:	4aac      	ldr	r2, [pc, #688]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010a0:	f043 0304 	orr.w	r3, r3, #4
 80010a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010a6:	4baa      	ldr	r3, [pc, #680]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010aa:	f003 0304 	and.w	r3, r3, #4
 80010ae:	61fb      	str	r3, [r7, #28]
 80010b0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80010b2:	4ba7      	ldr	r3, [pc, #668]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010b6:	4aa6      	ldr	r2, [pc, #664]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010b8:	f043 0320 	orr.w	r3, r3, #32
 80010bc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010be:	4ba4      	ldr	r3, [pc, #656]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010c2:	f003 0320 	and.w	r3, r3, #32
 80010c6:	61bb      	str	r3, [r7, #24]
 80010c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010ca:	4ba1      	ldr	r3, [pc, #644]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010cc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010ce:	4aa0      	ldr	r2, [pc, #640]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010d0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010d4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010d6:	4b9e      	ldr	r3, [pc, #632]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010de:	617b      	str	r3, [r7, #20]
 80010e0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e2:	4b9b      	ldr	r3, [pc, #620]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010e6:	4a9a      	ldr	r2, [pc, #616]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010e8:	f043 0301 	orr.w	r3, r3, #1
 80010ec:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80010ee:	4b98      	ldr	r3, [pc, #608]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010f2:	f003 0301 	and.w	r3, r3, #1
 80010f6:	613b      	str	r3, [r7, #16]
 80010f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010fa:	4b95      	ldr	r3, [pc, #596]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 80010fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80010fe:	4a94      	ldr	r2, [pc, #592]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001100:	f043 0302 	orr.w	r3, r3, #2
 8001104:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001106:	4b92      	ldr	r3, [pc, #584]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001108:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800110a:	f003 0302 	and.w	r3, r3, #2
 800110e:	60fb      	str	r3, [r7, #12]
 8001110:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001112:	4b8f      	ldr	r3, [pc, #572]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001116:	4a8e      	ldr	r2, [pc, #568]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001118:	f043 0308 	orr.w	r3, r3, #8
 800111c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800111e:	4b8c      	ldr	r3, [pc, #560]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001122:	f003 0308 	and.w	r3, r3, #8
 8001126:	60bb      	str	r3, [r7, #8]
 8001128:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800112a:	4b89      	ldr	r3, [pc, #548]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 800112c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800112e:	4a88      	ldr	r2, [pc, #544]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001130:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001136:	4b86      	ldr	r3, [pc, #536]	@ (8001350 <MX_GPIO_Init+0x2e4>)
 8001138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800113a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800113e:	607b      	str	r3, [r7, #4]
 8001140:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8001142:	f000 feb5 	bl	8001eb0 <HAL_PWREx_EnableVddIO2>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOF, GPIO_PIN_12, GPIO_PIN_RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800114c:	4881      	ldr	r0, [pc, #516]	@ (8001354 <MX_GPIO_Init+0x2e8>)
 800114e:	f000 fdd3 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 4140 	mov.w	r1, #49152	@ 0xc000
 8001158:	487f      	ldr	r0, [pc, #508]	@ (8001358 <MX_GPIO_Init+0x2ec>)
 800115a:	f000 fdcd 	bl	8001cf8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PE2 PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800115e:	230c      	movs	r3, #12
 8001160:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001162:	2302      	movs	r3, #2
 8001164:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001166:	2300      	movs	r3, #0
 8001168:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800116a:	2300      	movs	r3, #0
 800116c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800116e:	230d      	movs	r3, #13
 8001170:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001172:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001176:	4619      	mov	r1, r3
 8001178:	4878      	ldr	r0, [pc, #480]	@ (800135c <MX_GPIO_Init+0x2f0>)
 800117a:	f000 fc2b 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PF0 PF1 PF2 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2;
 800117e:	2307      	movs	r3, #7
 8001180:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001182:	2312      	movs	r3, #18
 8001184:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001186:	2300      	movs	r3, #0
 8001188:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800118a:	2303      	movs	r3, #3
 800118c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800118e:	2304      	movs	r3, #4
 8001190:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001192:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001196:	4619      	mov	r1, r3
 8001198:	486e      	ldr	r0, [pc, #440]	@ (8001354 <MX_GPIO_Init+0x2e8>)
 800119a:	f000 fc1b 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800119e:	2380      	movs	r3, #128	@ 0x80
 80011a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011a2:	2302      	movs	r3, #2
 80011a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011a6:	2300      	movs	r3, #0
 80011a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011aa:	2300      	movs	r3, #0
 80011ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80011ae:	230d      	movs	r3, #13
 80011b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80011b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011b6:	4619      	mov	r1, r3
 80011b8:	4866      	ldr	r0, [pc, #408]	@ (8001354 <MX_GPIO_Init+0x2e8>)
 80011ba:	f000 fc0b 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80011be:	233f      	movs	r3, #63	@ 0x3f
 80011c0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011c2:	230b      	movs	r3, #11
 80011c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ce:	4619      	mov	r1, r3
 80011d0:	4863      	ldr	r0, [pc, #396]	@ (8001360 <MX_GPIO_Init+0x2f4>)
 80011d2:	f000 fbff 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80011d6:	2301      	movs	r3, #1
 80011d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011da:	2302      	movs	r3, #2
 80011dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011de:	2300      	movs	r3, #0
 80011e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011e2:	2300      	movs	r3, #0
 80011e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80011e6:	2301      	movs	r3, #1
 80011e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80011ee:	4619      	mov	r1, r3
 80011f0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011f4:	f000 fbee 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA1 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_3;
 80011f8:	230a      	movs	r3, #10
 80011fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 80011fc:	230b      	movs	r3, #11
 80011fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001204:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001208:	4619      	mov	r1, r3
 800120a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800120e:	f000 fbe1 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001212:	2301      	movs	r3, #1
 8001214:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001216:	2302      	movs	r3, #2
 8001218:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800121a:	2300      	movs	r3, #0
 800121c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800121e:	2300      	movs	r3, #0
 8001220:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001222:	2302      	movs	r3, #2
 8001224:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001226:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800122a:	4619      	mov	r1, r3
 800122c:	484d      	ldr	r0, [pc, #308]	@ (8001364 <MX_GPIO_Init+0x2f8>)
 800122e:	f000 fbd1 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB1 */
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001232:	2302      	movs	r3, #2
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG_ADC_CONTROL;
 8001236:	230b      	movs	r3, #11
 8001238:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123a:	2300      	movs	r3, #0
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800123e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001242:	4619      	mov	r1, r3
 8001244:	4847      	ldr	r0, [pc, #284]	@ (8001364 <MX_GPIO_Init+0x2f8>)
 8001246:	f000 fbc5 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB2 PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_6;
 800124a:	2344      	movs	r3, #68	@ 0x44
 800124c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800124e:	2303      	movs	r3, #3
 8001250:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001252:	2300      	movs	r3, #0
 8001254:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001256:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800125a:	4619      	mov	r1, r3
 800125c:	4841      	ldr	r0, [pc, #260]	@ (8001364 <MX_GPIO_Init+0x2f8>)
 800125e:	f000 fbb9 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PF12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001262:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001266:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001268:	2301      	movs	r3, #1
 800126a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800126c:	2300      	movs	r3, #0
 800126e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	2300      	movs	r3, #0
 8001272:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001274:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001278:	4619      	mov	r1, r3
 800127a:	4836      	ldr	r0, [pc, #216]	@ (8001354 <MX_GPIO_Init+0x2e8>)
 800127c:	f000 fbaa 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE7 PE8 PE9 PE10
                           PE11 PE12 PE13 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10
 8001280:	f44f 537e 	mov.w	r3, #16256	@ 0x3f80
 8001284:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001286:	2302      	movs	r3, #2
 8001288:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128a:	2300      	movs	r3, #0
 800128c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128e:	2300      	movs	r3, #0
 8001290:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8001292:	2301      	movs	r3, #1
 8001294:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001296:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800129a:	4619      	mov	r1, r3
 800129c:	482f      	ldr	r0, [pc, #188]	@ (800135c <MX_GPIO_Init+0x2f0>)
 800129e:	f000 fb99 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE14 PE15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 80012a2:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 80012a6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012a8:	2302      	movs	r3, #2
 80012aa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ac:	2300      	movs	r3, #0
 80012ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012b0:	2300      	movs	r3, #0
 80012b2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF3_TIM1_COMP1;
 80012b4:	2303      	movs	r3, #3
 80012b6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80012b8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012bc:	4619      	mov	r1, r3
 80012be:	4827      	ldr	r0, [pc, #156]	@ (800135c <MX_GPIO_Init+0x2f0>)
 80012c0:	f000 fb88 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80012c4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80012c8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ca:	2302      	movs	r3, #2
 80012cc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012ce:	2300      	movs	r3, #0
 80012d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012d2:	2300      	movs	r3, #0
 80012d4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80012d6:	2301      	movs	r3, #1
 80012d8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012da:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80012de:	4619      	mov	r1, r3
 80012e0:	4820      	ldr	r0, [pc, #128]	@ (8001364 <MX_GPIO_Init+0x2f8>)
 80012e2:	f000 fb77 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12 PB13 PB15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 80012e6:	f44f 4330 	mov.w	r3, #45056	@ 0xb000
 80012ea:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012ec:	2302      	movs	r3, #2
 80012ee:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012f0:	2300      	movs	r3, #0
 80012f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012f4:	2300      	movs	r3, #0
 80012f6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80012f8:	230d      	movs	r3, #13
 80012fa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012fc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001300:	4619      	mov	r1, r3
 8001302:	4818      	ldr	r0, [pc, #96]	@ (8001364 <MX_GPIO_Init+0x2f8>)
 8001304:	f000 fb66 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB14 */
  GPIO_InitStruct.Pin = GPIO_PIN_14;
 8001308:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800130c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130e:	2302      	movs	r3, #2
 8001310:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001316:	2300      	movs	r3, #0
 8001318:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_TIM15;
 800131a:	230e      	movs	r3, #14
 800131c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001322:	4619      	mov	r1, r3
 8001324:	480f      	ldr	r0, [pc, #60]	@ (8001364 <MX_GPIO_Init+0x2f8>)
 8001326:	f000 fb55 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800132a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800132e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800133c:	2307      	movs	r3, #7
 800133e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4804      	ldr	r0, [pc, #16]	@ (8001358 <MX_GPIO_Init+0x2ec>)
 8001348:	f000 fb44 	bl	80019d4 <HAL_GPIO_Init>
 800134c:	e00c      	b.n	8001368 <MX_GPIO_Init+0x2fc>
 800134e:	bf00      	nop
 8001350:	40021000 	.word	0x40021000
 8001354:	48001400 	.word	0x48001400
 8001358:	48000c00 	.word	0x48000c00
 800135c:	48001000 	.word	0x48001000
 8001360:	48000800 	.word	0x48000800
 8001364:	48000400 	.word	0x48000400

  /*Configure GPIO pins : PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001368:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 800136c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136e:	2301      	movs	r3, #1
 8001370:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001372:	2300      	movs	r3, #0
 8001374:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001376:	2300      	movs	r3, #0
 8001378:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800137a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800137e:	4619      	mov	r1, r3
 8001380:	4864      	ldr	r0, [pc, #400]	@ (8001514 <MX_GPIO_Init+0x4a8>)
 8001382:	f000 fb27 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG7 PG8 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8001386:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 800138a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138c:	2302      	movs	r3, #2
 800138e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001390:	2300      	movs	r3, #0
 8001392:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001394:	2303      	movs	r3, #3
 8001396:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8001398:	2308      	movs	r3, #8
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800139c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013a0:	4619      	mov	r1, r3
 80013a2:	485d      	ldr	r0, [pc, #372]	@ (8001518 <MX_GPIO_Init+0x4ac>)
 80013a4:	f000 fb16 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013a8:	2340      	movs	r3, #64	@ 0x40
 80013aa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ac:	2302      	movs	r3, #2
 80013ae:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b0:	2300      	movs	r3, #0
 80013b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b4:	2300      	movs	r3, #0
 80013b6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF13_SAI2;
 80013b8:	230d      	movs	r3, #13
 80013ba:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013bc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013c0:	4619      	mov	r1, r3
 80013c2:	4856      	ldr	r0, [pc, #344]	@ (800151c <MX_GPIO_Init+0x4b0>)
 80013c4:	f000 fb06 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 80013c8:	2380      	movs	r3, #128	@ 0x80
 80013ca:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013cc:	2302      	movs	r3, #2
 80013ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013d0:	2300      	movs	r3, #0
 80013d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013d4:	2300      	movs	r3, #0
 80013d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80013d8:	2302      	movs	r3, #2
 80013da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013e0:	4619      	mov	r1, r3
 80013e2:	484e      	ldr	r0, [pc, #312]	@ (800151c <MX_GPIO_Init+0x4b0>)
 80013e4:	f000 faf6 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC8 PC9 PC10 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_11
 80013e8:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80013ec:	627b      	str	r3, [r7, #36]	@ 0x24
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013ee:	2302      	movs	r3, #2
 80013f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013f2:	2300      	movs	r3, #0
 80013f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013f6:	2303      	movs	r3, #3
 80013f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 80013fa:	230c      	movs	r3, #12
 80013fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001402:	4619      	mov	r1, r3
 8001404:	4845      	ldr	r0, [pc, #276]	@ (800151c <MX_GPIO_Init+0x4b0>)
 8001406:	f000 fae5 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA10 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_10;
 800140a:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 800140e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001410:	2302      	movs	r3, #2
 8001412:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001418:	2303      	movs	r3, #3
 800141a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800141c:	230a      	movs	r3, #10
 800141e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001420:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001424:	4619      	mov	r1, r3
 8001426:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800142a:	f000 fad3 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA9 */
  GPIO_InitStruct.Pin = GPIO_PIN_9;
 800142e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001434:	2300      	movs	r3, #0
 8001436:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001438:	2300      	movs	r3, #0
 800143a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800143c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001440:	4619      	mov	r1, r3
 8001442:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001446:	f000 fac5 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 800144a:	2301      	movs	r3, #1
 800144c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800144e:	2302      	movs	r3, #2
 8001450:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001452:	2300      	movs	r3, #0
 8001454:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001456:	2303      	movs	r3, #3
 8001458:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 800145a:	2309      	movs	r3, #9
 800145c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800145e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001462:	4619      	mov	r1, r3
 8001464:	482b      	ldr	r0, [pc, #172]	@ (8001514 <MX_GPIO_Init+0x4a8>)
 8001466:	f000 fab5 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800146a:	2304      	movs	r3, #4
 800146c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800146e:	2302      	movs	r3, #2
 8001470:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001472:	2300      	movs	r3, #0
 8001474:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001476:	2303      	movs	r3, #3
 8001478:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_SDMMC1;
 800147a:	230c      	movs	r3, #12
 800147c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800147e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001482:	4619      	mov	r1, r3
 8001484:	4823      	ldr	r0, [pc, #140]	@ (8001514 <MX_GPIO_Init+0x4a8>)
 8001486:	f000 faa5 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD3 PD4 PD5 PD6 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 800148a:	2378      	movs	r3, #120	@ 0x78
 800148c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800148e:	2302      	movs	r3, #2
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001492:	2300      	movs	r3, #0
 8001494:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001496:	2303      	movs	r3, #3
 8001498:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800149a:	2307      	movs	r3, #7
 800149c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800149e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014a2:	4619      	mov	r1, r3
 80014a4:	481b      	ldr	r0, [pc, #108]	@ (8001514 <MX_GPIO_Init+0x4a8>)
 80014a6:	f000 fa95 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014aa:	2338      	movs	r3, #56	@ 0x38
 80014ac:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ae:	2302      	movs	r3, #2
 80014b0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014b2:	2300      	movs	r3, #0
 80014b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014b6:	2303      	movs	r3, #3
 80014b8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80014ba:	2306      	movs	r3, #6
 80014bc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014be:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014c2:	4619      	mov	r1, r3
 80014c4:	4816      	ldr	r0, [pc, #88]	@ (8001520 <MX_GPIO_Init+0x4b4>)
 80014c6:	f000 fa85 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80014ca:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014ce:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80014d0:	2312      	movs	r3, #18
 80014d2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d4:	2300      	movs	r3, #0
 80014d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d8:	2303      	movs	r3, #3
 80014da:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80014dc:	2304      	movs	r3, #4
 80014de:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e4:	4619      	mov	r1, r3
 80014e6:	480e      	ldr	r0, [pc, #56]	@ (8001520 <MX_GPIO_Init+0x4b4>)
 80014e8:	f000 fa74 	bl	80019d4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PE0 */
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80014ec:	2301      	movs	r3, #1
 80014ee:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f0:	2302      	movs	r3, #2
 80014f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f8:	2300      	movs	r3, #0
 80014fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80014fc:	2302      	movs	r3, #2
 80014fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001500:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001504:	4619      	mov	r1, r3
 8001506:	4807      	ldr	r0, [pc, #28]	@ (8001524 <MX_GPIO_Init+0x4b8>)
 8001508:	f000 fa64 	bl	80019d4 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 800150c:	bf00      	nop
 800150e:	3738      	adds	r7, #56	@ 0x38
 8001510:	46bd      	mov	sp, r7
 8001512:	bd80      	pop	{r7, pc}
 8001514:	48000c00 	.word	0x48000c00
 8001518:	48001800 	.word	0x48001800
 800151c:	48000800 	.word	0x48000800
 8001520:	48000400 	.word	0x48000400
 8001524:	48001000 	.word	0x48001000

08001528 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001528:	b480      	push	{r7}
 800152a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800152c:	b672      	cpsid	i
}
 800152e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001530:	bf00      	nop
 8001532:	e7fd      	b.n	8001530 <Error_Handler+0x8>

08001534 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800153a:	4b0f      	ldr	r3, [pc, #60]	@ (8001578 <HAL_MspInit+0x44>)
 800153c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800153e:	4a0e      	ldr	r2, [pc, #56]	@ (8001578 <HAL_MspInit+0x44>)
 8001540:	f043 0301 	orr.w	r3, r3, #1
 8001544:	6613      	str	r3, [r2, #96]	@ 0x60
 8001546:	4b0c      	ldr	r3, [pc, #48]	@ (8001578 <HAL_MspInit+0x44>)
 8001548:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800154a:	f003 0301 	and.w	r3, r3, #1
 800154e:	607b      	str	r3, [r7, #4]
 8001550:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001552:	4b09      	ldr	r3, [pc, #36]	@ (8001578 <HAL_MspInit+0x44>)
 8001554:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001556:	4a08      	ldr	r2, [pc, #32]	@ (8001578 <HAL_MspInit+0x44>)
 8001558:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800155c:	6593      	str	r3, [r2, #88]	@ 0x58
 800155e:	4b06      	ldr	r3, [pc, #24]	@ (8001578 <HAL_MspInit+0x44>)
 8001560:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001562:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001566:	603b      	str	r3, [r7, #0]
 8001568:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800156a:	bf00      	nop
 800156c:	370c      	adds	r7, #12
 800156e:	46bd      	mov	sp, r7
 8001570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001574:	4770      	bx	lr
 8001576:	bf00      	nop
 8001578:	40021000 	.word	0x40021000

0800157c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	@ 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a17      	ldr	r2, [pc, #92]	@ (80015f8 <HAL_SPI_MspInit+0x7c>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d128      	bne.n	80015f0 <HAL_SPI_MspInit+0x74>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800159e:	4b17      	ldr	r3, [pc, #92]	@ (80015fc <HAL_SPI_MspInit+0x80>)
 80015a0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015a2:	4a16      	ldr	r2, [pc, #88]	@ (80015fc <HAL_SPI_MspInit+0x80>)
 80015a4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80015a8:	6613      	str	r3, [r2, #96]	@ 0x60
 80015aa:	4b14      	ldr	r3, [pc, #80]	@ (80015fc <HAL_SPI_MspInit+0x80>)
 80015ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80015ae:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b11      	ldr	r3, [pc, #68]	@ (80015fc <HAL_SPI_MspInit+0x80>)
 80015b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015ba:	4a10      	ldr	r2, [pc, #64]	@ (80015fc <HAL_SPI_MspInit+0x80>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80015c2:	4b0e      	ldr	r3, [pc, #56]	@ (80015fc <HAL_SPI_MspInit+0x80>)
 80015c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    PA4     ------> SPI1_NSS
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015ce:	23f0      	movs	r3, #240	@ 0xf0
 80015d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d2:	2302      	movs	r3, #2
 80015d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015d6:	2300      	movs	r3, #0
 80015d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015da:	2303      	movs	r3, #3
 80015dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80015de:	2305      	movs	r3, #5
 80015e0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80015ec:	f000 f9f2 	bl	80019d4 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 80015f0:	bf00      	nop
 80015f2:	3728      	adds	r7, #40	@ 0x28
 80015f4:	46bd      	mov	sp, r7
 80015f6:	bd80      	pop	{r7, pc}
 80015f8:	40013000 	.word	0x40013000
 80015fc:	40021000 	.word	0x40021000

08001600 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001600:	b480      	push	{r7}
 8001602:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001604:	bf00      	nop
 8001606:	e7fd      	b.n	8001604 <NMI_Handler+0x4>

08001608 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800160c:	bf00      	nop
 800160e:	e7fd      	b.n	800160c <HardFault_Handler+0x4>

08001610 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001610:	b480      	push	{r7}
 8001612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001614:	bf00      	nop
 8001616:	e7fd      	b.n	8001614 <MemManage_Handler+0x4>

08001618 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001618:	b480      	push	{r7}
 800161a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800161c:	bf00      	nop
 800161e:	e7fd      	b.n	800161c <BusFault_Handler+0x4>

08001620 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001620:	b480      	push	{r7}
 8001622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001624:	bf00      	nop
 8001626:	e7fd      	b.n	8001624 <UsageFault_Handler+0x4>

08001628 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001628:	b480      	push	{r7}
 800162a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800162c:	bf00      	nop
 800162e:	46bd      	mov	sp, r7
 8001630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001634:	4770      	bx	lr

08001636 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001636:	b480      	push	{r7}
 8001638:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800163a:	bf00      	nop
 800163c:	46bd      	mov	sp, r7
 800163e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001642:	4770      	bx	lr

08001644 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001644:	b480      	push	{r7}
 8001646:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001648:	bf00      	nop
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001652:	b580      	push	{r7, lr}
 8001654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001656:	f000 f893 	bl	8001780 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800165a:	bf00      	nop
 800165c:	bd80      	pop	{r7, pc}
	...

08001660 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 8001664:	4b06      	ldr	r3, [pc, #24]	@ (8001680 <SystemInit+0x20>)
 8001666:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800166a:	4a05      	ldr	r2, [pc, #20]	@ (8001680 <SystemInit+0x20>)
 800166c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001670:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#endif
}
 8001674:	bf00      	nop
 8001676:	46bd      	mov	sp, r7
 8001678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167c:	4770      	bx	lr
 800167e:	bf00      	nop
 8001680:	e000ed00 	.word	0xe000ed00

08001684 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001684:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016bc <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001688:	f7ff ffea 	bl	8001660 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800168c:	480c      	ldr	r0, [pc, #48]	@ (80016c0 <LoopForever+0x6>)
  ldr r1, =_edata
 800168e:	490d      	ldr	r1, [pc, #52]	@ (80016c4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001690:	4a0d      	ldr	r2, [pc, #52]	@ (80016c8 <LoopForever+0xe>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0a      	ldr	r2, [pc, #40]	@ (80016cc <LoopForever+0x12>)
  ldr r4, =_ebss
 80016a4:	4c0a      	ldr	r4, [pc, #40]	@ (80016d0 <LoopForever+0x16>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80016b2:	f001 fe33 	bl	800331c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80016b6:	f7ff fc39 	bl	8000f2c <main>

080016ba <LoopForever>:

LoopForever:
    b LoopForever
 80016ba:	e7fe      	b.n	80016ba <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 80016bc:	200a0000 	.word	0x200a0000
  ldr r0, =_sdata
 80016c0:	20040000 	.word	0x20040000
  ldr r1, =_edata
 80016c4:	2004001c 	.word	0x2004001c
  ldr r2, =_sidata
 80016c8:	080033c4 	.word	0x080033c4
  ldr r2, =_sbss
 80016cc:	2004001c 	.word	0x2004001c
  ldr r4, =_ebss
 80016d0:	200400a4 	.word	0x200400a4

080016d4 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80016d4:	e7fe      	b.n	80016d4 <ADC1_IRQHandler>

080016d6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016d6:	b580      	push	{r7, lr}
 80016d8:	b082      	sub	sp, #8
 80016da:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80016dc:	2300      	movs	r3, #0
 80016de:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016e0:	2003      	movs	r0, #3
 80016e2:	f000 f943 	bl	800196c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80016e6:	2000      	movs	r0, #0
 80016e8:	f000 f80e 	bl	8001708 <HAL_InitTick>
 80016ec:	4603      	mov	r3, r0
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d002      	beq.n	80016f8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80016f2:	2301      	movs	r3, #1
 80016f4:	71fb      	strb	r3, [r7, #7]
 80016f6:	e001      	b.n	80016fc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80016f8:	f7ff ff1c 	bl	8001534 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80016fc:	79fb      	ldrb	r3, [r7, #7]
}
 80016fe:	4618      	mov	r0, r3
 8001700:	3708      	adds	r7, #8
 8001702:	46bd      	mov	sp, r7
 8001704:	bd80      	pop	{r7, pc}
	...

08001708 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b084      	sub	sp, #16
 800170c:	af00      	add	r7, sp, #0
 800170e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001710:	2300      	movs	r3, #0
 8001712:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001714:	4b17      	ldr	r3, [pc, #92]	@ (8001774 <HAL_InitTick+0x6c>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d023      	beq.n	8001764 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <HAL_InitTick+0x70>)
 800171e:	681a      	ldr	r2, [r3, #0]
 8001720:	4b14      	ldr	r3, [pc, #80]	@ (8001774 <HAL_InitTick+0x6c>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	4619      	mov	r1, r3
 8001726:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800172a:	fbb3 f3f1 	udiv	r3, r3, r1
 800172e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001732:	4618      	mov	r0, r3
 8001734:	f000 f941 	bl	80019ba <HAL_SYSTICK_Config>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d10f      	bne.n	800175e <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2b0f      	cmp	r3, #15
 8001742:	d809      	bhi.n	8001758 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001744:	2200      	movs	r2, #0
 8001746:	6879      	ldr	r1, [r7, #4]
 8001748:	f04f 30ff 	mov.w	r0, #4294967295
 800174c:	f000 f919 	bl	8001982 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001750:	4a0a      	ldr	r2, [pc, #40]	@ (800177c <HAL_InitTick+0x74>)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	6013      	str	r3, [r2, #0]
 8001756:	e007      	b.n	8001768 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 8001758:	2301      	movs	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	e004      	b.n	8001768 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 800175e:	2301      	movs	r3, #1
 8001760:	73fb      	strb	r3, [r7, #15]
 8001762:	e001      	b.n	8001768 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001764:	2301      	movs	r3, #1
 8001766:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001768:	7bfb      	ldrb	r3, [r7, #15]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20040018 	.word	0x20040018
 8001778:	20040010 	.word	0x20040010
 800177c:	20040014 	.word	0x20040014

08001780 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001780:	b480      	push	{r7}
 8001782:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8001784:	4b06      	ldr	r3, [pc, #24]	@ (80017a0 <HAL_IncTick+0x20>)
 8001786:	781b      	ldrb	r3, [r3, #0]
 8001788:	461a      	mov	r2, r3
 800178a:	4b06      	ldr	r3, [pc, #24]	@ (80017a4 <HAL_IncTick+0x24>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	4413      	add	r3, r2
 8001790:	4a04      	ldr	r2, [pc, #16]	@ (80017a4 <HAL_IncTick+0x24>)
 8001792:	6013      	str	r3, [r2, #0]
}
 8001794:	bf00      	nop
 8001796:	46bd      	mov	sp, r7
 8001798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800179c:	4770      	bx	lr
 800179e:	bf00      	nop
 80017a0:	20040018 	.word	0x20040018
 80017a4:	200400a0 	.word	0x200400a0

080017a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  return uwTick;
 80017ac:	4b03      	ldr	r3, [pc, #12]	@ (80017bc <HAL_GetTick+0x14>)
 80017ae:	681b      	ldr	r3, [r3, #0]
}
 80017b0:	4618      	mov	r0, r3
 80017b2:	46bd      	mov	sp, r7
 80017b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017b8:	4770      	bx	lr
 80017ba:	bf00      	nop
 80017bc:	200400a0 	.word	0x200400a0

080017c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b084      	sub	sp, #16
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017c8:	f7ff ffee 	bl	80017a8 <HAL_GetTick>
 80017cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017d8:	d005      	beq.n	80017e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 80017da:	4b0a      	ldr	r3, [pc, #40]	@ (8001804 <HAL_Delay+0x44>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	461a      	mov	r2, r3
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	4413      	add	r3, r2
 80017e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017e6:	bf00      	nop
 80017e8:	f7ff ffde 	bl	80017a8 <HAL_GetTick>
 80017ec:	4602      	mov	r2, r0
 80017ee:	68bb      	ldr	r3, [r7, #8]
 80017f0:	1ad3      	subs	r3, r2, r3
 80017f2:	68fa      	ldr	r2, [r7, #12]
 80017f4:	429a      	cmp	r2, r3
 80017f6:	d8f7      	bhi.n	80017e8 <HAL_Delay+0x28>
  {
  }
}
 80017f8:	bf00      	nop
 80017fa:	bf00      	nop
 80017fc:	3710      	adds	r7, #16
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	20040018 	.word	0x20040018

08001808 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b480      	push	{r7}
 800180a:	b085      	sub	sp, #20
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	f003 0307 	and.w	r3, r3, #7
 8001816:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001818:	4b0c      	ldr	r3, [pc, #48]	@ (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800181a:	68db      	ldr	r3, [r3, #12]
 800181c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800181e:	68ba      	ldr	r2, [r7, #8]
 8001820:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001824:	4013      	ands	r3, r2
 8001826:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800182c:	68bb      	ldr	r3, [r7, #8]
 800182e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001830:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001834:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001838:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800183a:	4a04      	ldr	r2, [pc, #16]	@ (800184c <__NVIC_SetPriorityGrouping+0x44>)
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	60d3      	str	r3, [r2, #12]
}
 8001840:	bf00      	nop
 8001842:	3714      	adds	r7, #20
 8001844:	46bd      	mov	sp, r7
 8001846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184a:	4770      	bx	lr
 800184c:	e000ed00 	.word	0xe000ed00

08001850 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001850:	b480      	push	{r7}
 8001852:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001854:	4b04      	ldr	r3, [pc, #16]	@ (8001868 <__NVIC_GetPriorityGrouping+0x18>)
 8001856:	68db      	ldr	r3, [r3, #12]
 8001858:	0a1b      	lsrs	r3, r3, #8
 800185a:	f003 0307 	and.w	r3, r3, #7
}
 800185e:	4618      	mov	r0, r3
 8001860:	46bd      	mov	sp, r7
 8001862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001866:	4770      	bx	lr
 8001868:	e000ed00 	.word	0xe000ed00

0800186c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	4603      	mov	r3, r0
 8001874:	6039      	str	r1, [r7, #0]
 8001876:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001878:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187c:	2b00      	cmp	r3, #0
 800187e:	db0a      	blt.n	8001896 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	b2da      	uxtb	r2, r3
 8001884:	490c      	ldr	r1, [pc, #48]	@ (80018b8 <__NVIC_SetPriority+0x4c>)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	0112      	lsls	r2, r2, #4
 800188c:	b2d2      	uxtb	r2, r2
 800188e:	440b      	add	r3, r1
 8001890:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001894:	e00a      	b.n	80018ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001896:	683b      	ldr	r3, [r7, #0]
 8001898:	b2da      	uxtb	r2, r3
 800189a:	4908      	ldr	r1, [pc, #32]	@ (80018bc <__NVIC_SetPriority+0x50>)
 800189c:	79fb      	ldrb	r3, [r7, #7]
 800189e:	f003 030f 	and.w	r3, r3, #15
 80018a2:	3b04      	subs	r3, #4
 80018a4:	0112      	lsls	r2, r2, #4
 80018a6:	b2d2      	uxtb	r2, r2
 80018a8:	440b      	add	r3, r1
 80018aa:	761a      	strb	r2, [r3, #24]
}
 80018ac:	bf00      	nop
 80018ae:	370c      	adds	r7, #12
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr
 80018b8:	e000e100 	.word	0xe000e100
 80018bc:	e000ed00 	.word	0xe000ed00

080018c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b089      	sub	sp, #36	@ 0x24
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	60f8      	str	r0, [r7, #12]
 80018c8:	60b9      	str	r1, [r7, #8]
 80018ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	f003 0307 	and.w	r3, r3, #7
 80018d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f1c3 0307 	rsb	r3, r3, #7
 80018da:	2b04      	cmp	r3, #4
 80018dc:	bf28      	it	cs
 80018de:	2304      	movcs	r3, #4
 80018e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018e2:	69fb      	ldr	r3, [r7, #28]
 80018e4:	3304      	adds	r3, #4
 80018e6:	2b06      	cmp	r3, #6
 80018e8:	d902      	bls.n	80018f0 <NVIC_EncodePriority+0x30>
 80018ea:	69fb      	ldr	r3, [r7, #28]
 80018ec:	3b03      	subs	r3, #3
 80018ee:	e000      	b.n	80018f2 <NVIC_EncodePriority+0x32>
 80018f0:	2300      	movs	r3, #0
 80018f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018f4:	f04f 32ff 	mov.w	r2, #4294967295
 80018f8:	69bb      	ldr	r3, [r7, #24]
 80018fa:	fa02 f303 	lsl.w	r3, r2, r3
 80018fe:	43da      	mvns	r2, r3
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	401a      	ands	r2, r3
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001908:	f04f 31ff 	mov.w	r1, #4294967295
 800190c:	697b      	ldr	r3, [r7, #20]
 800190e:	fa01 f303 	lsl.w	r3, r1, r3
 8001912:	43d9      	mvns	r1, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001918:	4313      	orrs	r3, r2
         );
}
 800191a:	4618      	mov	r0, r3
 800191c:	3724      	adds	r7, #36	@ 0x24
 800191e:	46bd      	mov	sp, r7
 8001920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001924:	4770      	bx	lr
	...

08001928 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b082      	sub	sp, #8
 800192c:	af00      	add	r7, sp, #0
 800192e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	3b01      	subs	r3, #1
 8001934:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001938:	d301      	bcc.n	800193e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800193a:	2301      	movs	r3, #1
 800193c:	e00f      	b.n	800195e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800193e:	4a0a      	ldr	r2, [pc, #40]	@ (8001968 <SysTick_Config+0x40>)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	3b01      	subs	r3, #1
 8001944:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001946:	210f      	movs	r1, #15
 8001948:	f04f 30ff 	mov.w	r0, #4294967295
 800194c:	f7ff ff8e 	bl	800186c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001950:	4b05      	ldr	r3, [pc, #20]	@ (8001968 <SysTick_Config+0x40>)
 8001952:	2200      	movs	r2, #0
 8001954:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001956:	4b04      	ldr	r3, [pc, #16]	@ (8001968 <SysTick_Config+0x40>)
 8001958:	2207      	movs	r2, #7
 800195a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800195c:	2300      	movs	r3, #0
}
 800195e:	4618      	mov	r0, r3
 8001960:	3708      	adds	r7, #8
 8001962:	46bd      	mov	sp, r7
 8001964:	bd80      	pop	{r7, pc}
 8001966:	bf00      	nop
 8001968:	e000e010 	.word	0xe000e010

0800196c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	b082      	sub	sp, #8
 8001970:	af00      	add	r7, sp, #0
 8001972:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001974:	6878      	ldr	r0, [r7, #4]
 8001976:	f7ff ff47 	bl	8001808 <__NVIC_SetPriorityGrouping>
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}

08001982 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001982:	b580      	push	{r7, lr}
 8001984:	b086      	sub	sp, #24
 8001986:	af00      	add	r7, sp, #0
 8001988:	4603      	mov	r3, r0
 800198a:	60b9      	str	r1, [r7, #8]
 800198c:	607a      	str	r2, [r7, #4]
 800198e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001990:	2300      	movs	r3, #0
 8001992:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001994:	f7ff ff5c 	bl	8001850 <__NVIC_GetPriorityGrouping>
 8001998:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800199a:	687a      	ldr	r2, [r7, #4]
 800199c:	68b9      	ldr	r1, [r7, #8]
 800199e:	6978      	ldr	r0, [r7, #20]
 80019a0:	f7ff ff8e 	bl	80018c0 <NVIC_EncodePriority>
 80019a4:	4602      	mov	r2, r0
 80019a6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019aa:	4611      	mov	r1, r2
 80019ac:	4618      	mov	r0, r3
 80019ae:	f7ff ff5d 	bl	800186c <__NVIC_SetPriority>
}
 80019b2:	bf00      	nop
 80019b4:	3718      	adds	r7, #24
 80019b6:	46bd      	mov	sp, r7
 80019b8:	bd80      	pop	{r7, pc}

080019ba <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ba:	b580      	push	{r7, lr}
 80019bc:	b082      	sub	sp, #8
 80019be:	af00      	add	r7, sp, #0
 80019c0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019c2:	6878      	ldr	r0, [r7, #4]
 80019c4:	f7ff ffb0 	bl	8001928 <SysTick_Config>
 80019c8:	4603      	mov	r3, r0
}
 80019ca:	4618      	mov	r0, r3
 80019cc:	3708      	adds	r7, #8
 80019ce:	46bd      	mov	sp, r7
 80019d0:	bd80      	pop	{r7, pc}
	...

080019d4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80019d4:	b480      	push	{r7}
 80019d6:	b087      	sub	sp, #28
 80019d8:	af00      	add	r7, sp, #0
 80019da:	6078      	str	r0, [r7, #4]
 80019dc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80019de:	2300      	movs	r3, #0
 80019e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80019e2:	e166      	b.n	8001cb2 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80019e4:	683b      	ldr	r3, [r7, #0]
 80019e6:	681a      	ldr	r2, [r3, #0]
 80019e8:	2101      	movs	r1, #1
 80019ea:	697b      	ldr	r3, [r7, #20]
 80019ec:	fa01 f303 	lsl.w	r3, r1, r3
 80019f0:	4013      	ands	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b00      	cmp	r3, #0
 80019f8:	f000 8158 	beq.w	8001cac <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	685b      	ldr	r3, [r3, #4]
 8001a00:	f003 0303 	and.w	r3, r3, #3
 8001a04:	2b01      	cmp	r3, #1
 8001a06:	d005      	beq.n	8001a14 <HAL_GPIO_Init+0x40>
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	685b      	ldr	r3, [r3, #4]
 8001a0c:	f003 0303 	and.w	r3, r3, #3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d130      	bne.n	8001a76 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	689b      	ldr	r3, [r3, #8]
 8001a18:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001a1a:	697b      	ldr	r3, [r7, #20]
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	2203      	movs	r2, #3
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	43db      	mvns	r3, r3
 8001a26:	693a      	ldr	r2, [r7, #16]
 8001a28:	4013      	ands	r3, r2
 8001a2a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001a2c:	683b      	ldr	r3, [r7, #0]
 8001a2e:	68da      	ldr	r2, [r3, #12]
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	005b      	lsls	r3, r3, #1
 8001a34:	fa02 f303 	lsl.w	r3, r2, r3
 8001a38:	693a      	ldr	r2, [r7, #16]
 8001a3a:	4313      	orrs	r3, r2
 8001a3c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	693a      	ldr	r2, [r7, #16]
 8001a42:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	685b      	ldr	r3, [r3, #4]
 8001a48:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a52:	43db      	mvns	r3, r3
 8001a54:	693a      	ldr	r2, [r7, #16]
 8001a56:	4013      	ands	r3, r2
 8001a58:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001a5a:	683b      	ldr	r3, [r7, #0]
 8001a5c:	685b      	ldr	r3, [r3, #4]
 8001a5e:	091b      	lsrs	r3, r3, #4
 8001a60:	f003 0201 	and.w	r2, r3, #1
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	fa02 f303 	lsl.w	r3, r2, r3
 8001a6a:	693a      	ldr	r2, [r7, #16]
 8001a6c:	4313      	orrs	r3, r2
 8001a6e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	693a      	ldr	r2, [r7, #16]
 8001a74:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b03      	cmp	r3, #3
 8001a80:	d017      	beq.n	8001ab2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	68db      	ldr	r3, [r3, #12]
 8001a86:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001a88:	697b      	ldr	r3, [r7, #20]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	2203      	movs	r2, #3
 8001a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a92:	43db      	mvns	r3, r3
 8001a94:	693a      	ldr	r2, [r7, #16]
 8001a96:	4013      	ands	r3, r2
 8001a98:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001a9a:	683b      	ldr	r3, [r7, #0]
 8001a9c:	689a      	ldr	r2, [r3, #8]
 8001a9e:	697b      	ldr	r3, [r7, #20]
 8001aa0:	005b      	lsls	r3, r3, #1
 8001aa2:	fa02 f303 	lsl.w	r3, r2, r3
 8001aa6:	693a      	ldr	r2, [r7, #16]
 8001aa8:	4313      	orrs	r3, r2
 8001aaa:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	693a      	ldr	r2, [r7, #16]
 8001ab0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ab2:	683b      	ldr	r3, [r7, #0]
 8001ab4:	685b      	ldr	r3, [r3, #4]
 8001ab6:	f003 0303 	and.w	r3, r3, #3
 8001aba:	2b02      	cmp	r3, #2
 8001abc:	d123      	bne.n	8001b06 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001abe:	697b      	ldr	r3, [r7, #20]
 8001ac0:	08da      	lsrs	r2, r3, #3
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3208      	adds	r2, #8
 8001ac6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001aca:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001acc:	697b      	ldr	r3, [r7, #20]
 8001ace:	f003 0307 	and.w	r3, r3, #7
 8001ad2:	009b      	lsls	r3, r3, #2
 8001ad4:	220f      	movs	r2, #15
 8001ad6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ada:	43db      	mvns	r3, r3
 8001adc:	693a      	ldr	r2, [r7, #16]
 8001ade:	4013      	ands	r3, r2
 8001ae0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001ae2:	683b      	ldr	r3, [r7, #0]
 8001ae4:	691a      	ldr	r2, [r3, #16]
 8001ae6:	697b      	ldr	r3, [r7, #20]
 8001ae8:	f003 0307 	and.w	r3, r3, #7
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	fa02 f303 	lsl.w	r3, r2, r3
 8001af2:	693a      	ldr	r2, [r7, #16]
 8001af4:	4313      	orrs	r3, r2
 8001af6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001af8:	697b      	ldr	r3, [r7, #20]
 8001afa:	08da      	lsrs	r2, r3, #3
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	3208      	adds	r2, #8
 8001b00:	6939      	ldr	r1, [r7, #16]
 8001b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	005b      	lsls	r3, r3, #1
 8001b10:	2203      	movs	r2, #3
 8001b12:	fa02 f303 	lsl.w	r3, r2, r3
 8001b16:	43db      	mvns	r3, r3
 8001b18:	693a      	ldr	r2, [r7, #16]
 8001b1a:	4013      	ands	r3, r2
 8001b1c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001b1e:	683b      	ldr	r3, [r7, #0]
 8001b20:	685b      	ldr	r3, [r3, #4]
 8001b22:	f003 0203 	and.w	r2, r3, #3
 8001b26:	697b      	ldr	r3, [r7, #20]
 8001b28:	005b      	lsls	r3, r3, #1
 8001b2a:	fa02 f303 	lsl.w	r3, r2, r3
 8001b2e:	693a      	ldr	r2, [r7, #16]
 8001b30:	4313      	orrs	r3, r2
 8001b32:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	693a      	ldr	r2, [r7, #16]
 8001b38:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001b3a:	683b      	ldr	r3, [r7, #0]
 8001b3c:	685b      	ldr	r3, [r3, #4]
 8001b3e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 80b2 	beq.w	8001cac <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001b48:	4b61      	ldr	r3, [pc, #388]	@ (8001cd0 <HAL_GPIO_Init+0x2fc>)
 8001b4a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b4c:	4a60      	ldr	r2, [pc, #384]	@ (8001cd0 <HAL_GPIO_Init+0x2fc>)
 8001b4e:	f043 0301 	orr.w	r3, r3, #1
 8001b52:	6613      	str	r3, [r2, #96]	@ 0x60
 8001b54:	4b5e      	ldr	r3, [pc, #376]	@ (8001cd0 <HAL_GPIO_Init+0x2fc>)
 8001b56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001b58:	f003 0301 	and.w	r3, r3, #1
 8001b5c:	60bb      	str	r3, [r7, #8]
 8001b5e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001b60:	4a5c      	ldr	r2, [pc, #368]	@ (8001cd4 <HAL_GPIO_Init+0x300>)
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b6c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001b6e:	697b      	ldr	r3, [r7, #20]
 8001b70:	f003 0303 	and.w	r3, r3, #3
 8001b74:	009b      	lsls	r3, r3, #2
 8001b76:	220f      	movs	r2, #15
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	693a      	ldr	r2, [r7, #16]
 8001b80:	4013      	ands	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8001b8a:	d02b      	beq.n	8001be4 <HAL_GPIO_Init+0x210>
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	4a52      	ldr	r2, [pc, #328]	@ (8001cd8 <HAL_GPIO_Init+0x304>)
 8001b90:	4293      	cmp	r3, r2
 8001b92:	d025      	beq.n	8001be0 <HAL_GPIO_Init+0x20c>
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	4a51      	ldr	r2, [pc, #324]	@ (8001cdc <HAL_GPIO_Init+0x308>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d01f      	beq.n	8001bdc <HAL_GPIO_Init+0x208>
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	4a50      	ldr	r2, [pc, #320]	@ (8001ce0 <HAL_GPIO_Init+0x30c>)
 8001ba0:	4293      	cmp	r3, r2
 8001ba2:	d019      	beq.n	8001bd8 <HAL_GPIO_Init+0x204>
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	4a4f      	ldr	r2, [pc, #316]	@ (8001ce4 <HAL_GPIO_Init+0x310>)
 8001ba8:	4293      	cmp	r3, r2
 8001baa:	d013      	beq.n	8001bd4 <HAL_GPIO_Init+0x200>
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	4a4e      	ldr	r2, [pc, #312]	@ (8001ce8 <HAL_GPIO_Init+0x314>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d00d      	beq.n	8001bd0 <HAL_GPIO_Init+0x1fc>
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	4a4d      	ldr	r2, [pc, #308]	@ (8001cec <HAL_GPIO_Init+0x318>)
 8001bb8:	4293      	cmp	r3, r2
 8001bba:	d007      	beq.n	8001bcc <HAL_GPIO_Init+0x1f8>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	4a4c      	ldr	r2, [pc, #304]	@ (8001cf0 <HAL_GPIO_Init+0x31c>)
 8001bc0:	4293      	cmp	r3, r2
 8001bc2:	d101      	bne.n	8001bc8 <HAL_GPIO_Init+0x1f4>
 8001bc4:	2307      	movs	r3, #7
 8001bc6:	e00e      	b.n	8001be6 <HAL_GPIO_Init+0x212>
 8001bc8:	2308      	movs	r3, #8
 8001bca:	e00c      	b.n	8001be6 <HAL_GPIO_Init+0x212>
 8001bcc:	2306      	movs	r3, #6
 8001bce:	e00a      	b.n	8001be6 <HAL_GPIO_Init+0x212>
 8001bd0:	2305      	movs	r3, #5
 8001bd2:	e008      	b.n	8001be6 <HAL_GPIO_Init+0x212>
 8001bd4:	2304      	movs	r3, #4
 8001bd6:	e006      	b.n	8001be6 <HAL_GPIO_Init+0x212>
 8001bd8:	2303      	movs	r3, #3
 8001bda:	e004      	b.n	8001be6 <HAL_GPIO_Init+0x212>
 8001bdc:	2302      	movs	r3, #2
 8001bde:	e002      	b.n	8001be6 <HAL_GPIO_Init+0x212>
 8001be0:	2301      	movs	r3, #1
 8001be2:	e000      	b.n	8001be6 <HAL_GPIO_Init+0x212>
 8001be4:	2300      	movs	r3, #0
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	f002 0203 	and.w	r2, r2, #3
 8001bec:	0092      	lsls	r2, r2, #2
 8001bee:	4093      	lsls	r3, r2
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	4313      	orrs	r3, r2
 8001bf4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001bf6:	4937      	ldr	r1, [pc, #220]	@ (8001cd4 <HAL_GPIO_Init+0x300>)
 8001bf8:	697b      	ldr	r3, [r7, #20]
 8001bfa:	089b      	lsrs	r3, r3, #2
 8001bfc:	3302      	adds	r3, #2
 8001bfe:	693a      	ldr	r2, [r7, #16]
 8001c00:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001c04:	4b3b      	ldr	r3, [pc, #236]	@ (8001cf4 <HAL_GPIO_Init+0x320>)
 8001c06:	689b      	ldr	r3, [r3, #8]
 8001c08:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	43db      	mvns	r3, r3
 8001c0e:	693a      	ldr	r2, [r7, #16]
 8001c10:	4013      	ands	r3, r2
 8001c12:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001c14:	683b      	ldr	r3, [r7, #0]
 8001c16:	685b      	ldr	r3, [r3, #4]
 8001c18:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d003      	beq.n	8001c28 <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 8001c20:	693a      	ldr	r2, [r7, #16]
 8001c22:	68fb      	ldr	r3, [r7, #12]
 8001c24:	4313      	orrs	r3, r2
 8001c26:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001c28:	4a32      	ldr	r2, [pc, #200]	@ (8001cf4 <HAL_GPIO_Init+0x320>)
 8001c2a:	693b      	ldr	r3, [r7, #16]
 8001c2c:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001c2e:	4b31      	ldr	r3, [pc, #196]	@ (8001cf4 <HAL_GPIO_Init+0x320>)
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	43db      	mvns	r3, r3
 8001c38:	693a      	ldr	r2, [r7, #16]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	685b      	ldr	r3, [r3, #4]
 8001c42:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d003      	beq.n	8001c52 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 8001c4a:	693a      	ldr	r2, [r7, #16]
 8001c4c:	68fb      	ldr	r3, [r7, #12]
 8001c4e:	4313      	orrs	r3, r2
 8001c50:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001c52:	4a28      	ldr	r2, [pc, #160]	@ (8001cf4 <HAL_GPIO_Init+0x320>)
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001c58:	4b26      	ldr	r3, [pc, #152]	@ (8001cf4 <HAL_GPIO_Init+0x320>)
 8001c5a:	685b      	ldr	r3, [r3, #4]
 8001c5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	43db      	mvns	r3, r3
 8001c62:	693a      	ldr	r2, [r7, #16]
 8001c64:	4013      	ands	r3, r2
 8001c66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001c68:	683b      	ldr	r3, [r7, #0]
 8001c6a:	685b      	ldr	r3, [r3, #4]
 8001c6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c70:	2b00      	cmp	r3, #0
 8001c72:	d003      	beq.n	8001c7c <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	4313      	orrs	r3, r2
 8001c7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001c7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001cf4 <HAL_GPIO_Init+0x320>)
 8001c7e:	693b      	ldr	r3, [r7, #16]
 8001c80:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001c82:	4b1c      	ldr	r3, [pc, #112]	@ (8001cf4 <HAL_GPIO_Init+0x320>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	43db      	mvns	r3, r3
 8001c8c:	693a      	ldr	r2, [r7, #16]
 8001c8e:	4013      	ands	r3, r2
 8001c90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001c92:	683b      	ldr	r3, [r7, #0]
 8001c94:	685b      	ldr	r3, [r3, #4]
 8001c96:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d003      	beq.n	8001ca6 <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001c9e:	693a      	ldr	r2, [r7, #16]
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	4313      	orrs	r3, r2
 8001ca4:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001ca6:	4a13      	ldr	r2, [pc, #76]	@ (8001cf4 <HAL_GPIO_Init+0x320>)
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001cac:	697b      	ldr	r3, [r7, #20]
 8001cae:	3301      	adds	r3, #1
 8001cb0:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cb2:	683b      	ldr	r3, [r7, #0]
 8001cb4:	681a      	ldr	r2, [r3, #0]
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	fa22 f303 	lsr.w	r3, r2, r3
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f47f ae91 	bne.w	80019e4 <HAL_GPIO_Init+0x10>
  }
}
 8001cc2:	bf00      	nop
 8001cc4:	bf00      	nop
 8001cc6:	371c      	adds	r7, #28
 8001cc8:	46bd      	mov	sp, r7
 8001cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cce:	4770      	bx	lr
 8001cd0:	40021000 	.word	0x40021000
 8001cd4:	40010000 	.word	0x40010000
 8001cd8:	48000400 	.word	0x48000400
 8001cdc:	48000800 	.word	0x48000800
 8001ce0:	48000c00 	.word	0x48000c00
 8001ce4:	48001000 	.word	0x48001000
 8001ce8:	48001400 	.word	0x48001400
 8001cec:	48001800 	.word	0x48001800
 8001cf0:	48001c00 	.word	0x48001c00
 8001cf4:	40010400 	.word	0x40010400

08001cf8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cf8:	b480      	push	{r7}
 8001cfa:	b083      	sub	sp, #12
 8001cfc:	af00      	add	r7, sp, #0
 8001cfe:	6078      	str	r0, [r7, #4]
 8001d00:	460b      	mov	r3, r1
 8001d02:	807b      	strh	r3, [r7, #2]
 8001d04:	4613      	mov	r3, r2
 8001d06:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d08:	787b      	ldrb	r3, [r7, #1]
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d003      	beq.n	8001d16 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001d0e:	887a      	ldrh	r2, [r7, #2]
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001d14:	e002      	b.n	8001d1c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001d16:	887a      	ldrh	r2, [r7, #2]
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8001d1c:	bf00      	nop
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d2c:	4b0d      	ldr	r3, [pc, #52]	@ (8001d64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d34:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d38:	d102      	bne.n	8001d40 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 8001d3a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001d3e:	e00b      	b.n	8001d58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 8001d40:	4b08      	ldr	r3, [pc, #32]	@ (8001d64 <HAL_PWREx_GetVoltageRange+0x3c>)
 8001d42:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001d4a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001d4e:	d102      	bne.n	8001d56 <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 8001d50:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001d54:	e000      	b.n	8001d58 <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 8001d56:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d60:	4770      	bx	lr
 8001d62:	bf00      	nop
 8001d64:	40007000 	.word	0x40007000

08001d68 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001d68:	b480      	push	{r7}
 8001d6a:	b085      	sub	sp, #20
 8001d6c:	af00      	add	r7, sp, #0
 8001d6e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	2b00      	cmp	r3, #0
 8001d74:	d141      	bne.n	8001dfa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001d76:	4b4b      	ldr	r3, [pc, #300]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001d7e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001d82:	d131      	bne.n	8001de8 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001d84:	4b47      	ldr	r3, [pc, #284]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d86:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001d8a:	4a46      	ldr	r2, [pc, #280]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d8c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001d90:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001d94:	4b43      	ldr	r3, [pc, #268]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001d9c:	4a41      	ldr	r2, [pc, #260]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001d9e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001da2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001da4:	4b40      	ldr	r3, [pc, #256]	@ (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	2232      	movs	r2, #50	@ 0x32
 8001daa:	fb02 f303 	mul.w	r3, r2, r3
 8001dae:	4a3f      	ldr	r2, [pc, #252]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001db0:	fba2 2303 	umull	r2, r3, r2, r3
 8001db4:	0c9b      	lsrs	r3, r3, #18
 8001db6:	3301      	adds	r3, #1
 8001db8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dba:	e002      	b.n	8001dc2 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	3b01      	subs	r3, #1
 8001dc0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001dc2:	4b38      	ldr	r3, [pc, #224]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dc4:	695b      	ldr	r3, [r3, #20]
 8001dc6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dca:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001dce:	d102      	bne.n	8001dd6 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	2b00      	cmp	r3, #0
 8001dd4:	d1f2      	bne.n	8001dbc <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001dd6:	4b33      	ldr	r3, [pc, #204]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dd8:	695b      	ldr	r3, [r3, #20]
 8001dda:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001dde:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001de2:	d158      	bne.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001de4:	2303      	movs	r3, #3
 8001de6:	e057      	b.n	8001e98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001de8:	4b2e      	ldr	r3, [pc, #184]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001dea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001dee:	4a2d      	ldr	r2, [pc, #180]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001df0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001df4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001df8:	e04d      	b.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8001e00:	d141      	bne.n	8001e86 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8001e02:	4b28      	ldr	r3, [pc, #160]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8001e0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e0e:	d131      	bne.n	8001e74 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e10:	4b24      	ldr	r3, [pc, #144]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e12:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e16:	4a23      	ldr	r2, [pc, #140]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e18:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e1c:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8001e20:	4b20      	ldr	r3, [pc, #128]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e28:	4a1e      	ldr	r2, [pc, #120]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e2a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e2e:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8001e30:	4b1d      	ldr	r3, [pc, #116]	@ (8001ea8 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	2232      	movs	r2, #50	@ 0x32
 8001e36:	fb02 f303 	mul.w	r3, r2, r3
 8001e3a:	4a1c      	ldr	r2, [pc, #112]	@ (8001eac <HAL_PWREx_ControlVoltageScaling+0x144>)
 8001e3c:	fba2 2303 	umull	r2, r3, r2, r3
 8001e40:	0c9b      	lsrs	r3, r3, #18
 8001e42:	3301      	adds	r3, #1
 8001e44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e46:	e002      	b.n	8001e4e <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8001e48:	68fb      	ldr	r3, [r7, #12]
 8001e4a:	3b01      	subs	r3, #1
 8001e4c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8001e4e:	4b15      	ldr	r3, [pc, #84]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e50:	695b      	ldr	r3, [r3, #20]
 8001e52:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e5a:	d102      	bne.n	8001e62 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8001e5c:	68fb      	ldr	r3, [r7, #12]
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d1f2      	bne.n	8001e48 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001e62:	4b10      	ldr	r3, [pc, #64]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e64:	695b      	ldr	r3, [r3, #20]
 8001e66:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8001e6a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001e6e:	d112      	bne.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8001e70:	2303      	movs	r3, #3
 8001e72:	e011      	b.n	8001e98 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8001e74:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001e7a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e7c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e80:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8001e84:	e007      	b.n	8001e96 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e86:	4b07      	ldr	r3, [pc, #28]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8001e8e:	4a05      	ldr	r2, [pc, #20]	@ (8001ea4 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8001e90:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e94:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001e96:	2300      	movs	r3, #0
}
 8001e98:	4618      	mov	r0, r3
 8001e9a:	3714      	adds	r7, #20
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea2:	4770      	bx	lr
 8001ea4:	40007000 	.word	0x40007000
 8001ea8:	20040010 	.word	0x20040010
 8001eac:	431bde83 	.word	0x431bde83

08001eb0 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8001eb4:	4b05      	ldr	r3, [pc, #20]	@ (8001ecc <HAL_PWREx_EnableVddIO2+0x1c>)
 8001eb6:	685b      	ldr	r3, [r3, #4]
 8001eb8:	4a04      	ldr	r2, [pc, #16]	@ (8001ecc <HAL_PWREx_EnableVddIO2+0x1c>)
 8001eba:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001ebe:	6053      	str	r3, [r2, #4]
}
 8001ec0:	bf00      	nop
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	40007000 	.word	0x40007000

08001ed0 <HAL_RCC_OscConfig>:
  * @note   If HSE failed to start, HSE should be disabled before recalling
            HAL_RCC_OscConfig().
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001ed0:	b580      	push	{r7, lr}
 8001ed2:	b088      	sub	sp, #32
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d102      	bne.n	8001ee4 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ede:	2301      	movs	r3, #1
 8001ee0:	f000 bc08 	b.w	80026f4 <HAL_RCC_OscConfig+0x824>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001ee4:	4b96      	ldr	r3, [pc, #600]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001ee6:	689b      	ldr	r3, [r3, #8]
 8001ee8:	f003 030c 	and.w	r3, r3, #12
 8001eec:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001eee:	4b94      	ldr	r3, [pc, #592]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001ef0:	68db      	ldr	r3, [r3, #12]
 8001ef2:	f003 0303 	and.w	r3, r3, #3
 8001ef6:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	f003 0310 	and.w	r3, r3, #16
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	f000 80e4 	beq.w	80020ce <HAL_RCC_OscConfig+0x1fe>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d007      	beq.n	8001f1c <HAL_RCC_OscConfig+0x4c>
 8001f0c:	69bb      	ldr	r3, [r7, #24]
 8001f0e:	2b0c      	cmp	r3, #12
 8001f10:	f040 808b 	bne.w	800202a <HAL_RCC_OscConfig+0x15a>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8001f14:	697b      	ldr	r3, [r7, #20]
 8001f16:	2b01      	cmp	r3, #1
 8001f18:	f040 8087 	bne.w	800202a <HAL_RCC_OscConfig+0x15a>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001f1c:	4b88      	ldr	r3, [pc, #544]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 0302 	and.w	r3, r3, #2
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d005      	beq.n	8001f34 <HAL_RCC_OscConfig+0x64>
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	699b      	ldr	r3, [r3, #24]
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_OscConfig+0x64>
      {
        return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e3df      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6a1a      	ldr	r2, [r3, #32]
 8001f38:	4b81      	ldr	r3, [pc, #516]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	f003 0308 	and.w	r3, r3, #8
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d004      	beq.n	8001f4e <HAL_RCC_OscConfig+0x7e>
 8001f44:	4b7e      	ldr	r3, [pc, #504]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f4c:	e005      	b.n	8001f5a <HAL_RCC_OscConfig+0x8a>
 8001f4e:	4b7c      	ldr	r3, [pc, #496]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001f50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8001f54:	091b      	lsrs	r3, r3, #4
 8001f56:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d223      	bcs.n	8001fa6 <HAL_RCC_OscConfig+0xd6>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	6a1b      	ldr	r3, [r3, #32]
 8001f62:	4618      	mov	r0, r3
 8001f64:	f000 fd94 	bl	8002a90 <RCC_SetFlashLatencyFromMSIRange>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d001      	beq.n	8001f72 <HAL_RCC_OscConfig+0xa2>
          {
            return HAL_ERROR;
 8001f6e:	2301      	movs	r3, #1
 8001f70:	e3c0      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001f72:	4b73      	ldr	r3, [pc, #460]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a72      	ldr	r2, [pc, #456]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001f78:	f043 0308 	orr.w	r3, r3, #8
 8001f7c:	6013      	str	r3, [r2, #0]
 8001f7e:	4b70      	ldr	r3, [pc, #448]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6a1b      	ldr	r3, [r3, #32]
 8001f8a:	496d      	ldr	r1, [pc, #436]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001f90:	4b6b      	ldr	r3, [pc, #428]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001f92:	685b      	ldr	r3, [r3, #4]
 8001f94:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	69db      	ldr	r3, [r3, #28]
 8001f9c:	021b      	lsls	r3, r3, #8
 8001f9e:	4968      	ldr	r1, [pc, #416]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001fa0:	4313      	orrs	r3, r2
 8001fa2:	604b      	str	r3, [r1, #4]
 8001fa4:	e025      	b.n	8001ff2 <HAL_RCC_OscConfig+0x122>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001fa6:	4b66      	ldr	r3, [pc, #408]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	4a65      	ldr	r2, [pc, #404]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001fac:	f043 0308 	orr.w	r3, r3, #8
 8001fb0:	6013      	str	r3, [r2, #0]
 8001fb2:	4b63      	ldr	r3, [pc, #396]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	6a1b      	ldr	r3, [r3, #32]
 8001fbe:	4960      	ldr	r1, [pc, #384]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001fc0:	4313      	orrs	r3, r2
 8001fc2:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8001fc4:	4b5e      	ldr	r3, [pc, #376]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001fc6:	685b      	ldr	r3, [r3, #4]
 8001fc8:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	69db      	ldr	r3, [r3, #28]
 8001fd0:	021b      	lsls	r3, r3, #8
 8001fd2:	495b      	ldr	r1, [pc, #364]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001fd8:	69bb      	ldr	r3, [r7, #24]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	d109      	bne.n	8001ff2 <HAL_RCC_OscConfig+0x122>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	6a1b      	ldr	r3, [r3, #32]
 8001fe2:	4618      	mov	r0, r3
 8001fe4:	f000 fd54 	bl	8002a90 <RCC_SetFlashLatencyFromMSIRange>
 8001fe8:	4603      	mov	r3, r0
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d001      	beq.n	8001ff2 <HAL_RCC_OscConfig+0x122>
            {
              return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e380      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001ff2:	f000 fcc1 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b51      	ldr	r3, [pc, #324]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8001ffa:	689b      	ldr	r3, [r3, #8]
 8001ffc:	091b      	lsrs	r3, r3, #4
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	4950      	ldr	r1, [pc, #320]	@ (8002144 <HAL_RCC_OscConfig+0x274>)
 8002004:	5ccb      	ldrb	r3, [r1, r3]
 8002006:	f003 031f 	and.w	r3, r3, #31
 800200a:	fa22 f303 	lsr.w	r3, r2, r3
 800200e:	4a4e      	ldr	r2, [pc, #312]	@ (8002148 <HAL_RCC_OscConfig+0x278>)
 8002010:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8002012:	4b4e      	ldr	r3, [pc, #312]	@ (800214c <HAL_RCC_OscConfig+0x27c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	4618      	mov	r0, r3
 8002018:	f7ff fb76 	bl	8001708 <HAL_InitTick>
 800201c:	4603      	mov	r3, r0
 800201e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8002020:	7bfb      	ldrb	r3, [r7, #15]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d052      	beq.n	80020cc <HAL_RCC_OscConfig+0x1fc>
        {
          return status;
 8002026:	7bfb      	ldrb	r3, [r7, #15]
 8002028:	e364      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	699b      	ldr	r3, [r3, #24]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d032      	beq.n	8002098 <HAL_RCC_OscConfig+0x1c8>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8002032:	4b43      	ldr	r3, [pc, #268]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	4a42      	ldr	r2, [pc, #264]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002038:	f043 0301 	orr.w	r3, r3, #1
 800203c:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800203e:	f7ff fbb3 	bl	80017a8 <HAL_GetTick>
 8002042:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002044:	e008      	b.n	8002058 <HAL_RCC_OscConfig+0x188>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002046:	f7ff fbaf 	bl	80017a8 <HAL_GetTick>
 800204a:	4602      	mov	r2, r0
 800204c:	693b      	ldr	r3, [r7, #16]
 800204e:	1ad3      	subs	r3, r2, r3
 8002050:	2b02      	cmp	r3, #2
 8002052:	d901      	bls.n	8002058 <HAL_RCC_OscConfig+0x188>
          {
            return HAL_TIMEOUT;
 8002054:	2303      	movs	r3, #3
 8002056:	e34d      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002058:	4b39      	ldr	r3, [pc, #228]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	f003 0302 	and.w	r3, r3, #2
 8002060:	2b00      	cmp	r3, #0
 8002062:	d0f0      	beq.n	8002046 <HAL_RCC_OscConfig+0x176>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8002064:	4b36      	ldr	r3, [pc, #216]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a35      	ldr	r2, [pc, #212]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 800206a:	f043 0308 	orr.w	r3, r3, #8
 800206e:	6013      	str	r3, [r2, #0]
 8002070:	4b33      	ldr	r3, [pc, #204]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4930      	ldr	r1, [pc, #192]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 800207e:	4313      	orrs	r3, r2
 8002080:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002082:	4b2f      	ldr	r3, [pc, #188]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002084:	685b      	ldr	r3, [r3, #4]
 8002086:	f423 427f 	bic.w	r2, r3, #65280	@ 0xff00
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	69db      	ldr	r3, [r3, #28]
 800208e:	021b      	lsls	r3, r3, #8
 8002090:	492b      	ldr	r1, [pc, #172]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002092:	4313      	orrs	r3, r2
 8002094:	604b      	str	r3, [r1, #4]
 8002096:	e01a      	b.n	80020ce <HAL_RCC_OscConfig+0x1fe>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002098:	4b29      	ldr	r3, [pc, #164]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	4a28      	ldr	r2, [pc, #160]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 800209e:	f023 0301 	bic.w	r3, r3, #1
 80020a2:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80020a4:	f7ff fb80 	bl	80017a8 <HAL_GetTick>
 80020a8:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020aa:	e008      	b.n	80020be <HAL_RCC_OscConfig+0x1ee>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80020ac:	f7ff fb7c 	bl	80017a8 <HAL_GetTick>
 80020b0:	4602      	mov	r2, r0
 80020b2:	693b      	ldr	r3, [r7, #16]
 80020b4:	1ad3      	subs	r3, r2, r3
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d901      	bls.n	80020be <HAL_RCC_OscConfig+0x1ee>
          {
            return HAL_TIMEOUT;
 80020ba:	2303      	movs	r3, #3
 80020bc:	e31a      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80020be:	4b20      	ldr	r3, [pc, #128]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	f003 0302 	and.w	r3, r3, #2
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d1f0      	bne.n	80020ac <HAL_RCC_OscConfig+0x1dc>
 80020ca:	e000      	b.n	80020ce <HAL_RCC_OscConfig+0x1fe>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80020cc:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f003 0301 	and.w	r3, r3, #1
 80020d6:	2b00      	cmp	r3, #0
 80020d8:	d073      	beq.n	80021c2 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80020da:	69bb      	ldr	r3, [r7, #24]
 80020dc:	2b08      	cmp	r3, #8
 80020de:	d005      	beq.n	80020ec <HAL_RCC_OscConfig+0x21c>
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	2b0c      	cmp	r3, #12
 80020e4:	d10e      	bne.n	8002104 <HAL_RCC_OscConfig+0x234>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80020e6:	697b      	ldr	r3, [r7, #20]
 80020e8:	2b03      	cmp	r3, #3
 80020ea:	d10b      	bne.n	8002104 <HAL_RCC_OscConfig+0x234>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020ec:	4b14      	ldr	r3, [pc, #80]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d063      	beq.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	685b      	ldr	r3, [r3, #4]
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d15f      	bne.n	80021c0 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8002100:	2301      	movs	r3, #1
 8002102:	e2f7      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800210c:	d106      	bne.n	800211c <HAL_RCC_OscConfig+0x24c>
 800210e:	4b0c      	ldr	r3, [pc, #48]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	4a0b      	ldr	r2, [pc, #44]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002118:	6013      	str	r3, [r2, #0]
 800211a:	e025      	b.n	8002168 <HAL_RCC_OscConfig+0x298>
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	685b      	ldr	r3, [r3, #4]
 8002120:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002124:	d114      	bne.n	8002150 <HAL_RCC_OscConfig+0x280>
 8002126:	4b06      	ldr	r3, [pc, #24]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	4a05      	ldr	r2, [pc, #20]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 800212c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002130:	6013      	str	r3, [r2, #0]
 8002132:	4b03      	ldr	r3, [pc, #12]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4a02      	ldr	r2, [pc, #8]	@ (8002140 <HAL_RCC_OscConfig+0x270>)
 8002138:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800213c:	6013      	str	r3, [r2, #0]
 800213e:	e013      	b.n	8002168 <HAL_RCC_OscConfig+0x298>
 8002140:	40021000 	.word	0x40021000
 8002144:	0800337c 	.word	0x0800337c
 8002148:	20040010 	.word	0x20040010
 800214c:	20040014 	.word	0x20040014
 8002150:	4ba0      	ldr	r3, [pc, #640]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a9f      	ldr	r2, [pc, #636]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002156:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800215a:	6013      	str	r3, [r2, #0]
 800215c:	4b9d      	ldr	r3, [pc, #628]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a9c      	ldr	r2, [pc, #624]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002162:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002166:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	685b      	ldr	r3, [r3, #4]
 800216c:	2b00      	cmp	r3, #0
 800216e:	d013      	beq.n	8002198 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002170:	f7ff fb1a 	bl	80017a8 <HAL_GetTick>
 8002174:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002176:	e008      	b.n	800218a <HAL_RCC_OscConfig+0x2ba>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002178:	f7ff fb16 	bl	80017a8 <HAL_GetTick>
 800217c:	4602      	mov	r2, r0
 800217e:	693b      	ldr	r3, [r7, #16]
 8002180:	1ad3      	subs	r3, r2, r3
 8002182:	2b64      	cmp	r3, #100	@ 0x64
 8002184:	d901      	bls.n	800218a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8002186:	2303      	movs	r3, #3
 8002188:	e2b4      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002192:	2b00      	cmp	r3, #0
 8002194:	d0f0      	beq.n	8002178 <HAL_RCC_OscConfig+0x2a8>
 8002196:	e014      	b.n	80021c2 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002198:	f7ff fb06 	bl	80017a8 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800219e:	e008      	b.n	80021b2 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80021a0:	f7ff fb02 	bl	80017a8 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	2b64      	cmp	r3, #100	@ 0x64
 80021ac:	d901      	bls.n	80021b2 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80021ae:	2303      	movs	r3, #3
 80021b0:	e2a0      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80021b2:	4b88      	ldr	r3, [pc, #544]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d1f0      	bne.n	80021a0 <HAL_RCC_OscConfig+0x2d0>
 80021be:	e000      	b.n	80021c2 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80021c0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d060      	beq.n	8002290 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80021ce:	69bb      	ldr	r3, [r7, #24]
 80021d0:	2b04      	cmp	r3, #4
 80021d2:	d005      	beq.n	80021e0 <HAL_RCC_OscConfig+0x310>
 80021d4:	69bb      	ldr	r3, [r7, #24]
 80021d6:	2b0c      	cmp	r3, #12
 80021d8:	d119      	bne.n	800220e <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 80021da:	697b      	ldr	r3, [r7, #20]
 80021dc:	2b02      	cmp	r3, #2
 80021de:	d116      	bne.n	800220e <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80021e0:	4b7c      	ldr	r3, [pc, #496]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d005      	beq.n	80021f8 <HAL_RCC_OscConfig+0x328>
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	68db      	ldr	r3, [r3, #12]
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d101      	bne.n	80021f8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 80021f4:	2301      	movs	r3, #1
 80021f6:	e27d      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021f8:	4b76      	ldr	r3, [pc, #472]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	691b      	ldr	r3, [r3, #16]
 8002204:	061b      	lsls	r3, r3, #24
 8002206:	4973      	ldr	r1, [pc, #460]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002208:	4313      	orrs	r3, r2
 800220a:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800220c:	e040      	b.n	8002290 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	68db      	ldr	r3, [r3, #12]
 8002212:	2b00      	cmp	r3, #0
 8002214:	d023      	beq.n	800225e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002216:	4b6f      	ldr	r3, [pc, #444]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4a6e      	ldr	r2, [pc, #440]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 800221c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002220:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002222:	f7ff fac1 	bl	80017a8 <HAL_GetTick>
 8002226:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002228:	e008      	b.n	800223c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800222a:	f7ff fabd 	bl	80017a8 <HAL_GetTick>
 800222e:	4602      	mov	r2, r0
 8002230:	693b      	ldr	r3, [r7, #16]
 8002232:	1ad3      	subs	r3, r2, r3
 8002234:	2b02      	cmp	r3, #2
 8002236:	d901      	bls.n	800223c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8002238:	2303      	movs	r3, #3
 800223a:	e25b      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800223c:	4b65      	ldr	r3, [pc, #404]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002244:	2b00      	cmp	r3, #0
 8002246:	d0f0      	beq.n	800222a <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002248:	4b62      	ldr	r3, [pc, #392]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	691b      	ldr	r3, [r3, #16]
 8002254:	061b      	lsls	r3, r3, #24
 8002256:	495f      	ldr	r1, [pc, #380]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002258:	4313      	orrs	r3, r2
 800225a:	604b      	str	r3, [r1, #4]
 800225c:	e018      	b.n	8002290 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800225e:	4b5d      	ldr	r3, [pc, #372]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	4a5c      	ldr	r2, [pc, #368]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002264:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002268:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800226a:	f7ff fa9d 	bl	80017a8 <HAL_GetTick>
 800226e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002270:	e008      	b.n	8002284 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002272:	f7ff fa99 	bl	80017a8 <HAL_GetTick>
 8002276:	4602      	mov	r2, r0
 8002278:	693b      	ldr	r3, [r7, #16]
 800227a:	1ad3      	subs	r3, r2, r3
 800227c:	2b02      	cmp	r3, #2
 800227e:	d901      	bls.n	8002284 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8002280:	2303      	movs	r3, #3
 8002282:	e237      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002284:	4b53      	ldr	r3, [pc, #332]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800228c:	2b00      	cmp	r3, #0
 800228e:	d1f0      	bne.n	8002272 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f003 0308 	and.w	r3, r3, #8
 8002298:	2b00      	cmp	r3, #0
 800229a:	d03c      	beq.n	8002316 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01c      	beq.n	80022de <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80022a4:	4b4b      	ldr	r3, [pc, #300]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80022a6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022aa:	4a4a      	ldr	r2, [pc, #296]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80022ac:	f043 0301 	orr.w	r3, r3, #1
 80022b0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022b4:	f7ff fa78 	bl	80017a8 <HAL_GetTick>
 80022b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ba:	e008      	b.n	80022ce <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022bc:	f7ff fa74 	bl	80017a8 <HAL_GetTick>
 80022c0:	4602      	mov	r2, r0
 80022c2:	693b      	ldr	r3, [r7, #16]
 80022c4:	1ad3      	subs	r3, r2, r3
 80022c6:	2b02      	cmp	r3, #2
 80022c8:	d901      	bls.n	80022ce <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 80022ca:	2303      	movs	r3, #3
 80022cc:	e212      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80022ce:	4b41      	ldr	r3, [pc, #260]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80022d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d4:	f003 0302 	and.w	r3, r3, #2
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d0ef      	beq.n	80022bc <HAL_RCC_OscConfig+0x3ec>
 80022dc:	e01b      	b.n	8002316 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80022de:	4b3d      	ldr	r3, [pc, #244]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80022e0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022e4:	4a3b      	ldr	r2, [pc, #236]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80022e6:	f023 0301 	bic.w	r3, r3, #1
 80022ea:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80022ee:	f7ff fa5b 	bl	80017a8 <HAL_GetTick>
 80022f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80022f4:	e008      	b.n	8002308 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80022f6:	f7ff fa57 	bl	80017a8 <HAL_GetTick>
 80022fa:	4602      	mov	r2, r0
 80022fc:	693b      	ldr	r3, [r7, #16]
 80022fe:	1ad3      	subs	r3, r2, r3
 8002300:	2b02      	cmp	r3, #2
 8002302:	d901      	bls.n	8002308 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8002304:	2303      	movs	r3, #3
 8002306:	e1f5      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002308:	4b32      	ldr	r3, [pc, #200]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 800230a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800230e:	f003 0302 	and.w	r3, r3, #2
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1ef      	bne.n	80022f6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f003 0304 	and.w	r3, r3, #4
 800231e:	2b00      	cmp	r3, #0
 8002320:	f000 80a6 	beq.w	8002470 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002324:	2300      	movs	r3, #0
 8002326:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002328:	4b2a      	ldr	r3, [pc, #168]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 800232a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800232c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002330:	2b00      	cmp	r3, #0
 8002332:	d10d      	bne.n	8002350 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002334:	4b27      	ldr	r3, [pc, #156]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002336:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002338:	4a26      	ldr	r2, [pc, #152]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 800233a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800233e:	6593      	str	r3, [r2, #88]	@ 0x58
 8002340:	4b24      	ldr	r3, [pc, #144]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002342:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002344:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002348:	60bb      	str	r3, [r7, #8]
 800234a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800234c:	2301      	movs	r3, #1
 800234e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002350:	4b21      	ldr	r3, [pc, #132]	@ (80023d8 <HAL_RCC_OscConfig+0x508>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002358:	2b00      	cmp	r3, #0
 800235a:	d118      	bne.n	800238e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800235c:	4b1e      	ldr	r3, [pc, #120]	@ (80023d8 <HAL_RCC_OscConfig+0x508>)
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	4a1d      	ldr	r2, [pc, #116]	@ (80023d8 <HAL_RCC_OscConfig+0x508>)
 8002362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002366:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002368:	f7ff fa1e 	bl	80017a8 <HAL_GetTick>
 800236c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800236e:	e008      	b.n	8002382 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002370:	f7ff fa1a 	bl	80017a8 <HAL_GetTick>
 8002374:	4602      	mov	r2, r0
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	1ad3      	subs	r3, r2, r3
 800237a:	2b02      	cmp	r3, #2
 800237c:	d901      	bls.n	8002382 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 800237e:	2303      	movs	r3, #3
 8002380:	e1b8      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002382:	4b15      	ldr	r3, [pc, #84]	@ (80023d8 <HAL_RCC_OscConfig+0x508>)
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800238a:	2b00      	cmp	r3, #0
 800238c:	d0f0      	beq.n	8002370 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	689b      	ldr	r3, [r3, #8]
 8002392:	2b01      	cmp	r3, #1
 8002394:	d108      	bne.n	80023a8 <HAL_RCC_OscConfig+0x4d8>
 8002396:	4b0f      	ldr	r3, [pc, #60]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 8002398:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800239c:	4a0d      	ldr	r2, [pc, #52]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 800239e:	f043 0301 	orr.w	r3, r3, #1
 80023a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023a6:	e029      	b.n	80023fc <HAL_RCC_OscConfig+0x52c>
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	689b      	ldr	r3, [r3, #8]
 80023ac:	2b05      	cmp	r3, #5
 80023ae:	d115      	bne.n	80023dc <HAL_RCC_OscConfig+0x50c>
 80023b0:	4b08      	ldr	r3, [pc, #32]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80023b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023b6:	4a07      	ldr	r2, [pc, #28]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80023b8:	f043 0304 	orr.w	r3, r3, #4
 80023bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80023c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023c6:	4a03      	ldr	r2, [pc, #12]	@ (80023d4 <HAL_RCC_OscConfig+0x504>)
 80023c8:	f043 0301 	orr.w	r3, r3, #1
 80023cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023d0:	e014      	b.n	80023fc <HAL_RCC_OscConfig+0x52c>
 80023d2:	bf00      	nop
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40007000 	.word	0x40007000
 80023dc:	4b9d      	ldr	r3, [pc, #628]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80023de:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023e2:	4a9c      	ldr	r2, [pc, #624]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80023e4:	f023 0301 	bic.w	r3, r3, #1
 80023e8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80023ec:	4b99      	ldr	r3, [pc, #612]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80023ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80023f2:	4a98      	ldr	r2, [pc, #608]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80023f4:	f023 0304 	bic.w	r3, r3, #4
 80023f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	689b      	ldr	r3, [r3, #8]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d016      	beq.n	8002432 <HAL_RCC_OscConfig+0x562>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002404:	f7ff f9d0 	bl	80017a8 <HAL_GetTick>
 8002408:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800240a:	e00a      	b.n	8002422 <HAL_RCC_OscConfig+0x552>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800240c:	f7ff f9cc 	bl	80017a8 <HAL_GetTick>
 8002410:	4602      	mov	r2, r0
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	1ad3      	subs	r3, r2, r3
 8002416:	f241 3288 	movw	r2, #5000	@ 0x1388
 800241a:	4293      	cmp	r3, r2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x552>
        {
          return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e168      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002422:	4b8c      	ldr	r3, [pc, #560]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 8002424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002428:	f003 0302 	and.w	r3, r3, #2
 800242c:	2b00      	cmp	r3, #0
 800242e:	d0ed      	beq.n	800240c <HAL_RCC_OscConfig+0x53c>
 8002430:	e015      	b.n	800245e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002432:	f7ff f9b9 	bl	80017a8 <HAL_GetTick>
 8002436:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002438:	e00a      	b.n	8002450 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800243a:	f7ff f9b5 	bl	80017a8 <HAL_GetTick>
 800243e:	4602      	mov	r2, r0
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	1ad3      	subs	r3, r2, r3
 8002444:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002448:	4293      	cmp	r3, r2
 800244a:	d901      	bls.n	8002450 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 800244c:	2303      	movs	r3, #3
 800244e:	e151      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002450:	4b80      	ldr	r3, [pc, #512]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 8002452:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8002456:	f003 0302 	and.w	r3, r3, #2
 800245a:	2b00      	cmp	r3, #0
 800245c:	d1ed      	bne.n	800243a <HAL_RCC_OscConfig+0x56a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800245e:	7ffb      	ldrb	r3, [r7, #31]
 8002460:	2b01      	cmp	r3, #1
 8002462:	d105      	bne.n	8002470 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002464:	4b7b      	ldr	r3, [pc, #492]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 8002466:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002468:	4a7a      	ldr	r2, [pc, #488]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 800246a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800246e:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0320 	and.w	r3, r3, #32
 8002478:	2b00      	cmp	r3, #0
 800247a:	d03c      	beq.n	80024f6 <HAL_RCC_OscConfig+0x626>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002480:	2b00      	cmp	r3, #0
 8002482:	d01c      	beq.n	80024be <HAL_RCC_OscConfig+0x5ee>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002484:	4b73      	ldr	r3, [pc, #460]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 8002486:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800248a:	4a72      	ldr	r2, [pc, #456]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 800248c:	f043 0301 	orr.w	r3, r3, #1
 8002490:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002494:	f7ff f988 	bl	80017a8 <HAL_GetTick>
 8002498:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 800249a:	e008      	b.n	80024ae <HAL_RCC_OscConfig+0x5de>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800249c:	f7ff f984 	bl	80017a8 <HAL_GetTick>
 80024a0:	4602      	mov	r2, r0
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	1ad3      	subs	r3, r2, r3
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d901      	bls.n	80024ae <HAL_RCC_OscConfig+0x5de>
        {
          return HAL_TIMEOUT;
 80024aa:	2303      	movs	r3, #3
 80024ac:	e122      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80024ae:	4b69      	ldr	r3, [pc, #420]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80024b0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d0ef      	beq.n	800249c <HAL_RCC_OscConfig+0x5cc>
 80024bc:	e01b      	b.n	80024f6 <HAL_RCC_OscConfig+0x626>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80024be:	4b65      	ldr	r3, [pc, #404]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80024c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024c4:	4a63      	ldr	r2, [pc, #396]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80024c6:	f023 0301 	bic.w	r3, r3, #1
 80024ca:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024ce:	f7ff f96b 	bl	80017a8 <HAL_GetTick>
 80024d2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024d4:	e008      	b.n	80024e8 <HAL_RCC_OscConfig+0x618>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80024d6:	f7ff f967 	bl	80017a8 <HAL_GetTick>
 80024da:	4602      	mov	r2, r0
 80024dc:	693b      	ldr	r3, [r7, #16]
 80024de:	1ad3      	subs	r3, r2, r3
 80024e0:	2b02      	cmp	r3, #2
 80024e2:	d901      	bls.n	80024e8 <HAL_RCC_OscConfig+0x618>
        {
          return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e105      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80024e8:	4b5a      	ldr	r3, [pc, #360]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80024ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80024ee:	f003 0302 	and.w	r3, r3, #2
 80024f2:	2b00      	cmp	r3, #0
 80024f4:	d1ef      	bne.n	80024d6 <HAL_RCC_OscConfig+0x606>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	f000 80f9 	beq.w	80026f2 <HAL_RCC_OscConfig+0x822>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002504:	2b02      	cmp	r3, #2
 8002506:	f040 80cf 	bne.w	80026a8 <HAL_RCC_OscConfig+0x7d8>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 800250a:	4b52      	ldr	r3, [pc, #328]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 800250c:	68db      	ldr	r3, [r3, #12]
 800250e:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002510:	697b      	ldr	r3, [r7, #20]
 8002512:	f003 0203 	and.w	r2, r3, #3
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800251a:	429a      	cmp	r2, r3
 800251c:	d12c      	bne.n	8002578 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800251e:	697b      	ldr	r3, [r7, #20]
 8002520:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002528:	3b01      	subs	r3, #1
 800252a:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800252c:	429a      	cmp	r2, r3
 800252e:	d123      	bne.n	8002578 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002530:	697b      	ldr	r3, [r7, #20]
 8002532:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800253a:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800253c:	429a      	cmp	r2, r3
 800253e:	d11b      	bne.n	8002578 <HAL_RCC_OscConfig+0x6a8>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002540:	697b      	ldr	r3, [r7, #20]
 8002542:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800254a:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800254c:	429a      	cmp	r2, r3
 800254e:	d113      	bne.n	8002578 <HAL_RCC_OscConfig+0x6a8>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002550:	697b      	ldr	r3, [r7, #20]
 8002552:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800255a:	085b      	lsrs	r3, r3, #1
 800255c:	3b01      	subs	r3, #1
 800255e:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002560:	429a      	cmp	r2, r3
 8002562:	d109      	bne.n	8002578 <HAL_RCC_OscConfig+0x6a8>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002564:	697b      	ldr	r3, [r7, #20]
 8002566:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256e:	085b      	lsrs	r3, r3, #1
 8002570:	3b01      	subs	r3, #1
 8002572:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002574:	429a      	cmp	r2, r3
 8002576:	d071      	beq.n	800265c <HAL_RCC_OscConfig+0x78c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002578:	69bb      	ldr	r3, [r7, #24]
 800257a:	2b0c      	cmp	r3, #12
 800257c:	d068      	beq.n	8002650 <HAL_RCC_OscConfig+0x780>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 800257e:	4b35      	ldr	r3, [pc, #212]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8002586:	2b00      	cmp	r3, #0
 8002588:	d105      	bne.n	8002596 <HAL_RCC_OscConfig+0x6c6>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800258a:	4b32      	ldr	r3, [pc, #200]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002592:	2b00      	cmp	r3, #0
 8002594:	d001      	beq.n	800259a <HAL_RCC_OscConfig+0x6ca>
#endif
            )
          {
            return HAL_ERROR;
 8002596:	2301      	movs	r3, #1
 8002598:	e0ac      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 800259a:	4b2e      	ldr	r3, [pc, #184]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 800259c:	681b      	ldr	r3, [r3, #0]
 800259e:	4a2d      	ldr	r2, [pc, #180]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80025a0:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80025a4:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 80025a6:	f7ff f8ff 	bl	80017a8 <HAL_GetTick>
 80025aa:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025ac:	e008      	b.n	80025c0 <HAL_RCC_OscConfig+0x6f0>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025ae:	f7ff f8fb 	bl	80017a8 <HAL_GetTick>
 80025b2:	4602      	mov	r2, r0
 80025b4:	693b      	ldr	r3, [r7, #16]
 80025b6:	1ad3      	subs	r3, r2, r3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d901      	bls.n	80025c0 <HAL_RCC_OscConfig+0x6f0>
              {
                return HAL_TIMEOUT;
 80025bc:	2303      	movs	r3, #3
 80025be:	e099      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80025c0:	4b24      	ldr	r3, [pc, #144]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d1f0      	bne.n	80025ae <HAL_RCC_OscConfig+0x6de>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025cc:	4b21      	ldr	r3, [pc, #132]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 80025ce:	68da      	ldr	r2, [r3, #12]
 80025d0:	4b21      	ldr	r3, [pc, #132]	@ (8002658 <HAL_RCC_OscConfig+0x788>)
 80025d2:	4013      	ands	r3, r2
 80025d4:	687a      	ldr	r2, [r7, #4]
 80025d6:	6ad1      	ldr	r1, [r2, #44]	@ 0x2c
 80025d8:	687a      	ldr	r2, [r7, #4]
 80025da:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80025dc:	3a01      	subs	r2, #1
 80025de:	0112      	lsls	r2, r2, #4
 80025e0:	4311      	orrs	r1, r2
 80025e2:	687a      	ldr	r2, [r7, #4]
 80025e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80025e6:	0212      	lsls	r2, r2, #8
 80025e8:	4311      	orrs	r1, r2
 80025ea:	687a      	ldr	r2, [r7, #4]
 80025ec:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80025ee:	0852      	lsrs	r2, r2, #1
 80025f0:	3a01      	subs	r2, #1
 80025f2:	0552      	lsls	r2, r2, #21
 80025f4:	4311      	orrs	r1, r2
 80025f6:	687a      	ldr	r2, [r7, #4]
 80025f8:	6c12      	ldr	r2, [r2, #64]	@ 0x40
 80025fa:	0852      	lsrs	r2, r2, #1
 80025fc:	3a01      	subs	r2, #1
 80025fe:	0652      	lsls	r2, r2, #25
 8002600:	4311      	orrs	r1, r2
 8002602:	687a      	ldr	r2, [r7, #4]
 8002604:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8002606:	06d2      	lsls	r2, r2, #27
 8002608:	430a      	orrs	r2, r1
 800260a:	4912      	ldr	r1, [pc, #72]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 800260c:	4313      	orrs	r3, r2
 800260e:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002610:	4b10      	ldr	r3, [pc, #64]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0f      	ldr	r2, [pc, #60]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 8002616:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800261a:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800261c:	4b0d      	ldr	r3, [pc, #52]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	4a0c      	ldr	r2, [pc, #48]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 8002622:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002626:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002628:	f7ff f8be 	bl	80017a8 <HAL_GetTick>
 800262c:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800262e:	e008      	b.n	8002642 <HAL_RCC_OscConfig+0x772>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002630:	f7ff f8ba 	bl	80017a8 <HAL_GetTick>
 8002634:	4602      	mov	r2, r0
 8002636:	693b      	ldr	r3, [r7, #16]
 8002638:	1ad3      	subs	r3, r2, r3
 800263a:	2b02      	cmp	r3, #2
 800263c:	d901      	bls.n	8002642 <HAL_RCC_OscConfig+0x772>
              {
                return HAL_TIMEOUT;
 800263e:	2303      	movs	r3, #3
 8002640:	e058      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002642:	4b04      	ldr	r3, [pc, #16]	@ (8002654 <HAL_RCC_OscConfig+0x784>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800264a:	2b00      	cmp	r3, #0
 800264c:	d0f0      	beq.n	8002630 <HAL_RCC_OscConfig+0x760>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800264e:	e050      	b.n	80026f2 <HAL_RCC_OscConfig+0x822>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e04f      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
 8002654:	40021000 	.word	0x40021000
 8002658:	019d800c 	.word	0x019d800c
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800265c:	4b27      	ldr	r3, [pc, #156]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002664:	2b00      	cmp	r3, #0
 8002666:	d144      	bne.n	80026f2 <HAL_RCC_OscConfig+0x822>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002668:	4b24      	ldr	r3, [pc, #144]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	4a23      	ldr	r2, [pc, #140]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 800266e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002672:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002674:	4b21      	ldr	r3, [pc, #132]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	4a20      	ldr	r2, [pc, #128]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 800267a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800267e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002680:	f7ff f892 	bl	80017a8 <HAL_GetTick>
 8002684:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002686:	e008      	b.n	800269a <HAL_RCC_OscConfig+0x7ca>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002688:	f7ff f88e 	bl	80017a8 <HAL_GetTick>
 800268c:	4602      	mov	r2, r0
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	1ad3      	subs	r3, r2, r3
 8002692:	2b02      	cmp	r3, #2
 8002694:	d901      	bls.n	800269a <HAL_RCC_OscConfig+0x7ca>
            {
              return HAL_TIMEOUT;
 8002696:	2303      	movs	r3, #3
 8002698:	e02c      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800269a:	4b18      	ldr	r3, [pc, #96]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d0f0      	beq.n	8002688 <HAL_RCC_OscConfig+0x7b8>
 80026a6:	e024      	b.n	80026f2 <HAL_RCC_OscConfig+0x822>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 80026a8:	69bb      	ldr	r3, [r7, #24]
 80026aa:	2b0c      	cmp	r3, #12
 80026ac:	d01f      	beq.n	80026ee <HAL_RCC_OscConfig+0x81e>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80026ae:	4b13      	ldr	r3, [pc, #76]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4a12      	ldr	r2, [pc, #72]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 80026b4:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80026b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ba:	f7ff f875 	bl	80017a8 <HAL_GetTick>
 80026be:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026c0:	e008      	b.n	80026d4 <HAL_RCC_OscConfig+0x804>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80026c2:	f7ff f871 	bl	80017a8 <HAL_GetTick>
 80026c6:	4602      	mov	r2, r0
 80026c8:	693b      	ldr	r3, [r7, #16]
 80026ca:	1ad3      	subs	r3, r2, r3
 80026cc:	2b02      	cmp	r3, #2
 80026ce:	d901      	bls.n	80026d4 <HAL_RCC_OscConfig+0x804>
          {
            return HAL_TIMEOUT;
 80026d0:	2303      	movs	r3, #3
 80026d2:	e00f      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80026d4:	4b09      	ldr	r3, [pc, #36]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026dc:	2b00      	cmp	r3, #0
 80026de:	d1f0      	bne.n	80026c2 <HAL_RCC_OscConfig+0x7f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 80026e0:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 80026e2:	68da      	ldr	r2, [r3, #12]
 80026e4:	4905      	ldr	r1, [pc, #20]	@ (80026fc <HAL_RCC_OscConfig+0x82c>)
 80026e6:	4b06      	ldr	r3, [pc, #24]	@ (8002700 <HAL_RCC_OscConfig+0x830>)
 80026e8:	4013      	ands	r3, r2
 80026ea:	60cb      	str	r3, [r1, #12]
 80026ec:	e001      	b.n	80026f2 <HAL_RCC_OscConfig+0x822>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 80026ee:	2301      	movs	r3, #1
 80026f0:	e000      	b.n	80026f4 <HAL_RCC_OscConfig+0x824>
      }
    }
  }
  return HAL_OK;
 80026f2:	2300      	movs	r3, #0
}
 80026f4:	4618      	mov	r0, r3
 80026f6:	3720      	adds	r7, #32
 80026f8:	46bd      	mov	sp, r7
 80026fa:	bd80      	pop	{r7, pc}
 80026fc:	40021000 	.word	0x40021000
 8002700:	feeefffc 	.word	0xfeeefffc

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b086      	sub	sp, #24
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 800270e:	2300      	movs	r3, #0
 8002710:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e11d      	b.n	8002958 <HAL_RCC_ClockConfig+0x254>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b90      	ldr	r3, [pc, #576]	@ (8002960 <HAL_RCC_ClockConfig+0x25c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b8d      	ldr	r3, [pc, #564]	@ (8002960 <HAL_RCC_ClockConfig+0x25c>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 020f 	bic.w	r2, r3, #15
 8002732:	498b      	ldr	r1, [pc, #556]	@ (8002960 <HAL_RCC_ClockConfig+0x25c>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b89      	ldr	r3, [pc, #548]	@ (8002960 <HAL_RCC_ClockConfig+0x25c>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e105      	b.n	8002958 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d010      	beq.n	800277a <HAL_RCC_ClockConfig+0x76>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	689a      	ldr	r2, [r3, #8]
 800275c:	4b81      	ldr	r3, [pc, #516]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 800275e:	689b      	ldr	r3, [r3, #8]
 8002760:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002764:	429a      	cmp	r2, r3
 8002766:	d908      	bls.n	800277a <HAL_RCC_ClockConfig+0x76>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002768:	4b7e      	ldr	r3, [pc, #504]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	689b      	ldr	r3, [r3, #8]
 8002774:	497b      	ldr	r1, [pc, #492]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002776:	4313      	orrs	r3, r2
 8002778:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 0301 	and.w	r3, r3, #1
 8002782:	2b00      	cmp	r3, #0
 8002784:	d079      	beq.n	800287a <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	2b03      	cmp	r3, #3
 800278c:	d11e      	bne.n	80027cc <HAL_RCC_ClockConfig+0xc8>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800278e:	4b75      	ldr	r3, [pc, #468]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d101      	bne.n	800279e <HAL_RCC_ClockConfig+0x9a>
      {
        return HAL_ERROR;
 800279a:	2301      	movs	r3, #1
 800279c:	e0dc      	b.n	8002958 <HAL_RCC_ClockConfig+0x254>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 800279e:	f000 f9d1 	bl	8002b44 <RCC_GetSysClockFreqFromPLLSource>
 80027a2:	4603      	mov	r3, r0
 80027a4:	4a70      	ldr	r2, [pc, #448]	@ (8002968 <HAL_RCC_ClockConfig+0x264>)
 80027a6:	4293      	cmp	r3, r2
 80027a8:	d946      	bls.n	8002838 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 80027aa:	4b6e      	ldr	r3, [pc, #440]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 80027ac:	689b      	ldr	r3, [r3, #8]
 80027ae:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d140      	bne.n	8002838 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80027b6:	4b6b      	ldr	r3, [pc, #428]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 80027b8:	689b      	ldr	r3, [r3, #8]
 80027ba:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80027be:	4a69      	ldr	r2, [pc, #420]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 80027c0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027c4:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80027c6:	2380      	movs	r3, #128	@ 0x80
 80027c8:	617b      	str	r3, [r7, #20]
 80027ca:	e035      	b.n	8002838 <HAL_RCC_ClockConfig+0x134>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	2b02      	cmp	r3, #2
 80027d2:	d107      	bne.n	80027e4 <HAL_RCC_ClockConfig+0xe0>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80027d4:	4b63      	ldr	r3, [pc, #396]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d115      	bne.n	800280c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80027e0:	2301      	movs	r3, #1
 80027e2:	e0b9      	b.n	8002958 <HAL_RCC_ClockConfig+0x254>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	685b      	ldr	r3, [r3, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d107      	bne.n	80027fc <HAL_RCC_ClockConfig+0xf8>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80027ec:	4b5d      	ldr	r3, [pc, #372]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	f003 0302 	and.w	r3, r3, #2
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d109      	bne.n	800280c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e0ad      	b.n	8002958 <HAL_RCC_ClockConfig+0x254>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027fc:	4b59      	ldr	r3, [pc, #356]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002804:	2b00      	cmp	r3, #0
 8002806:	d101      	bne.n	800280c <HAL_RCC_ClockConfig+0x108>
        {
          return HAL_ERROR;
 8002808:	2301      	movs	r3, #1
 800280a:	e0a5      	b.n	8002958 <HAL_RCC_ClockConfig+0x254>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 800280c:	f000 f8b4 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 8002810:	4603      	mov	r3, r0
 8002812:	4a55      	ldr	r2, [pc, #340]	@ (8002968 <HAL_RCC_ClockConfig+0x264>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d90f      	bls.n	8002838 <HAL_RCC_ClockConfig+0x134>
      {
        /* If lowest HCLK prescaler, apply intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002818:	4b52      	ldr	r3, [pc, #328]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002820:	2b00      	cmp	r3, #0
 8002822:	d109      	bne.n	8002838 <HAL_RCC_ClockConfig+0x134>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002824:	4b4f      	ldr	r3, [pc, #316]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002826:	689b      	ldr	r3, [r3, #8]
 8002828:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800282c:	4a4d      	ldr	r2, [pc, #308]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 800282e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002832:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002834:	2380      	movs	r3, #128	@ 0x80
 8002836:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002838:	4b4a      	ldr	r3, [pc, #296]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f023 0203 	bic.w	r2, r3, #3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	685b      	ldr	r3, [r3, #4]
 8002844:	4947      	ldr	r1, [pc, #284]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002846:	4313      	orrs	r3, r2
 8002848:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800284a:	f7fe ffad 	bl	80017a8 <HAL_GetTick>
 800284e:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002850:	e00a      	b.n	8002868 <HAL_RCC_ClockConfig+0x164>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002852:	f7fe ffa9 	bl	80017a8 <HAL_GetTick>
 8002856:	4602      	mov	r2, r0
 8002858:	693b      	ldr	r3, [r7, #16]
 800285a:	1ad3      	subs	r3, r2, r3
 800285c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002860:	4293      	cmp	r3, r2
 8002862:	d901      	bls.n	8002868 <HAL_RCC_ClockConfig+0x164>
      {
        return HAL_TIMEOUT;
 8002864:	2303      	movs	r3, #3
 8002866:	e077      	b.n	8002958 <HAL_RCC_ClockConfig+0x254>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002868:	4b3e      	ldr	r3, [pc, #248]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f003 020c 	and.w	r2, r3, #12
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	685b      	ldr	r3, [r3, #4]
 8002874:	009b      	lsls	r3, r3, #2
 8002876:	429a      	cmp	r2, r3
 8002878:	d1eb      	bne.n	8002852 <HAL_RCC_ClockConfig+0x14e>
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /* Is intermediate HCLK prescaler 2 applied internally, resume with HCLK prescaler 1 */
  if(hpre == RCC_SYSCLK_DIV2)
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	2b80      	cmp	r3, #128	@ 0x80
 800287e:	d105      	bne.n	800288c <HAL_RCC_ClockConfig+0x188>
  {
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002880:	4b38      	ldr	r3, [pc, #224]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002882:	689b      	ldr	r3, [r3, #8]
 8002884:	4a37      	ldr	r2, [pc, #220]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002886:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800288a:	6093      	str	r3, [r2, #8]
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f003 0302 	and.w	r3, r3, #2
 8002894:	2b00      	cmp	r3, #0
 8002896:	d010      	beq.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	689a      	ldr	r2, [r3, #8]
 800289c:	4b31      	ldr	r3, [pc, #196]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80028a4:	429a      	cmp	r2, r3
 80028a6:	d208      	bcs.n	80028ba <HAL_RCC_ClockConfig+0x1b6>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80028a8:	4b2e      	ldr	r3, [pc, #184]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 80028aa:	689b      	ldr	r3, [r3, #8]
 80028ac:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	689b      	ldr	r3, [r3, #8]
 80028b4:	492b      	ldr	r1, [pc, #172]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 80028b6:	4313      	orrs	r3, r2
 80028b8:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028ba:	4b29      	ldr	r3, [pc, #164]	@ (8002960 <HAL_RCC_ClockConfig+0x25c>)
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 030f 	and.w	r3, r3, #15
 80028c2:	683a      	ldr	r2, [r7, #0]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d210      	bcs.n	80028ea <HAL_RCC_ClockConfig+0x1e6>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028c8:	4b25      	ldr	r3, [pc, #148]	@ (8002960 <HAL_RCC_ClockConfig+0x25c>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f023 020f 	bic.w	r2, r3, #15
 80028d0:	4923      	ldr	r1, [pc, #140]	@ (8002960 <HAL_RCC_ClockConfig+0x25c>)
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	4313      	orrs	r3, r2
 80028d6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80028d8:	4b21      	ldr	r3, [pc, #132]	@ (8002960 <HAL_RCC_ClockConfig+0x25c>)
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	683a      	ldr	r2, [r7, #0]
 80028e2:	429a      	cmp	r2, r3
 80028e4:	d001      	beq.n	80028ea <HAL_RCC_ClockConfig+0x1e6>
    {
      return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e036      	b.n	8002958 <HAL_RCC_ClockConfig+0x254>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 0304 	and.w	r3, r3, #4
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d008      	beq.n	8002908 <HAL_RCC_ClockConfig+0x204>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80028f6:	4b1b      	ldr	r3, [pc, #108]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 80028f8:	689b      	ldr	r3, [r3, #8]
 80028fa:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	68db      	ldr	r3, [r3, #12]
 8002902:	4918      	ldr	r1, [pc, #96]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002904:	4313      	orrs	r3, r2
 8002906:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f003 0308 	and.w	r3, r3, #8
 8002910:	2b00      	cmp	r3, #0
 8002912:	d009      	beq.n	8002928 <HAL_RCC_ClockConfig+0x224>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002916:	689b      	ldr	r3, [r3, #8]
 8002918:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	691b      	ldr	r3, [r3, #16]
 8002920:	00db      	lsls	r3, r3, #3
 8002922:	4910      	ldr	r1, [pc, #64]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002924:	4313      	orrs	r3, r2
 8002926:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002928:	f000 f826 	bl	8002978 <HAL_RCC_GetSysClockFreq>
 800292c:	4602      	mov	r2, r0
 800292e:	4b0d      	ldr	r3, [pc, #52]	@ (8002964 <HAL_RCC_ClockConfig+0x260>)
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	091b      	lsrs	r3, r3, #4
 8002934:	f003 030f 	and.w	r3, r3, #15
 8002938:	490c      	ldr	r1, [pc, #48]	@ (800296c <HAL_RCC_ClockConfig+0x268>)
 800293a:	5ccb      	ldrb	r3, [r1, r3]
 800293c:	f003 031f 	and.w	r3, r3, #31
 8002940:	fa22 f303 	lsr.w	r3, r2, r3
 8002944:	4a0a      	ldr	r2, [pc, #40]	@ (8002970 <HAL_RCC_ClockConfig+0x26c>)
 8002946:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002948:	4b0a      	ldr	r3, [pc, #40]	@ (8002974 <HAL_RCC_ClockConfig+0x270>)
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	4618      	mov	r0, r3
 800294e:	f7fe fedb 	bl	8001708 <HAL_InitTick>
 8002952:	4603      	mov	r3, r0
 8002954:	73fb      	strb	r3, [r7, #15]

  return status;
 8002956:	7bfb      	ldrb	r3, [r7, #15]
}
 8002958:	4618      	mov	r0, r3
 800295a:	3718      	adds	r7, #24
 800295c:	46bd      	mov	sp, r7
 800295e:	bd80      	pop	{r7, pc}
 8002960:	40022000 	.word	0x40022000
 8002964:	40021000 	.word	0x40021000
 8002968:	04c4b400 	.word	0x04c4b400
 800296c:	0800337c 	.word	0x0800337c
 8002970:	20040010 	.word	0x20040010
 8002974:	20040014 	.word	0x20040014

08002978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002978:	b480      	push	{r7}
 800297a:	b089      	sub	sp, #36	@ 0x24
 800297c:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
 8002982:	2300      	movs	r3, #0
 8002984:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002986:	4b3e      	ldr	r3, [pc, #248]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002988:	689b      	ldr	r3, [r3, #8]
 800298a:	f003 030c 	and.w	r3, r3, #12
 800298e:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002990:	4b3b      	ldr	r3, [pc, #236]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002992:	68db      	ldr	r3, [r3, #12]
 8002994:	f003 0303 	and.w	r3, r3, #3
 8002998:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_GetSysClockFreq+0x34>
 80029a0:	693b      	ldr	r3, [r7, #16]
 80029a2:	2b0c      	cmp	r3, #12
 80029a4:	d121      	bne.n	80029ea <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d11e      	bne.n	80029ea <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 80029ac:	4b34      	ldr	r3, [pc, #208]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d107      	bne.n	80029c8 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 80029b8:	4b31      	ldr	r3, [pc, #196]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80029be:	0a1b      	lsrs	r3, r3, #8
 80029c0:	f003 030f 	and.w	r3, r3, #15
 80029c4:	61fb      	str	r3, [r7, #28]
 80029c6:	e005      	b.n	80029d4 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80029c8:	4b2d      	ldr	r3, [pc, #180]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x108>)
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	091b      	lsrs	r3, r3, #4
 80029ce:	f003 030f 	and.w	r3, r3, #15
 80029d2:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80029d4:	4a2b      	ldr	r2, [pc, #172]	@ (8002a84 <HAL_RCC_GetSysClockFreq+0x10c>)
 80029d6:	69fb      	ldr	r3, [r7, #28]
 80029d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80029dc:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d10d      	bne.n	8002a00 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80029e4:	69fb      	ldr	r3, [r7, #28]
 80029e6:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80029e8:	e00a      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80029ea:	693b      	ldr	r3, [r7, #16]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d102      	bne.n	80029f6 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80029f0:	4b25      	ldr	r3, [pc, #148]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x110>)
 80029f2:	61bb      	str	r3, [r7, #24]
 80029f4:	e004      	b.n	8002a00 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80029f6:	693b      	ldr	r3, [r7, #16]
 80029f8:	2b08      	cmp	r3, #8
 80029fa:	d101      	bne.n	8002a00 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80029fc:	4b23      	ldr	r3, [pc, #140]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x114>)
 80029fe:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8002a00:	693b      	ldr	r3, [r7, #16]
 8002a02:	2b0c      	cmp	r3, #12
 8002a04:	d134      	bne.n	8002a70 <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002a06:	4b1e      	ldr	r3, [pc, #120]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a08:	68db      	ldr	r3, [r3, #12]
 8002a0a:	f003 0303 	and.w	r3, r3, #3
 8002a0e:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002a10:	68bb      	ldr	r3, [r7, #8]
 8002a12:	2b02      	cmp	r3, #2
 8002a14:	d003      	beq.n	8002a1e <HAL_RCC_GetSysClockFreq+0xa6>
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	2b03      	cmp	r3, #3
 8002a1a:	d003      	beq.n	8002a24 <HAL_RCC_GetSysClockFreq+0xac>
 8002a1c:	e005      	b.n	8002a2a <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8002a1e:	4b1a      	ldr	r3, [pc, #104]	@ (8002a88 <HAL_RCC_GetSysClockFreq+0x110>)
 8002a20:	617b      	str	r3, [r7, #20]
      break;
 8002a22:	e005      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8002a24:	4b19      	ldr	r3, [pc, #100]	@ (8002a8c <HAL_RCC_GetSysClockFreq+0x114>)
 8002a26:	617b      	str	r3, [r7, #20]
      break;
 8002a28:	e002      	b.n	8002a30 <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002a2a:	69fb      	ldr	r3, [r7, #28]
 8002a2c:	617b      	str	r3, [r7, #20]
      break;
 8002a2e:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002a30:	4b13      	ldr	r3, [pc, #76]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a32:	68db      	ldr	r3, [r3, #12]
 8002a34:	091b      	lsrs	r3, r3, #4
 8002a36:	f003 030f 	and.w	r3, r3, #15
 8002a3a:	3301      	adds	r3, #1
 8002a3c:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002a3e:	4b10      	ldr	r3, [pc, #64]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a40:	68db      	ldr	r3, [r3, #12]
 8002a42:	0a1b      	lsrs	r3, r3, #8
 8002a44:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002a48:	697a      	ldr	r2, [r7, #20]
 8002a4a:	fb03 f202 	mul.w	r2, r3, r2
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a54:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002a56:	4b0a      	ldr	r3, [pc, #40]	@ (8002a80 <HAL_RCC_GetSysClockFreq+0x108>)
 8002a58:	68db      	ldr	r3, [r3, #12]
 8002a5a:	0e5b      	lsrs	r3, r3, #25
 8002a5c:	f003 0303 	and.w	r3, r3, #3
 8002a60:	3301      	adds	r3, #1
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8002a66:	697a      	ldr	r2, [r7, #20]
 8002a68:	683b      	ldr	r3, [r7, #0]
 8002a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a6e:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002a70:	69bb      	ldr	r3, [r7, #24]
}
 8002a72:	4618      	mov	r0, r3
 8002a74:	3724      	adds	r7, #36	@ 0x24
 8002a76:	46bd      	mov	sp, r7
 8002a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7c:	4770      	bx	lr
 8002a7e:	bf00      	nop
 8002a80:	40021000 	.word	0x40021000
 8002a84:	0800338c 	.word	0x0800338c
 8002a88:	00f42400 	.word	0x00f42400
 8002a8c:	007a1200 	.word	0x007a1200

08002a90 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b086      	sub	sp, #24
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8002a98:	2300      	movs	r3, #0
 8002a9a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8002a9c:	4b27      	ldr	r3, [pc, #156]	@ (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002a9e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002aa0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d003      	beq.n	8002ab0 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8002aa8:	f7ff f93e 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 8002aac:	6178      	str	r0, [r7, #20]
 8002aae:	e014      	b.n	8002ada <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8002ab0:	4b22      	ldr	r3, [pc, #136]	@ (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ab2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ab4:	4a21      	ldr	r2, [pc, #132]	@ (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ab6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002aba:	6593      	str	r3, [r2, #88]	@ 0x58
 8002abc:	4b1f      	ldr	r3, [pc, #124]	@ (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ac4:	60fb      	str	r3, [r7, #12]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8002ac8:	f7ff f92e 	bl	8001d28 <HAL_PWREx_GetVoltageRange>
 8002acc:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002ace:	4b1b      	ldr	r3, [pc, #108]	@ (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ad0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ad2:	4a1a      	ldr	r2, [pc, #104]	@ (8002b3c <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8002ad4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ad8:	6593      	str	r3, [r2, #88]	@ 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002ae0:	d10b      	bne.n	8002afa <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2b80      	cmp	r3, #128	@ 0x80
 8002ae6:	d913      	bls.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2ba0      	cmp	r3, #160	@ 0xa0
 8002aec:	d902      	bls.n	8002af4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002aee:	2302      	movs	r3, #2
 8002af0:	613b      	str	r3, [r7, #16]
 8002af2:	e00d      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002af4:	2301      	movs	r3, #1
 8002af6:	613b      	str	r3, [r7, #16]
 8002af8:	e00a      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	2b7f      	cmp	r3, #127	@ 0x7f
 8002afe:	d902      	bls.n	8002b06 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 8002b00:	2302      	movs	r3, #2
 8002b02:	613b      	str	r3, [r7, #16]
 8002b04:	e004      	b.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	2b70      	cmp	r3, #112	@ 0x70
 8002b0a:	d101      	bne.n	8002b10 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002b0c:	2301      	movs	r3, #1
 8002b0e:	613b      	str	r3, [r7, #16]
      }
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002b10:	4b0b      	ldr	r3, [pc, #44]	@ (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f023 020f 	bic.w	r2, r3, #15
 8002b18:	4909      	ldr	r1, [pc, #36]	@ (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002b1a:	693b      	ldr	r3, [r7, #16]
 8002b1c:	4313      	orrs	r3, r2
 8002b1e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002b20:	4b07      	ldr	r3, [pc, #28]	@ (8002b40 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f003 030f 	and.w	r3, r3, #15
 8002b28:	693a      	ldr	r2, [r7, #16]
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	d001      	beq.n	8002b32 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e000      	b.n	8002b34 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 8002b32:	2300      	movs	r3, #0
}
 8002b34:	4618      	mov	r0, r3
 8002b36:	3718      	adds	r7, #24
 8002b38:	46bd      	mov	sp, r7
 8002b3a:	bd80      	pop	{r7, pc}
 8002b3c:	40021000 	.word	0x40021000
 8002b40:	40022000 	.word	0x40022000

08002b44 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8002b44:	b480      	push	{r7}
 8002b46:	b087      	sub	sp, #28
 8002b48:	af00      	add	r7, sp, #0
  uint32_t msirange, pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8002b4a:	4b2d      	ldr	r3, [pc, #180]	@ (8002c00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b4c:	68db      	ldr	r3, [r3, #12]
 8002b4e:	f003 0303 	and.w	r3, r3, #3
 8002b52:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	2b03      	cmp	r3, #3
 8002b58:	d00b      	beq.n	8002b72 <RCC_GetSysClockFreqFromPLLSource+0x2e>
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	2b03      	cmp	r3, #3
 8002b5e:	d825      	bhi.n	8002bac <RCC_GetSysClockFreqFromPLLSource+0x68>
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2b01      	cmp	r3, #1
 8002b64:	d008      	beq.n	8002b78 <RCC_GetSysClockFreqFromPLLSource+0x34>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	2b02      	cmp	r3, #2
 8002b6a:	d11f      	bne.n	8002bac <RCC_GetSysClockFreqFromPLLSource+0x68>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8002b6c:	4b25      	ldr	r3, [pc, #148]	@ (8002c04 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8002b6e:	613b      	str	r3, [r7, #16]
    break;
 8002b70:	e01f      	b.n	8002bb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8002b72:	4b25      	ldr	r3, [pc, #148]	@ (8002c08 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8002b74:	613b      	str	r3, [r7, #16]
    break;
 8002b76:	e01c      	b.n	8002bb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002b78:	4b21      	ldr	r3, [pc, #132]	@ (8002c00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0308 	and.w	r3, r3, #8
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d107      	bne.n	8002b94 <RCC_GetSysClockFreqFromPLLSource+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002b84:	4b1e      	ldr	r3, [pc, #120]	@ (8002c00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b86:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002b8a:	0a1b      	lsrs	r3, r3, #8
 8002b8c:	f003 030f 	and.w	r3, r3, #15
 8002b90:	617b      	str	r3, [r7, #20]
 8002b92:	e005      	b.n	8002ba0 <RCC_GetSysClockFreqFromPLLSource+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8002b94:	4b1a      	ldr	r3, [pc, #104]	@ (8002c00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	091b      	lsrs	r3, r3, #4
 8002b9a:	f003 030f 	and.w	r3, r3, #15
 8002b9e:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    pllvco = MSIRangeTable[msirange];
 8002ba0:	4a1a      	ldr	r2, [pc, #104]	@ (8002c0c <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8002ba2:	697b      	ldr	r3, [r7, #20]
 8002ba4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ba8:	613b      	str	r3, [r7, #16]
    break;
 8002baa:	e002      	b.n	8002bb2 <RCC_GetSysClockFreqFromPLLSource+0x6e>
  default:
    /* unexpected */
    pllvco = 0;
 8002bac:	2300      	movs	r3, #0
 8002bae:	613b      	str	r3, [r7, #16]
    break;
 8002bb0:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002bb2:	4b13      	ldr	r3, [pc, #76]	@ (8002c00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	091b      	lsrs	r3, r3, #4
 8002bb8:	f003 030f 	and.w	r3, r3, #15
 8002bbc:	3301      	adds	r3, #1
 8002bbe:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002bc0:	4b0f      	ldr	r3, [pc, #60]	@ (8002c00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	0a1b      	lsrs	r3, r3, #8
 8002bc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002bca:	693a      	ldr	r2, [r7, #16]
 8002bcc:	fb03 f202 	mul.w	r2, r3, r2
 8002bd0:	68bb      	ldr	r3, [r7, #8]
 8002bd2:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd6:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8002bd8:	4b09      	ldr	r3, [pc, #36]	@ (8002c00 <RCC_GetSysClockFreqFromPLLSource+0xbc>)
 8002bda:	68db      	ldr	r3, [r3, #12]
 8002bdc:	0e5b      	lsrs	r3, r3, #25
 8002bde:	f003 0303 	and.w	r3, r3, #3
 8002be2:	3301      	adds	r3, #1
 8002be4:	005b      	lsls	r3, r3, #1
 8002be6:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 8002be8:	693a      	ldr	r2, [r7, #16]
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bf0:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 8002bf2:	683b      	ldr	r3, [r7, #0]
}
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	371c      	adds	r7, #28
 8002bf8:	46bd      	mov	sp, r7
 8002bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bfe:	4770      	bx	lr
 8002c00:	40021000 	.word	0x40021000
 8002c04:	00f42400 	.word	0x00f42400
 8002c08:	007a1200 	.word	0x007a1200
 8002c0c:	0800338c 	.word	0x0800338c

08002c10 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002c10:	b580      	push	{r7, lr}
 8002c12:	b084      	sub	sp, #16
 8002c14:	af00      	add	r7, sp, #0
 8002c16:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d101      	bne.n	8002c22 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c1e:	2301      	movs	r3, #1
 8002c20:	e095      	b.n	8002d4e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d108      	bne.n	8002c3c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	685b      	ldr	r3, [r3, #4]
 8002c2e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c32:	d009      	beq.n	8002c48 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	61da      	str	r2, [r3, #28]
 8002c3a:	e005      	b.n	8002c48 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	2200      	movs	r2, #0
 8002c40:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	2200      	movs	r2, #0
 8002c46:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	2200      	movs	r2, #0
 8002c4c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002c54:	b2db      	uxtb	r3, r3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d106      	bne.n	8002c68 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2200      	movs	r2, #0
 8002c5e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fc8a 	bl	800157c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	2202      	movs	r2, #2
 8002c6c:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c7e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002c88:	d902      	bls.n	8002c90 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
 8002c8e:	e002      	b.n	8002c96 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8002c90:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002c94:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	68db      	ldr	r3, [r3, #12]
 8002c9a:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8002c9e:	d007      	beq.n	8002cb0 <HAL_SPI_Init+0xa0>
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002ca8:	d002      	beq.n	8002cb0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	685b      	ldr	r3, [r3, #4]
 8002cb4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	689b      	ldr	r3, [r3, #8]
 8002cbc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002cc0:	431a      	orrs	r2, r3
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	691b      	ldr	r3, [r3, #16]
 8002cc6:	f003 0302 	and.w	r3, r3, #2
 8002cca:	431a      	orrs	r2, r3
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	695b      	ldr	r3, [r3, #20]
 8002cd0:	f003 0301 	and.w	r3, r3, #1
 8002cd4:	431a      	orrs	r2, r3
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	699b      	ldr	r3, [r3, #24]
 8002cda:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002cde:	431a      	orrs	r2, r3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	69db      	ldr	r3, [r3, #28]
 8002ce4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002ce8:	431a      	orrs	r2, r3
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6a1b      	ldr	r3, [r3, #32]
 8002cee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cf2:	ea42 0103 	orr.w	r1, r2, r3
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cfa:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	0c1b      	lsrs	r3, r3, #16
 8002d0c:	f003 0204 	and.w	r2, r3, #4
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d14:	f003 0310 	and.w	r3, r3, #16
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002d1e:	f003 0308 	and.w	r3, r3, #8
 8002d22:	431a      	orrs	r2, r3
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	68db      	ldr	r3, [r3, #12]
 8002d28:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8002d2c:	ea42 0103 	orr.w	r1, r2, r3
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	430a      	orrs	r2, r1
 8002d3c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	2200      	movs	r2, #0
 8002d42:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	2201      	movs	r2, #1
 8002d48:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3710      	adds	r7, #16
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}

08002d56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002d56:	b580      	push	{r7, lr}
 8002d58:	b088      	sub	sp, #32
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	60f8      	str	r0, [r7, #12]
 8002d5e:	60b9      	str	r1, [r7, #8]
 8002d60:	603b      	str	r3, [r7, #0]
 8002d62:	4613      	mov	r3, r2
 8002d64:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002d66:	f7fe fd1f 	bl	80017a8 <HAL_GetTick>
 8002d6a:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002d6c:	88fb      	ldrh	r3, [r7, #6]
 8002d6e:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	2b01      	cmp	r3, #1
 8002d7a:	d001      	beq.n	8002d80 <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002d7c:	2302      	movs	r3, #2
 8002d7e:	e15c      	b.n	800303a <HAL_SPI_Transmit+0x2e4>
  }

  if ((pData == NULL) || (Size == 0U))
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d002      	beq.n	8002d8c <HAL_SPI_Transmit+0x36>
 8002d86:	88fb      	ldrh	r3, [r7, #6]
 8002d88:	2b00      	cmp	r3, #0
 8002d8a:	d101      	bne.n	8002d90 <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002d8c:	2301      	movs	r3, #1
 8002d8e:	e154      	b.n	800303a <HAL_SPI_Transmit+0x2e4>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	f893 305c 	ldrb.w	r3, [r3, #92]	@ 0x5c
 8002d96:	2b01      	cmp	r3, #1
 8002d98:	d101      	bne.n	8002d9e <HAL_SPI_Transmit+0x48>
 8002d9a:	2302      	movs	r3, #2
 8002d9c:	e14d      	b.n	800303a <HAL_SPI_Transmit+0x2e4>
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	2201      	movs	r2, #1
 8002da2:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	2203      	movs	r2, #3
 8002daa:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	2200      	movs	r2, #0
 8002db2:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	68ba      	ldr	r2, [r7, #8]
 8002db8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->TxXferSize  = Size;
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	88fa      	ldrh	r2, [r7, #6]
 8002dbe:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->TxXferCount = Size;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	88fa      	ldrh	r2, [r7, #6]
 8002dc4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	2200      	movs	r2, #0
 8002dca:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->RxXferSize  = 0U;
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
  hspi->RxXferCount = 0U;
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	f8a3 2046 	strh.w	r2, [r3, #70]	@ 0x46
  hspi->TxISR       = NULL;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	2200      	movs	r2, #0
 8002de0:	651a      	str	r2, [r3, #80]	@ 0x50
  hspi->RxISR       = NULL;
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	2200      	movs	r2, #0
 8002de6:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	689b      	ldr	r3, [r3, #8]
 8002dec:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002df0:	d10f      	bne.n	8002e12 <HAL_SPI_Transmit+0xbc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e00:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e10:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e1c:	2b40      	cmp	r3, #64	@ 0x40
 8002e1e:	d007      	beq.n	8002e30 <HAL_SPI_Transmit+0xda>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	68fb      	ldr	r3, [r7, #12]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002e2e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8002e38:	d952      	bls.n	8002ee0 <HAL_SPI_Transmit+0x18a>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d002      	beq.n	8002e48 <HAL_SPI_Transmit+0xf2>
 8002e42:	8b7b      	ldrh	r3, [r7, #26]
 8002e44:	2b01      	cmp	r3, #1
 8002e46:	d145      	bne.n	8002ed4 <HAL_SPI_Transmit+0x17e>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e4c:	881a      	ldrh	r2, [r3, #0]
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e58:	1c9a      	adds	r2, r3, #2
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	639a      	str	r2, [r3, #56]	@ 0x38
      hspi->TxXferCount--;
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e62:	b29b      	uxth	r3, r3
 8002e64:	3b01      	subs	r3, #1
 8002e66:	b29a      	uxth	r2, r3
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	87da      	strh	r2, [r3, #62]	@ 0x3e
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002e6c:	e032      	b.n	8002ed4 <HAL_SPI_Transmit+0x17e>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d112      	bne.n	8002ea2 <HAL_SPI_Transmit+0x14c>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e80:	881a      	ldrh	r2, [r3, #0]
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e8c:	1c9a      	adds	r2, r3, #2
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002ea0:	e018      	b.n	8002ed4 <HAL_SPI_Transmit+0x17e>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002ea2:	f7fe fc81 	bl	80017a8 <HAL_GetTick>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	69fb      	ldr	r3, [r7, #28]
 8002eaa:	1ad3      	subs	r3, r2, r3
 8002eac:	683a      	ldr	r2, [r7, #0]
 8002eae:	429a      	cmp	r2, r3
 8002eb0:	d803      	bhi.n	8002eba <HAL_SPI_Transmit+0x164>
 8002eb2:	683b      	ldr	r3, [r7, #0]
 8002eb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002eb8:	d102      	bne.n	8002ec0 <HAL_SPI_Transmit+0x16a>
 8002eba:	683b      	ldr	r3, [r7, #0]
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d109      	bne.n	8002ed4 <HAL_SPI_Transmit+0x17e>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	2201      	movs	r2, #1
 8002ec4:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002ed0:	2303      	movs	r3, #3
 8002ed2:	e0b2      	b.n	800303a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ed8:	b29b      	uxth	r3, r3
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d1c7      	bne.n	8002e6e <HAL_SPI_Transmit+0x118>
 8002ede:	e083      	b.n	8002fe8 <HAL_SPI_Transmit+0x292>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	685b      	ldr	r3, [r3, #4]
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Transmit+0x198>
 8002ee8:	8b7b      	ldrh	r3, [r7, #26]
 8002eea:	2b01      	cmp	r3, #1
 8002eec:	d177      	bne.n	8002fde <HAL_SPI_Transmit+0x288>
    {
      if (hspi->TxXferCount > 1U)
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ef2:	b29b      	uxth	r3, r3
 8002ef4:	2b01      	cmp	r3, #1
 8002ef6:	d912      	bls.n	8002f1e <HAL_SPI_Transmit+0x1c8>
      {
        /* write on the data register in packing mode */
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002efc:	881a      	ldrh	r2, [r3, #0]
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f04:	68fb      	ldr	r3, [r7, #12]
 8002f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f08:	1c9a      	adds	r2, r3, #2
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount -= 2U;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f12:	b29b      	uxth	r3, r3
 8002f14:	3b02      	subs	r3, #2
 8002f16:	b29a      	uxth	r2, r3
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f1c:	e05f      	b.n	8002fde <HAL_SPI_Transmit+0x288>
      }
      else
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f22:	68fb      	ldr	r3, [r7, #12]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	330c      	adds	r3, #12
 8002f28:	7812      	ldrb	r2, [r2, #0]
 8002f2a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr ++;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f30:	1c5a      	adds	r2, r3, #1
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->TxXferCount--;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f3a:	b29b      	uxth	r3, r3
 8002f3c:	3b01      	subs	r3, #1
 8002f3e:	b29a      	uxth	r2, r3
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	87da      	strh	r2, [r3, #62]	@ 0x3e
      }
    }
    while (hspi->TxXferCount > 0U)
 8002f44:	e04b      	b.n	8002fde <HAL_SPI_Transmit+0x288>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	689b      	ldr	r3, [r3, #8]
 8002f4c:	f003 0302 	and.w	r3, r3, #2
 8002f50:	2b02      	cmp	r3, #2
 8002f52:	d12b      	bne.n	8002fac <HAL_SPI_Transmit+0x256>
      {
        if (hspi->TxXferCount > 1U)
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f58:	b29b      	uxth	r3, r3
 8002f5a:	2b01      	cmp	r3, #1
 8002f5c:	d912      	bls.n	8002f84 <HAL_SPI_Transmit+0x22e>
        {
          /* write on the data register in packing mode */
          hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f62:	881a      	ldrh	r2, [r3, #0]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	60da      	str	r2, [r3, #12]
          hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f6e:	1c9a      	adds	r2, r3, #2
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount -= 2U;
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002f78:	b29b      	uxth	r3, r3
 8002f7a:	3b02      	subs	r3, #2
 8002f7c:	b29a      	uxth	r2, r3
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002f82:	e02c      	b.n	8002fde <HAL_SPI_Transmit+0x288>
        }
        else
        {
          *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	330c      	adds	r3, #12
 8002f8e:	7812      	ldrb	r2, [r2, #0]
 8002f90:	701a      	strb	r2, [r3, #0]
          hspi->pTxBuffPtr++;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002f96:	1c5a      	adds	r2, r3, #1
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	639a      	str	r2, [r3, #56]	@ 0x38
          hspi->TxXferCount--;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fa0:	b29b      	uxth	r3, r3
 8002fa2:	3b01      	subs	r3, #1
 8002fa4:	b29a      	uxth	r2, r3
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002faa:	e018      	b.n	8002fde <HAL_SPI_Transmit+0x288>
        }
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fac:	f7fe fbfc 	bl	80017a8 <HAL_GetTick>
 8002fb0:	4602      	mov	r2, r0
 8002fb2:	69fb      	ldr	r3, [r7, #28]
 8002fb4:	1ad3      	subs	r3, r2, r3
 8002fb6:	683a      	ldr	r2, [r7, #0]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d803      	bhi.n	8002fc4 <HAL_SPI_Transmit+0x26e>
 8002fbc:	683b      	ldr	r3, [r7, #0]
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc2:	d102      	bne.n	8002fca <HAL_SPI_Transmit+0x274>
 8002fc4:	683b      	ldr	r3, [r7, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d109      	bne.n	8002fde <HAL_SPI_Transmit+0x288>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
          __HAL_UNLOCK(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c
          return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e02d      	b.n	800303a <HAL_SPI_Transmit+0x2e4>
    while (hspi->TxXferCount > 0U)
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002fe2:	b29b      	uxth	r3, r3
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1ae      	bne.n	8002f46 <HAL_SPI_Transmit+0x1f0>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002fe8:	69fa      	ldr	r2, [r7, #28]
 8002fea:	6839      	ldr	r1, [r7, #0]
 8002fec:	68f8      	ldr	r0, [r7, #12]
 8002fee:	f000 f947 	bl	8003280 <SPI_EndRxTxTransaction>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d002      	beq.n	8002ffe <HAL_SPI_Transmit+0x2a8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	2220      	movs	r2, #32
 8002ffc:	661a      	str	r2, [r3, #96]	@ 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d10a      	bne.n	800301c <HAL_SPI_Transmit+0x2c6>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	617b      	str	r3, [r7, #20]
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	617b      	str	r3, [r7, #20]
 800301a:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	2201      	movs	r2, #1
 8003020:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	2200      	movs	r2, #0
 8003028:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800302c:	68fb      	ldr	r3, [r7, #12]
 800302e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003030:	2b00      	cmp	r3, #0
 8003032:	d001      	beq.n	8003038 <HAL_SPI_Transmit+0x2e2>
  {
    return HAL_ERROR;
 8003034:	2301      	movs	r3, #1
 8003036:	e000      	b.n	800303a <HAL_SPI_Transmit+0x2e4>
  }
  else
  {
    return HAL_OK;
 8003038:	2300      	movs	r3, #0
  }
}
 800303a:	4618      	mov	r0, r3
 800303c:	3720      	adds	r7, #32
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
	...

08003044 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003044:	b580      	push	{r7, lr}
 8003046:	b088      	sub	sp, #32
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	60b9      	str	r1, [r7, #8]
 800304e:	603b      	str	r3, [r7, #0]
 8003050:	4613      	mov	r3, r2
 8003052:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003054:	f7fe fba8 	bl	80017a8 <HAL_GetTick>
 8003058:	4602      	mov	r2, r0
 800305a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800305c:	1a9b      	subs	r3, r3, r2
 800305e:	683a      	ldr	r2, [r7, #0]
 8003060:	4413      	add	r3, r2
 8003062:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003064:	f7fe fba0 	bl	80017a8 <HAL_GetTick>
 8003068:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800306a:	4b39      	ldr	r3, [pc, #228]	@ (8003150 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	015b      	lsls	r3, r3, #5
 8003070:	0d1b      	lsrs	r3, r3, #20
 8003072:	69fa      	ldr	r2, [r7, #28]
 8003074:	fb02 f303 	mul.w	r3, r2, r3
 8003078:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800307a:	e054      	b.n	8003126 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800307c:	683b      	ldr	r3, [r7, #0]
 800307e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003082:	d050      	beq.n	8003126 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003084:	f7fe fb90 	bl	80017a8 <HAL_GetTick>
 8003088:	4602      	mov	r2, r0
 800308a:	69bb      	ldr	r3, [r7, #24]
 800308c:	1ad3      	subs	r3, r2, r3
 800308e:	69fa      	ldr	r2, [r7, #28]
 8003090:	429a      	cmp	r2, r3
 8003092:	d902      	bls.n	800309a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003094:	69fb      	ldr	r3, [r7, #28]
 8003096:	2b00      	cmp	r3, #0
 8003098:	d13d      	bne.n	8003116 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	685a      	ldr	r2, [r3, #4]
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80030a8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	685b      	ldr	r3, [r3, #4]
 80030ae:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80030b2:	d111      	bne.n	80030d8 <SPI_WaitFlagStateUntilTimeout+0x94>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80030bc:	d004      	beq.n	80030c8 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	689b      	ldr	r3, [r3, #8]
 80030c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80030c6:	d107      	bne.n	80030d8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	681a      	ldr	r2, [r3, #0]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80030d6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80030dc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80030e0:	d10f      	bne.n	8003102 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	681a      	ldr	r2, [r3, #0]
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80030f0:	601a      	str	r2, [r3, #0]
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	681a      	ldr	r2, [r3, #0]
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003100:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2201      	movs	r2, #1
 8003106:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800310a:	68fb      	ldr	r3, [r7, #12]
 800310c:	2200      	movs	r2, #0
 800310e:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e017      	b.n	8003146 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003116:	697b      	ldr	r3, [r7, #20]
 8003118:	2b00      	cmp	r3, #0
 800311a:	d101      	bne.n	8003120 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800311c:	2300      	movs	r3, #0
 800311e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003120:	697b      	ldr	r3, [r7, #20]
 8003122:	3b01      	subs	r3, #1
 8003124:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	689a      	ldr	r2, [r3, #8]
 800312c:	68bb      	ldr	r3, [r7, #8]
 800312e:	4013      	ands	r3, r2
 8003130:	68ba      	ldr	r2, [r7, #8]
 8003132:	429a      	cmp	r2, r3
 8003134:	bf0c      	ite	eq
 8003136:	2301      	moveq	r3, #1
 8003138:	2300      	movne	r3, #0
 800313a:	b2db      	uxtb	r3, r3
 800313c:	461a      	mov	r2, r3
 800313e:	79fb      	ldrb	r3, [r7, #7]
 8003140:	429a      	cmp	r2, r3
 8003142:	d19b      	bne.n	800307c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003144:	2300      	movs	r3, #0
}
 8003146:	4618      	mov	r0, r3
 8003148:	3720      	adds	r7, #32
 800314a:	46bd      	mov	sp, r7
 800314c:	bd80      	pop	{r7, pc}
 800314e:	bf00      	nop
 8003150:	20040010 	.word	0x20040010

08003154 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b08a      	sub	sp, #40	@ 0x28
 8003158:	af00      	add	r7, sp, #0
 800315a:	60f8      	str	r0, [r7, #12]
 800315c:	60b9      	str	r1, [r7, #8]
 800315e:	607a      	str	r2, [r7, #4]
 8003160:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO const uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 8003162:	2300      	movs	r3, #0
 8003164:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 8003166:	f7fe fb1f 	bl	80017a8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800316e:	1a9b      	subs	r3, r3, r2
 8003170:	683a      	ldr	r2, [r7, #0]
 8003172:	4413      	add	r3, r2
 8003174:	627b      	str	r3, [r7, #36]	@ 0x24
  tmp_tickstart = HAL_GetTick();
 8003176:	f7fe fb17 	bl	80017a8 <HAL_GetTick>
 800317a:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	330c      	adds	r3, #12
 8003182:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 8003184:	4b3d      	ldr	r3, [pc, #244]	@ (800327c <SPI_WaitFifoStateUntilTimeout+0x128>)
 8003186:	681a      	ldr	r2, [r3, #0]
 8003188:	4613      	mov	r3, r2
 800318a:	009b      	lsls	r3, r3, #2
 800318c:	4413      	add	r3, r2
 800318e:	00da      	lsls	r2, r3, #3
 8003190:	1ad3      	subs	r3, r2, r3
 8003192:	0d1b      	lsrs	r3, r3, #20
 8003194:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003196:	fb02 f303 	mul.w	r3, r2, r3
 800319a:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800319c:	e060      	b.n	8003260 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800319e:	68bb      	ldr	r3, [r7, #8]
 80031a0:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80031a4:	d107      	bne.n	80031b6 <SPI_WaitFifoStateUntilTimeout+0x62>
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d104      	bne.n	80031b6 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 80031ac:	69fb      	ldr	r3, [r7, #28]
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 80031b4:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 80031b6:	683b      	ldr	r3, [r7, #0]
 80031b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031bc:	d050      	beq.n	8003260 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80031be:	f7fe faf3 	bl	80017a8 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	6a3b      	ldr	r3, [r7, #32]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031ca:	429a      	cmp	r2, r3
 80031cc:	d902      	bls.n	80031d4 <SPI_WaitFifoStateUntilTimeout+0x80>
 80031ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d13d      	bne.n	8003250 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	68fb      	ldr	r3, [r7, #12]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 80031e2:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80031ec:	d111      	bne.n	8003212 <SPI_WaitFifoStateUntilTimeout+0xbe>
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	689b      	ldr	r3, [r3, #8]
 80031f2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80031f6:	d004      	beq.n	8003202 <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80031f8:	68fb      	ldr	r3, [r7, #12]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003200:	d107      	bne.n	8003212 <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	681a      	ldr	r2, [r3, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003210:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003212:	68fb      	ldr	r3, [r7, #12]
 8003214:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003216:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800321a:	d10f      	bne.n	800323c <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800321c:	68fb      	ldr	r3, [r7, #12]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	681a      	ldr	r2, [r3, #0]
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800322a:	601a      	str	r2, [r3, #0]
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	681a      	ldr	r2, [r3, #0]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800323a:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

        return HAL_TIMEOUT;
 800324c:	2303      	movs	r3, #3
 800324e:	e010      	b.n	8003272 <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003250:	69bb      	ldr	r3, [r7, #24]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d101      	bne.n	800325a <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 8003256:	2300      	movs	r3, #0
 8003258:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      count--;
 800325a:	69bb      	ldr	r3, [r7, #24]
 800325c:	3b01      	subs	r3, #1
 800325e:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	689a      	ldr	r2, [r3, #8]
 8003266:	68bb      	ldr	r3, [r7, #8]
 8003268:	4013      	ands	r3, r2
 800326a:	687a      	ldr	r2, [r7, #4]
 800326c:	429a      	cmp	r2, r3
 800326e:	d196      	bne.n	800319e <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 8003270:	2300      	movs	r3, #0
}
 8003272:	4618      	mov	r0, r3
 8003274:	3728      	adds	r7, #40	@ 0x28
 8003276:	46bd      	mov	sp, r7
 8003278:	bd80      	pop	{r7, pc}
 800327a:	bf00      	nop
 800327c:	20040010 	.word	0x20040010

08003280 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003280:	b580      	push	{r7, lr}
 8003282:	b086      	sub	sp, #24
 8003284:	af02      	add	r7, sp, #8
 8003286:	60f8      	str	r0, [r7, #12]
 8003288:	60b9      	str	r1, [r7, #8]
 800328a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	9300      	str	r3, [sp, #0]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2200      	movs	r2, #0
 8003294:	f44f 51c0 	mov.w	r1, #6144	@ 0x1800
 8003298:	68f8      	ldr	r0, [r7, #12]
 800329a:	f7ff ff5b 	bl	8003154 <SPI_WaitFifoStateUntilTimeout>
 800329e:	4603      	mov	r3, r0
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d007      	beq.n	80032b4 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032a8:	f043 0220 	orr.w	r2, r3, #32
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032b0:	2303      	movs	r3, #3
 80032b2:	e027      	b.n	8003304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	9300      	str	r3, [sp, #0]
 80032b8:	68bb      	ldr	r3, [r7, #8]
 80032ba:	2200      	movs	r2, #0
 80032bc:	2180      	movs	r1, #128	@ 0x80
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f7ff fec0 	bl	8003044 <SPI_WaitFlagStateUntilTimeout>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d007      	beq.n	80032da <SPI_EndRxTxTransaction+0x5a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032ce:	f043 0220 	orr.w	r2, r3, #32
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032d6:	2303      	movs	r3, #3
 80032d8:	e014      	b.n	8003304 <SPI_EndRxTxTransaction+0x84>
  }

  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	9300      	str	r3, [sp, #0]
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	2200      	movs	r2, #0
 80032e2:	f44f 61c0 	mov.w	r1, #1536	@ 0x600
 80032e6:	68f8      	ldr	r0, [r7, #12]
 80032e8:	f7ff ff34 	bl	8003154 <SPI_WaitFifoStateUntilTimeout>
 80032ec:	4603      	mov	r3, r0
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d007      	beq.n	8003302 <SPI_EndRxTxTransaction+0x82>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80032f6:	f043 0220 	orr.w	r2, r3, #32
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	661a      	str	r2, [r3, #96]	@ 0x60
    return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e000      	b.n	8003304 <SPI_EndRxTxTransaction+0x84>
  }

  return HAL_OK;
 8003302:	2300      	movs	r3, #0
}
 8003304:	4618      	mov	r0, r3
 8003306:	3710      	adds	r7, #16
 8003308:	46bd      	mov	sp, r7
 800330a:	bd80      	pop	{r7, pc}

0800330c <memset>:
 800330c:	4402      	add	r2, r0
 800330e:	4603      	mov	r3, r0
 8003310:	4293      	cmp	r3, r2
 8003312:	d100      	bne.n	8003316 <memset+0xa>
 8003314:	4770      	bx	lr
 8003316:	f803 1b01 	strb.w	r1, [r3], #1
 800331a:	e7f9      	b.n	8003310 <memset+0x4>

0800331c <__libc_init_array>:
 800331c:	b570      	push	{r4, r5, r6, lr}
 800331e:	4d0d      	ldr	r5, [pc, #52]	@ (8003354 <__libc_init_array+0x38>)
 8003320:	4c0d      	ldr	r4, [pc, #52]	@ (8003358 <__libc_init_array+0x3c>)
 8003322:	1b64      	subs	r4, r4, r5
 8003324:	10a4      	asrs	r4, r4, #2
 8003326:	2600      	movs	r6, #0
 8003328:	42a6      	cmp	r6, r4
 800332a:	d109      	bne.n	8003340 <__libc_init_array+0x24>
 800332c:	4d0b      	ldr	r5, [pc, #44]	@ (800335c <__libc_init_array+0x40>)
 800332e:	4c0c      	ldr	r4, [pc, #48]	@ (8003360 <__libc_init_array+0x44>)
 8003330:	f000 f818 	bl	8003364 <_init>
 8003334:	1b64      	subs	r4, r4, r5
 8003336:	10a4      	asrs	r4, r4, #2
 8003338:	2600      	movs	r6, #0
 800333a:	42a6      	cmp	r6, r4
 800333c:	d105      	bne.n	800334a <__libc_init_array+0x2e>
 800333e:	bd70      	pop	{r4, r5, r6, pc}
 8003340:	f855 3b04 	ldr.w	r3, [r5], #4
 8003344:	4798      	blx	r3
 8003346:	3601      	adds	r6, #1
 8003348:	e7ee      	b.n	8003328 <__libc_init_array+0xc>
 800334a:	f855 3b04 	ldr.w	r3, [r5], #4
 800334e:	4798      	blx	r3
 8003350:	3601      	adds	r6, #1
 8003352:	e7f2      	b.n	800333a <__libc_init_array+0x1e>
 8003354:	080033bc 	.word	0x080033bc
 8003358:	080033bc 	.word	0x080033bc
 800335c:	080033bc 	.word	0x080033bc
 8003360:	080033c0 	.word	0x080033c0

08003364 <_init>:
 8003364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003366:	bf00      	nop
 8003368:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800336a:	bc08      	pop	{r3}
 800336c:	469e      	mov	lr, r3
 800336e:	4770      	bx	lr

08003370 <_fini>:
 8003370:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003372:	bf00      	nop
 8003374:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003376:	bc08      	pop	{r3}
 8003378:	469e      	mov	lr, r3
 800337a:	4770      	bx	lr
